{"version":3,"sources":["../../src/api/role-assignments.ts","../../src/openapi/api/apikeys-api.ts","../../src/openapi/base.ts","../../src/openapi/common.ts","../../src/openapi/api/audit-elements-data-api.ts","../../src/openapi/api/audit-logs-api.ts","../../src/openapi/api/authentication-api.ts","../../src/openapi/api/condition-set-rules-api.ts","../../src/openapi/api/condition-sets-api.ts","../../src/openapi/api/decision-logs-api.ts","../../src/openapi/api/decision-logs-ingress-api.ts","../../src/openapi/api/default-api.ts","../../src/openapi/api/elements-configs-api.ts","../../src/openapi/api/environments-api.ts","../../src/openapi/api/implicit-grants-api.ts","../../src/openapi/api/instructions-api.ts","../../src/openapi/api/members-api.ts","../../src/openapi/api/opaldata-api.ts","../../src/openapi/api/organizations-api.ts","../../src/openapi/api/policy-api.ts","../../src/openapi/api/policy-decision-points-api.ts","../../src/openapi/api/policy-git-repositories-api.ts","../../src/openapi/api/projects-api.ts","../../src/openapi/api/proxy-config-api.ts","../../src/openapi/api/relationship-tuples-api.ts","../../src/openapi/api/resource-action-groups-api.ts","../../src/openapi/api/resource-actions-api.ts","../../src/openapi/api/resource-attributes-api.ts","../../src/openapi/api/resource-instances-api.ts","../../src/openapi/api/resource-relations-api.ts","../../src/openapi/api/resource-roles-api.ts","../../src/openapi/api/resources-api.ts","../../src/openapi/api/role-assignments-api.ts","../../src/openapi/api/roles-api.ts","../../src/openapi/api/tenants-api.ts","../../src/openapi/api/user-attributes-api.ts","../../src/openapi/api/users-api.ts","../../src/openapi/api/users-elements-data-api.ts","../../src/openapi/configuration.ts","../../src/api/base.ts","../../src/api/context.ts"],"sourcesContent":["import { Logger } from 'pino';\n\nimport { IPermitConfig } from '../config';\nimport {\n  RoleAssignmentsApi as AutogenRoleAssignmentsApi,\n  BulkRoleAssignmentReport,\n  BulkRoleUnAssignmentReport,\n  PaginatedResultRoleAssignmentDetailedRead,\n  PaginatedResultRoleAssignmentRead,\n  RoleAssignmentCreate,\n  RoleAssignmentDetailedRead,\n  RoleAssignmentRead,\n  RoleAssignmentRemove,\n} from '../openapi';\nimport { BASE_PATH } from '../openapi/base';\n\nimport { BaseFactsPermitAPI, IBasePaginationExtended, IWaitForSync } from './base';\nimport { ApiContextLevel, ApiKeyLevel } from './context';\n\nexport {\n  BulkRoleAssignmentReport,\n  BulkRoleUnAssignmentReport,\n  PaginatedResultRoleAssignmentDetailedRead,\n  PaginatedResultRoleAssignmentRead,\n  RoleAssignmentCreate,\n  RoleAssignmentRead,\n  RoleAssignmentDetailedRead,\n  RoleAssignmentRemove,\n} from '../openapi';\n\n/**\n * Represents the parameters for listing role assignments.\n */\nexport interface IBaseListRoleAssignments extends IBasePaginationExtended {\n  /**\n   * optional user filter, will only return role assignments granted to this user.\n   */\n  user?: string;\n\n  /**\n   * optional role filter, will only return role assignments granting this role.\n   */\n  role?: string;\n\n  /**\n   * optional tenant filter, will only return role assignments granted in that tenant.\n   */\n  tenant?: string;\n\n  /**\n   * optional resource instance filter, will only return (resource) role assignments granted on that resource instance.\n   */\n  resourceInstance?: string;\n\n  /**\n   * optional detailed flag, will return detailed role assignments.\n   */\n  detailed?: boolean;\n}\n\ntype IListRoleAssignmentsIncludeTotalCount = IBaseListRoleAssignments & { includeTotalCount: true };\n\ntype IListRoleAssignmentsDetailed = IBaseListRoleAssignments & { detailed: true };\n\nexport type IListRoleAssignments =\n  | IBaseListRoleAssignments\n  | IListRoleAssignmentsIncludeTotalCount\n  | IListRoleAssignmentsDetailed;\n\ntype ReturnListRoleAssignments<T extends IListRoleAssignments> =\n  T extends IListRoleAssignmentsIncludeTotalCount\n    ? // with total count\n      T extends IListRoleAssignmentsDetailed\n      ? PaginatedResultRoleAssignmentDetailedRead\n      : PaginatedResultRoleAssignmentRead\n    : // without total count\n    T extends IListRoleAssignmentsDetailed\n    ? RoleAssignmentDetailedRead[]\n    : RoleAssignmentRead[];\n\n/**\n * API client for managing role assignments.\n */\nexport interface IRoleAssignmentsApi extends IWaitForSync {\n  /**\n   * Retrieves a list of role assignments based on the specified filters.\n   *\n   * @param params - The filters and pagination options for listing role assignments.\n   * @returns A promise that resolves with an array of role assignments.\n   * @throws {@link PermitApiError} If the API returns an error HTTP status code.\n   * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.\n   */\n  list<T extends IListRoleAssignments>(params: T): Promise<ReturnListRoleAssignments<T>>;\n\n  /**\n   * Assigns a role to a user in the scope of a given tenant.\n   *\n   * @param assignment - The role assignment details.\n   * @returns A promise that resolves with the assigned role.\n   * @throws {@link PermitApiError} If the API returns an error HTTP status code.\n   * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.\n   */\n  assign(assignment: RoleAssignmentCreate): Promise<RoleAssignmentRead>;\n\n  /**\n   * Unassigns a role from a user in the scope of a given tenant.\n   *\n   * @param unassignment - The role unassignment details.\n   * @returns A promise that resolves when the role is successfully unassigned.\n   * @throws {@link PermitApiError} If the API returns an error HTTP status code.\n   * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.\n   */\n  unassign(unassignment: RoleAssignmentRemove): Promise<void>;\n\n  /**\n   * Assigns multiple roles in bulk using the provided role assignments data.\n   * Each role assignment is a tuple of (user, role, tenant).\n   *\n   * @param assignments - The role assignments to be performed in bulk.\n   * @returns A promise that resolves with the bulk assignment report.\n   * @throws {@link PermitApiError} If the API returns an error HTTP status code.\n   * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.\n   */\n  bulkAssign(assignments: RoleAssignmentCreate[]): Promise<BulkRoleAssignmentReport>;\n\n  /**\n   * Removes multiple role assignments in bulk using the provided unassignment data.\n   * Each role to unassign is a tuple of (user, role, tenant).\n   *\n   * @param unassignments - The role unassignments to be performed in bulk.\n   * @returns A promise that resolves with the bulk unassignment report.\n   * @throws {@link PermitApiError} If the API returns an error HTTP status code.\n   * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.\n   */\n  bulkUnassign(unassignments: RoleAssignmentRemove[]): Promise<BulkRoleUnAssignmentReport>;\n}\n\n/**\n * The RoleAssignmentsApi class provides methods for interacting with Role Assignments.\n */\nexport class RoleAssignmentsApi extends BaseFactsPermitAPI implements IRoleAssignmentsApi {\n  private roleAssignments: AutogenRoleAssignmentsApi;\n\n  /**\n   * Creates an instance of the RoleAssignmentsApi.\n   * @param config - The configuration object for the Permit SDK.\n   * @param logger - The logger instance for logging.\n   */\n  constructor(config: IPermitConfig, logger: Logger) {\n    super(config, logger);\n    this.roleAssignments = new AutogenRoleAssignmentsApi(\n      this.openapiClientConfig,\n      BASE_PATH,\n      this.config.axiosInstance,\n    );\n  }\n\n  /**\n   * Retrieves a list of role assignments based on the specified filters.\n   *\n   * @param params - The filters and pagination options for listing role assignments.\n   * @returns A promise that resolves with an array of role assignments.\n   * @throws {@link PermitApiError} If the API returns an error HTTP status code.\n   * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.\n   */\n  public async list<T extends IListRoleAssignments>(\n    params: T,\n  ): Promise<ReturnListRoleAssignments<T>>;\n  public async list(\n    params: IListRoleAssignments,\n  ): Promise<\n    | Array<RoleAssignmentRead>\n    | Array<RoleAssignmentDetailedRead>\n    | PaginatedResultRoleAssignmentRead\n    | PaginatedResultRoleAssignmentDetailedRead\n  > {\n    await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);\n    await this.ensureContext(ApiContextLevel.ENVIRONMENT);\n    const {\n      user,\n      tenant,\n      role,\n      resourceInstance,\n      page = 1,\n      perPage = 100,\n      detailed,\n      includeTotalCount,\n    } = params;\n    try {\n      return (\n        await this.roleAssignments.listRoleAssignments({\n          ...this.config.apiContext.environmentContext,\n          user,\n          tenant,\n          role,\n          resourceInstance,\n          detailed,\n          page,\n          perPage,\n          includeTotalCount,\n        })\n      ).data;\n    } catch (err) {\n      this.handleApiError(err);\n    }\n  }\n\n  /**\n   * Assigns a role to a user in the scope of a given tenant.\n   *\n   * @param assignment - The role assignment details.\n   * @returns A promise that resolves with the assigned role.\n   * @throws {@link PermitApiError} If the API returns an error HTTP status code.\n   * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.\n   */\n  public async assign(assignment: RoleAssignmentCreate): Promise<RoleAssignmentRead> {\n    await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);\n    await this.ensureContext(ApiContextLevel.ENVIRONMENT);\n    try {\n      return (\n        await this.roleAssignments.assignRole({\n          ...this.config.apiContext.environmentContext,\n          roleAssignmentCreate: assignment,\n        })\n      ).data;\n    } catch (err) {\n      this.handleApiError(err);\n    }\n  }\n\n  /**\n   * Unassigns a role from a user in the scope of a given tenant.\n   *\n   * @param unassignment - The role unassignment details.\n   * @returns A promise that resolves when the role is successfully unassigned.\n   * @throws {@link PermitApiError} If the API returns an error HTTP status code.\n   * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.\n   */\n  public async unassign(unassignment: RoleAssignmentRemove): Promise<void> {\n    await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);\n    await this.ensureContext(ApiContextLevel.ENVIRONMENT);\n    try {\n      return (\n        await this.roleAssignments.unassignRole({\n          ...this.config.apiContext.environmentContext,\n          roleAssignmentRemove: unassignment,\n        })\n      ).data;\n    } catch (err) {\n      this.handleApiError(err);\n    }\n  }\n\n  /**\n   * Assigns multiple roles in bulk using the provided role assignments data.\n   * Each role assignment is a tuple of (user, role, tenant).\n   *\n   * @param assignments - The role assignments to be performed in bulk.\n   * @returns A promise that resolves with the bulk assignment report.\n   * @throws {@link PermitApiError} If the API returns an error HTTP status code.\n   * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.\n   */\n  public async bulkAssign(assignments: RoleAssignmentCreate[]): Promise<BulkRoleAssignmentReport> {\n    await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);\n    await this.ensureContext(ApiContextLevel.ENVIRONMENT);\n    try {\n      return (\n        await this.roleAssignments.bulkAssignRole({\n          ...this.config.apiContext.environmentContext,\n          roleAssignmentCreate: assignments,\n        })\n      ).data;\n    } catch (err) {\n      this.handleApiError(err);\n    }\n  }\n\n  /**\n   * Removes multiple role assignments in bulk using the provided unassignment data.\n   * Each role to unassign is a tuple of (user, role, tenant).\n   *\n   * @param unassignments - The role unassignments to be performed in bulk.\n   * @returns A promise that resolves with the bulk unassignment report.\n   * @throws {@link PermitApiError} If the API returns an error HTTP status code.\n   * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.\n   */\n  public async bulkUnassign(\n    unassignments: RoleAssignmentRemove[],\n  ): Promise<BulkRoleUnAssignmentReport> {\n    await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);\n    await this.ensureContext(ApiContextLevel.ENVIRONMENT);\n    try {\n      return (\n        await this.roleAssignments.bulkUnassignRole({\n          ...this.config.apiContext.environmentContext,\n          roleAssignmentRemove: unassignments,\n        })\n      ).data;\n    } catch (err) {\n      this.handleApiError(err);\n    }\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { APIKeyCreate } from '../types';\n// @ts-ignore\nimport { APIKeyRead } from '../types';\n// @ts-ignore\nimport { APIKeyScopeRead } from '../types';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n// @ts-ignore\nimport { MemberAccessObj } from '../types';\n// @ts-ignore\nimport { PaginatedResultAPIKeyRead } from '../types';\n/**\n * APIKeysApi - axios parameter creator\n * @export\n */\nexport const APIKeysApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     * Creates a new api_key under the active organization.\n     * @summary Create Api Key\n     * @param {APIKeyCreate} aPIKeyCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createApiKey: async (\n      aPIKeyCreate: APIKeyCreate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'aPIKeyCreate' is not null or undefined\n      assertParamExists('createApiKey', 'aPIKeyCreate', aPIKeyCreate);\n      const localVarPath = `/v2/api-key`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        aPIKeyCreate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Deletes the api_key and all its related data.\n     * @summary Delete Api Key\n     * @param {string} apiKeyId The unique id of the API key\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteApiKey: async (\n      apiKeyId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'apiKeyId' is not null or undefined\n      assertParamExists('deleteApiKey', 'apiKeyId', apiKeyId);\n      const localVarPath = `/v2/api-key/{api_key_id}`.replace(\n        `{${'api_key_id'}}`,\n        encodeURIComponent(String(apiKeyId)),\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Gets a single api_key matching the given api_key_id, if such api_key exists.\n     * @summary Get Api Key\n     * @param {string} apiKeyId The unique id of the API key\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getApiKey: async (apiKeyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n      // verify required parameter 'apiKeyId' is not null or undefined\n      assertParamExists('getApiKey', 'apiKeyId', apiKeyId);\n      const localVarPath = `/v2/api-key/{api_key_id}`.replace(\n        `{${'api_key_id'}}`,\n        encodeURIComponent(String(apiKeyId)),\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get Api Key Scope\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getApiKeyScope: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n      const localVarPath = `/v2/api-key/scope`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get Environment Api Key\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getEnvironmentApiKey: async (\n      projId: string,\n      envId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getEnvironmentApiKey', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getEnvironmentApiKey', 'envId', envId);\n      const localVarPath = `/v2/api-key/{proj_id}/{env_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Lists all the api_keys under the active organization.\n     * @summary List Api Keys\n     * @param {MemberAccessObj} [objectType]\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listApiKeys: async (\n      objectType?: MemberAccessObj,\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/v2/api-key`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (objectType !== undefined) {\n        localVarQueryParameter['object_type'] = objectType;\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Rotates the API key of the PDP container with id `pdp_id`.  The rotation of the API key revokes the old API key and issues a new API key to the PDP.\n     * @summary Rotate API Key\n     * @param {string} apiKeyId The unique id of the API key\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    rotateApiKey: async (\n      apiKeyId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'apiKeyId' is not null or undefined\n      assertParamExists('rotateApiKey', 'apiKeyId', apiKeyId);\n      const localVarPath = `/v2/api-key/{api_key_id}/rotate-secret`.replace(\n        `{${'api_key_id'}}`,\n        encodeURIComponent(String(apiKeyId)),\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * APIKeysApi - functional programming interface\n * @export\n */\nexport const APIKeysApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = APIKeysApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * Creates a new api_key under the active organization.\n     * @summary Create Api Key\n     * @param {APIKeyCreate} aPIKeyCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async createApiKey(\n      aPIKeyCreate: APIKeyCreate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIKeyRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.createApiKey(aPIKeyCreate, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Deletes the api_key and all its related data.\n     * @summary Delete Api Key\n     * @param {string} apiKeyId The unique id of the API key\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async deleteApiKey(\n      apiKeyId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApiKey(apiKeyId, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Gets a single api_key matching the given api_key_id, if such api_key exists.\n     * @summary Get Api Key\n     * @param {string} apiKeyId The unique id of the API key\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getApiKey(\n      apiKeyId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIKeyRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getApiKey(apiKeyId, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get Api Key Scope\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getApiKeyScope(\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIKeyScopeRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getApiKeyScope(options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get Environment Api Key\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getEnvironmentApiKey(\n      projId: string,\n      envId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIKeyRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getEnvironmentApiKey(\n        projId,\n        envId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Lists all the api_keys under the active organization.\n     * @summary List Api Keys\n     * @param {MemberAccessObj} [objectType]\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async listApiKeys(\n      objectType?: MemberAccessObj,\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResultAPIKeyRead>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.listApiKeys(\n        objectType,\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Rotates the API key of the PDP container with id `pdp_id`.  The rotation of the API key revokes the old API key and issues a new API key to the PDP.\n     * @summary Rotate API Key\n     * @param {string} apiKeyId The unique id of the API key\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async rotateApiKey(\n      apiKeyId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIKeyRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.rotateApiKey(apiKeyId, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * APIKeysApi - factory interface\n * @export\n */\nexport const APIKeysApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = APIKeysApiFp(configuration);\n  return {\n    /**\n     * Creates a new api_key under the active organization.\n     * @summary Create Api Key\n     * @param {APIKeyCreate} aPIKeyCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createApiKey(aPIKeyCreate: APIKeyCreate, options?: any): AxiosPromise<APIKeyRead> {\n      return localVarFp\n        .createApiKey(aPIKeyCreate, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Deletes the api_key and all its related data.\n     * @summary Delete Api Key\n     * @param {string} apiKeyId The unique id of the API key\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteApiKey(apiKeyId: string, options?: any): AxiosPromise<void> {\n      return localVarFp.deleteApiKey(apiKeyId, options).then((request) => request(axios, basePath));\n    },\n    /**\n     * Gets a single api_key matching the given api_key_id, if such api_key exists.\n     * @summary Get Api Key\n     * @param {string} apiKeyId The unique id of the API key\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getApiKey(apiKeyId: string, options?: any): AxiosPromise<APIKeyRead> {\n      return localVarFp.getApiKey(apiKeyId, options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get Api Key Scope\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getApiKeyScope(options?: any): AxiosPromise<APIKeyScopeRead> {\n      return localVarFp.getApiKeyScope(options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get Environment Api Key\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getEnvironmentApiKey(projId: string, envId: string, options?: any): AxiosPromise<APIKeyRead> {\n      return localVarFp\n        .getEnvironmentApiKey(projId, envId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Lists all the api_keys under the active organization.\n     * @summary List Api Keys\n     * @param {MemberAccessObj} [objectType]\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listApiKeys(\n      objectType?: MemberAccessObj,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<PaginatedResultAPIKeyRead> {\n      return localVarFp\n        .listApiKeys(objectType, page, perPage, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Rotates the API key of the PDP container with id `pdp_id`.  The rotation of the API key revokes the old API key and issues a new API key to the PDP.\n     * @summary Rotate API Key\n     * @param {string} apiKeyId The unique id of the API key\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    rotateApiKey(apiKeyId: string, options?: any): AxiosPromise<APIKeyRead> {\n      return localVarFp.rotateApiKey(apiKeyId, options).then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for createApiKey operation in APIKeysApi.\n * @export\n * @interface APIKeysApiCreateApiKeyRequest\n */\nexport interface APIKeysApiCreateApiKeyRequest {\n  /**\n   *\n   * @type {APIKeyCreate}\n   * @memberof APIKeysApiCreateApiKey\n   */\n  readonly aPIKeyCreate: APIKeyCreate;\n}\n\n/**\n * Request parameters for deleteApiKey operation in APIKeysApi.\n * @export\n * @interface APIKeysApiDeleteApiKeyRequest\n */\nexport interface APIKeysApiDeleteApiKeyRequest {\n  /**\n   * The unique id of the API key\n   * @type {string}\n   * @memberof APIKeysApiDeleteApiKey\n   */\n  readonly apiKeyId: string;\n}\n\n/**\n * Request parameters for getApiKey operation in APIKeysApi.\n * @export\n * @interface APIKeysApiGetApiKeyRequest\n */\nexport interface APIKeysApiGetApiKeyRequest {\n  /**\n   * The unique id of the API key\n   * @type {string}\n   * @memberof APIKeysApiGetApiKey\n   */\n  readonly apiKeyId: string;\n}\n\n/**\n * Request parameters for getEnvironmentApiKey operation in APIKeysApi.\n * @export\n * @interface APIKeysApiGetEnvironmentApiKeyRequest\n */\nexport interface APIKeysApiGetEnvironmentApiKeyRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof APIKeysApiGetEnvironmentApiKey\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof APIKeysApiGetEnvironmentApiKey\n   */\n  readonly envId: string;\n}\n\n/**\n * Request parameters for listApiKeys operation in APIKeysApi.\n * @export\n * @interface APIKeysApiListApiKeysRequest\n */\nexport interface APIKeysApiListApiKeysRequest {\n  /**\n   *\n   * @type {MemberAccessObj}\n   * @memberof APIKeysApiListApiKeys\n   */\n  readonly objectType?: MemberAccessObj;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof APIKeysApiListApiKeys\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof APIKeysApiListApiKeys\n   */\n  readonly perPage?: number;\n}\n\n/**\n * Request parameters for rotateApiKey operation in APIKeysApi.\n * @export\n * @interface APIKeysApiRotateApiKeyRequest\n */\nexport interface APIKeysApiRotateApiKeyRequest {\n  /**\n   * The unique id of the API key\n   * @type {string}\n   * @memberof APIKeysApiRotateApiKey\n   */\n  readonly apiKeyId: string;\n}\n\n/**\n * APIKeysApi - object-oriented interface\n * @export\n * @class APIKeysApi\n * @extends {BaseAPI}\n */\nexport class APIKeysApi extends BaseAPI {\n  /**\n   * Creates a new api_key under the active organization.\n   * @summary Create Api Key\n   * @param {APIKeysApiCreateApiKeyRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof APIKeysApi\n   */\n  public createApiKey(\n    requestParameters: APIKeysApiCreateApiKeyRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return APIKeysApiFp(this.configuration)\n      .createApiKey(requestParameters.aPIKeyCreate, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Deletes the api_key and all its related data.\n   * @summary Delete Api Key\n   * @param {APIKeysApiDeleteApiKeyRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof APIKeysApi\n   */\n  public deleteApiKey(\n    requestParameters: APIKeysApiDeleteApiKeyRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return APIKeysApiFp(this.configuration)\n      .deleteApiKey(requestParameters.apiKeyId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Gets a single api_key matching the given api_key_id, if such api_key exists.\n   * @summary Get Api Key\n   * @param {APIKeysApiGetApiKeyRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof APIKeysApi\n   */\n  public getApiKey(requestParameters: APIKeysApiGetApiKeyRequest, options?: AxiosRequestConfig) {\n    return APIKeysApiFp(this.configuration)\n      .getApiKey(requestParameters.apiKeyId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get Api Key Scope\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof APIKeysApi\n   */\n  public getApiKeyScope(options?: AxiosRequestConfig) {\n    return APIKeysApiFp(this.configuration)\n      .getApiKeyScope(options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get Environment Api Key\n   * @param {APIKeysApiGetEnvironmentApiKeyRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof APIKeysApi\n   */\n  public getEnvironmentApiKey(\n    requestParameters: APIKeysApiGetEnvironmentApiKeyRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return APIKeysApiFp(this.configuration)\n      .getEnvironmentApiKey(requestParameters.projId, requestParameters.envId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Lists all the api_keys under the active organization.\n   * @summary List Api Keys\n   * @param {APIKeysApiListApiKeysRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof APIKeysApi\n   */\n  public listApiKeys(\n    requestParameters: APIKeysApiListApiKeysRequest = {},\n    options?: AxiosRequestConfig,\n  ) {\n    return APIKeysApiFp(this.configuration)\n      .listApiKeys(\n        requestParameters.objectType,\n        requestParameters.page,\n        requestParameters.perPage,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Rotates the API key of the PDP container with id `pdp_id`.  The rotation of the API key revokes the old API key and issues a new API key to the PDP.\n   * @summary Rotate API Key\n   * @param {APIKeysApiRotateApiKeyRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof APIKeysApi\n   */\n  public rotateApiKey(\n    requestParameters: APIKeysApiRotateApiKeyRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return APIKeysApiFp(this.configuration)\n      .rotateApiKey(requestParameters.apiKeyId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Configuration } from './configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\n\nexport const BASE_PATH = 'http://localhost'.replace(/\\/+$/, '');\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n  csv: ',',\n  ssv: ' ',\n  tsv: '\\t',\n  pipes: '|',\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n  url: string;\n  options: AxiosRequestConfig;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n  protected configuration: Configuration | undefined;\n\n  constructor(\n    configuration?: Configuration,\n    protected basePath: string = BASE_PATH,\n    protected axios: AxiosInstance = globalAxios,\n  ) {\n    if (configuration) {\n      this.configuration = configuration;\n      this.basePath = configuration.basePath || this.basePath;\n    }\n  }\n}\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n  name: 'RequiredError' = 'RequiredError';\n  constructor(public field: string, msg?: string) {\n    super(msg);\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Configuration } from './configuration';\nimport { RequiredError, RequestArgs } from './base';\nimport { AxiosInstance, AxiosResponse } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com';\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (\n  functionName: string,\n  paramName: string,\n  paramValue: unknown,\n) {\n  if (paramValue === null || paramValue === undefined) {\n    throw new RequiredError(\n      paramName,\n      `Required parameter ${paramName} was null or undefined when calling ${functionName}.`,\n    );\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (\n  object: any,\n  keyParamName: string,\n  configuration?: Configuration,\n) {\n  if (configuration && configuration.apiKey) {\n    const localVarApiKeyValue =\n      typeof configuration.apiKey === 'function'\n        ? await configuration.apiKey(keyParamName)\n        : await configuration.apiKey;\n    object[keyParamName] = localVarApiKeyValue;\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n  if (configuration && (configuration.username || configuration.password)) {\n    object['auth'] = { username: configuration.username, password: configuration.password };\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n  if (configuration && configuration.accessToken) {\n    const accessToken =\n      typeof configuration.accessToken === 'function'\n        ? await configuration.accessToken()\n        : await configuration.accessToken;\n    object['Authorization'] = 'Bearer ' + accessToken;\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (\n  object: any,\n  name: string,\n  scopes: string[],\n  configuration?: Configuration,\n) {\n  if (configuration && configuration.accessToken) {\n    const localVarAccessTokenValue =\n      typeof configuration.accessToken === 'function'\n        ? await configuration.accessToken(name, scopes)\n        : await configuration.accessToken;\n    object['Authorization'] = 'Bearer ' + localVarAccessTokenValue;\n  }\n};\n\nfunction setFlattenedQueryParams(\n  urlSearchParams: URLSearchParams,\n  parameter: any,\n  key: string = '',\n): void {\n  if (typeof parameter === 'object') {\n    if (Array.isArray(parameter)) {\n      (parameter as any[]).forEach((item) => setFlattenedQueryParams(urlSearchParams, item, key));\n    } else {\n      Object.keys(parameter).forEach((currentKey) =>\n        setFlattenedQueryParams(\n          urlSearchParams,\n          parameter[currentKey],\n          `${key}${key !== '' ? '.' : ''}${currentKey}`,\n        ),\n      );\n    }\n  } else {\n    if (urlSearchParams.has(key)) {\n      urlSearchParams.append(key, parameter);\n    } else {\n      urlSearchParams.set(key, parameter);\n    }\n  }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n  const searchParams = new URLSearchParams(url.search);\n  setFlattenedQueryParams(searchParams, objects);\n  url.search = searchParams.toString();\n};\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (\n  value: any,\n  requestOptions: any,\n  configuration?: Configuration,\n) {\n  const nonString = typeof value !== 'string';\n  const needsSerialization =\n    nonString && configuration && configuration.isJsonMime\n      ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n      : nonString;\n  return needsSerialization ? JSON.stringify(value !== undefined ? value : {}) : value || '';\n};\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n  return url.pathname + url.search + url.hash;\n};\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (\n  axiosArgs: RequestArgs,\n  globalAxios: AxiosInstance,\n  BASE_PATH: string,\n  configuration?: Configuration,\n) {\n  return <T = unknown, R = AxiosResponse<T>>(\n    axios: AxiosInstance = globalAxios,\n    basePath: string = BASE_PATH,\n  ) => {\n    const axiosRequestArgs = {\n      ...axiosArgs.options,\n      url: (configuration?.basePath || basePath) + axiosArgs.url,\n    };\n    return axios.request<T, R>(axiosRequestArgs);\n  };\n};\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n// @ts-ignore\nimport { PaginatedResultAuditLog } from '../types';\n/**\n * AuditElementsDataApi - axios parameter creator\n * @export\n */\nexport const AuditElementsDataApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     * Lists audit logs for for specific elements config (tenant scope)\n     * @summary List audit logs\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [search] Text search for the email field\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    elementsListAuditLogs: async (\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      search?: string,\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('elementsListAuditLogs', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('elementsListAuditLogs', 'envId', envId);\n      // verify required parameter 'elementsConfigId' is not null or undefined\n      assertParamExists('elementsListAuditLogs', 'elementsConfigId', elementsConfigId);\n      const localVarPath =\n        `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/audit_logs`\n          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n          .replace(`{${'elements_config_id'}}`, encodeURIComponent(String(elementsConfigId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * AuditElementsDataApi - functional programming interface\n * @export\n */\nexport const AuditElementsDataApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = AuditElementsDataApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * Lists audit logs for for specific elements config (tenant scope)\n     * @summary List audit logs\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [search] Text search for the email field\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async elementsListAuditLogs(\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      search?: string,\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResultAuditLog>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.elementsListAuditLogs(\n        projId,\n        envId,\n        elementsConfigId,\n        search,\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * AuditElementsDataApi - factory interface\n * @export\n */\nexport const AuditElementsDataApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = AuditElementsDataApiFp(configuration);\n  return {\n    /**\n     * Lists audit logs for for specific elements config (tenant scope)\n     * @summary List audit logs\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [search] Text search for the email field\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    elementsListAuditLogs(\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      search?: string,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<PaginatedResultAuditLog> {\n      return localVarFp\n        .elementsListAuditLogs(projId, envId, elementsConfigId, search, page, perPage, options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for elementsListAuditLogs operation in AuditElementsDataApi.\n * @export\n * @interface AuditElementsDataApiElementsListAuditLogsRequest\n */\nexport interface AuditElementsDataApiElementsListAuditLogsRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof AuditElementsDataApiElementsListAuditLogs\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof AuditElementsDataApiElementsListAuditLogs\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof AuditElementsDataApiElementsListAuditLogs\n   */\n  readonly elementsConfigId: string;\n\n  /**\n   * Text search for the email field\n   * @type {string}\n   * @memberof AuditElementsDataApiElementsListAuditLogs\n   */\n  readonly search?: string;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof AuditElementsDataApiElementsListAuditLogs\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof AuditElementsDataApiElementsListAuditLogs\n   */\n  readonly perPage?: number;\n}\n\n/**\n * AuditElementsDataApi - object-oriented interface\n * @export\n * @class AuditElementsDataApi\n * @extends {BaseAPI}\n */\nexport class AuditElementsDataApi extends BaseAPI {\n  /**\n   * Lists audit logs for for specific elements config (tenant scope)\n   * @summary List audit logs\n   * @param {AuditElementsDataApiElementsListAuditLogsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuditElementsDataApi\n   */\n  public elementsListAuditLogs(\n    requestParameters: AuditElementsDataApiElementsListAuditLogsRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return AuditElementsDataApiFp(this.configuration)\n      .elementsListAuditLogs(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.elementsConfigId,\n        requestParameters.search,\n        requestParameters.page,\n        requestParameters.perPage,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { AuditLogSortKey } from '../types';\n// @ts-ignore\nimport { DetailedAuditLog } from '../types';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n// @ts-ignore\nimport { PaginatedResultAuditLog } from '../types';\n/**\n * AuditLogsApi - axios parameter creator\n * @export\n */\nexport const AuditLogsApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     *\n     * @summary Get detailed audit log\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} logId The unique id of the audit log\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getDetailedAuditLog: async (\n      projId: string,\n      envId: string,\n      logId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getDetailedAuditLog', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getDetailedAuditLog', 'envId', envId);\n      // verify required parameter 'logId' is not null or undefined\n      assertParamExists('getDetailedAuditLog', 'logId', logId);\n      const localVarPath = `/v2/pdps/{proj_id}/{env_id}/audit_logs/{log_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'log_id'}}`, encodeURIComponent(String(logId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary List Audit Logs\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [pdpId] Filter by pdp config id\n     * @param {Array<string>} [users] List of user keys or emails to filter by\n     * @param {boolean} [decision] Filter by decision result\n     * @param {Array<string>} [resources] Filter by resources\n     * @param {string} [tenant] Filter by tenant\n     * @param {string} [action] Filter by action\n     * @param {number} [timestampFrom] Filter by timestamp from\n     * @param {number} [timestampTo] Filter by timestamp to\n     * @param {AuditLogSortKey} [sortBy] Sort by column\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listAuditLogs: async (\n      projId: string,\n      envId: string,\n      pdpId?: string,\n      users?: Array<string>,\n      decision?: boolean,\n      resources?: Array<string>,\n      tenant?: string,\n      action?: string,\n      timestampFrom?: number,\n      timestampTo?: number,\n      sortBy?: AuditLogSortKey,\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('listAuditLogs', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('listAuditLogs', 'envId', envId);\n      const localVarPath = `/v2/pdps/{proj_id}/{env_id}/audit_logs`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (pdpId !== undefined) {\n        localVarQueryParameter['pdp_id'] = pdpId;\n      }\n\n      if (users) {\n        localVarQueryParameter['users'] = users;\n      }\n\n      if (decision !== undefined) {\n        localVarQueryParameter['decision'] = decision;\n      }\n\n      if (resources) {\n        localVarQueryParameter['resources'] = resources;\n      }\n\n      if (tenant !== undefined) {\n        localVarQueryParameter['tenant'] = tenant;\n      }\n\n      if (action !== undefined) {\n        localVarQueryParameter['action'] = action;\n      }\n\n      if (timestampFrom !== undefined) {\n        localVarQueryParameter['timestamp_from'] = timestampFrom;\n      }\n\n      if (timestampTo !== undefined) {\n        localVarQueryParameter['timestamp_to'] = timestampTo;\n      }\n\n      if (sortBy !== undefined) {\n        localVarQueryParameter['sort_by'] = sortBy;\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * AuditLogsApi - functional programming interface\n * @export\n */\nexport const AuditLogsApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = AuditLogsApiAxiosParamCreator(configuration);\n  return {\n    /**\n     *\n     * @summary Get detailed audit log\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} logId The unique id of the audit log\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getDetailedAuditLog(\n      projId: string,\n      envId: string,\n      logId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DetailedAuditLog>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getDetailedAuditLog(\n        projId,\n        envId,\n        logId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary List Audit Logs\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [pdpId] Filter by pdp config id\n     * @param {Array<string>} [users] List of user keys or emails to filter by\n     * @param {boolean} [decision] Filter by decision result\n     * @param {Array<string>} [resources] Filter by resources\n     * @param {string} [tenant] Filter by tenant\n     * @param {string} [action] Filter by action\n     * @param {number} [timestampFrom] Filter by timestamp from\n     * @param {number} [timestampTo] Filter by timestamp to\n     * @param {AuditLogSortKey} [sortBy] Sort by column\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async listAuditLogs(\n      projId: string,\n      envId: string,\n      pdpId?: string,\n      users?: Array<string>,\n      decision?: boolean,\n      resources?: Array<string>,\n      tenant?: string,\n      action?: string,\n      timestampFrom?: number,\n      timestampTo?: number,\n      sortBy?: AuditLogSortKey,\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResultAuditLog>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.listAuditLogs(\n        projId,\n        envId,\n        pdpId,\n        users,\n        decision,\n        resources,\n        tenant,\n        action,\n        timestampFrom,\n        timestampTo,\n        sortBy,\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * AuditLogsApi - factory interface\n * @export\n */\nexport const AuditLogsApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = AuditLogsApiFp(configuration);\n  return {\n    /**\n     *\n     * @summary Get detailed audit log\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} logId The unique id of the audit log\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getDetailedAuditLog(\n      projId: string,\n      envId: string,\n      logId: string,\n      options?: any,\n    ): AxiosPromise<DetailedAuditLog> {\n      return localVarFp\n        .getDetailedAuditLog(projId, envId, logId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary List Audit Logs\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [pdpId] Filter by pdp config id\n     * @param {Array<string>} [users] List of user keys or emails to filter by\n     * @param {boolean} [decision] Filter by decision result\n     * @param {Array<string>} [resources] Filter by resources\n     * @param {string} [tenant] Filter by tenant\n     * @param {string} [action] Filter by action\n     * @param {number} [timestampFrom] Filter by timestamp from\n     * @param {number} [timestampTo] Filter by timestamp to\n     * @param {AuditLogSortKey} [sortBy] Sort by column\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listAuditLogs(\n      projId: string,\n      envId: string,\n      pdpId?: string,\n      users?: Array<string>,\n      decision?: boolean,\n      resources?: Array<string>,\n      tenant?: string,\n      action?: string,\n      timestampFrom?: number,\n      timestampTo?: number,\n      sortBy?: AuditLogSortKey,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<PaginatedResultAuditLog> {\n      return localVarFp\n        .listAuditLogs(\n          projId,\n          envId,\n          pdpId,\n          users,\n          decision,\n          resources,\n          tenant,\n          action,\n          timestampFrom,\n          timestampTo,\n          sortBy,\n          page,\n          perPage,\n          options,\n        )\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for getDetailedAuditLog operation in AuditLogsApi.\n * @export\n * @interface AuditLogsApiGetDetailedAuditLogRequest\n */\nexport interface AuditLogsApiGetDetailedAuditLogRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof AuditLogsApiGetDetailedAuditLog\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof AuditLogsApiGetDetailedAuditLog\n   */\n  readonly envId: string;\n\n  /**\n   * The unique id of the audit log\n   * @type {string}\n   * @memberof AuditLogsApiGetDetailedAuditLog\n   */\n  readonly logId: string;\n}\n\n/**\n * Request parameters for listAuditLogs operation in AuditLogsApi.\n * @export\n * @interface AuditLogsApiListAuditLogsRequest\n */\nexport interface AuditLogsApiListAuditLogsRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof AuditLogsApiListAuditLogs\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof AuditLogsApiListAuditLogs\n   */\n  readonly envId: string;\n\n  /**\n   * Filter by pdp config id\n   * @type {string}\n   * @memberof AuditLogsApiListAuditLogs\n   */\n  readonly pdpId?: string;\n\n  /**\n   * List of user keys or emails to filter by\n   * @type {Array<string>}\n   * @memberof AuditLogsApiListAuditLogs\n   */\n  readonly users?: Array<string>;\n\n  /**\n   * Filter by decision result\n   * @type {boolean}\n   * @memberof AuditLogsApiListAuditLogs\n   */\n  readonly decision?: boolean;\n\n  /**\n   * Filter by resources\n   * @type {Array<string>}\n   * @memberof AuditLogsApiListAuditLogs\n   */\n  readonly resources?: Array<string>;\n\n  /**\n   * Filter by tenant\n   * @type {string}\n   * @memberof AuditLogsApiListAuditLogs\n   */\n  readonly tenant?: string;\n\n  /**\n   * Filter by action\n   * @type {string}\n   * @memberof AuditLogsApiListAuditLogs\n   */\n  readonly action?: string;\n\n  /**\n   * Filter by timestamp from\n   * @type {number}\n   * @memberof AuditLogsApiListAuditLogs\n   */\n  readonly timestampFrom?: number;\n\n  /**\n   * Filter by timestamp to\n   * @type {number}\n   * @memberof AuditLogsApiListAuditLogs\n   */\n  readonly timestampTo?: number;\n\n  /**\n   * Sort by column\n   * @type {AuditLogSortKey}\n   * @memberof AuditLogsApiListAuditLogs\n   */\n  readonly sortBy?: AuditLogSortKey;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof AuditLogsApiListAuditLogs\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof AuditLogsApiListAuditLogs\n   */\n  readonly perPage?: number;\n}\n\n/**\n * AuditLogsApi - object-oriented interface\n * @export\n * @class AuditLogsApi\n * @extends {BaseAPI}\n */\nexport class AuditLogsApi extends BaseAPI {\n  /**\n   *\n   * @summary Get detailed audit log\n   * @param {AuditLogsApiGetDetailedAuditLogRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuditLogsApi\n   */\n  public getDetailedAuditLog(\n    requestParameters: AuditLogsApiGetDetailedAuditLogRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return AuditLogsApiFp(this.configuration)\n      .getDetailedAuditLog(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.logId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary List Audit Logs\n   * @param {AuditLogsApiListAuditLogsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuditLogsApi\n   */\n  public listAuditLogs(\n    requestParameters: AuditLogsApiListAuditLogsRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return AuditLogsApiFp(this.configuration)\n      .listAuditLogs(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.pdpId,\n        requestParameters.users,\n        requestParameters.decision,\n        requestParameters.resources,\n        requestParameters.tenant,\n        requestParameters.action,\n        requestParameters.timestampFrom,\n        requestParameters.timestampTo,\n        requestParameters.sortBy,\n        requestParameters.page,\n        requestParameters.perPage,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { AuthnMeRead } from '../types';\n// @ts-ignore\nimport { DevLogin } from '../types';\n// @ts-ignore\nimport { EmbeddedLoginRequestOutput } from '../types';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n// @ts-ignore\nimport { LoginResult } from '../types';\n// @ts-ignore\nimport { UserFELoginRequestInput } from '../types';\n// @ts-ignore\nimport { UserLoginRequestInput } from '../types';\n/**\n * AuthenticationApi - axios parameter creator\n * @export\n */\nexport const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     * The dev-login endpoints allows a developer inside permit.io to log in with an email address.  THIS IS ONLY AVAILABLE IN DEV MODE.\n     * @summary (DEV MODE) Login\n     * @param {DevLogin} devLogin\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    devLogin: async (\n      devLogin: DevLogin,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'devLogin' is not null or undefined\n      assertParamExists('devLogin', 'devLogin', devLogin);\n      const localVarPath = `/v2/auth/devlogin`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        devLogin,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Elements Fe Login As\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {UserFELoginRequestInput} userFELoginRequestInput\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    elementsFeLoginAs: async (\n      envId: string,\n      userFELoginRequestInput: UserFELoginRequestInput,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('elementsFeLoginAs', 'envId', envId);\n      // verify required parameter 'userFELoginRequestInput' is not null or undefined\n      assertParamExists('elementsFeLoginAs', 'userFELoginRequestInput', userFELoginRequestInput);\n      const localVarPath = `/v2/auth/{env_id}/elements_fe_login_as`.replace(\n        `{${'env_id'}}`,\n        encodeURIComponent(String(envId)),\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        userFELoginRequestInput,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Elements Login As\n     * @param {UserLoginRequestInput} userLoginRequestInput\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    elementsLoginAs: async (\n      userLoginRequestInput: UserLoginRequestInput,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'userLoginRequestInput' is not null or undefined\n      assertParamExists('elementsLoginAs', 'userLoginRequestInput', userLoginRequestInput);\n      const localVarPath = `/v2/auth/elements_login_as`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        userLoginRequestInput,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * The login endpoint allows the frontend app to exchange a user JWT with a user session. The user session is stored on an httpOnly + secure cookie.\n     * @summary Login\n     * @param {string} [inviteCode] An optional invite code to an existing organization. If the invite code is provided and is valid, the member will gain access to that organization.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    login: async (inviteCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n      const localVarPath = `/v2/auth/login`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (inviteCode !== undefined) {\n        localVarQueryParameter['invite_code'] = inviteCode;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * The login endpoint allows the frontend app to exchange a user JWT with a user session. The user session is stored on an httpOnly + secure cookie.\n     * @summary Login Elements\n     * @param {string} token\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    loginElements: async (\n      token: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'token' is not null or undefined\n      assertParamExists('loginElements', 'token', token);\n      const localVarPath = `/v2/auth/login_elements`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (token !== undefined) {\n        localVarQueryParameter['token'] = token;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * The logout endpoint deletes the session cookie of a logged in user and invalidates cached VCs.\n     * @summary Logout Get\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    logoutGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n      const localVarPath = `/v2/auth/logout`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * The logout endpoint deletes the session cookie of a logged in user and invalidates cached VCs.\n     * @summary Logout Post\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    logoutPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n      const localVarPath = `/v2/auth/logout`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Me\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    me: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n      const localVarPath = `/v2/auth/me`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Allows the user to switch his active organization (manipulates the user\\'s login session).  This route will return a new login cookie to the user.\n     * @summary Switch Organization\n     * @param {string} orgId the organization id the user wishes to switch to as the active org on the session\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    switchOrganization: async (\n      orgId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('switchOrganization', 'orgId', orgId);\n      const localVarPath = `/v2/auth/switch_org/{org_id}`.replace(\n        `{${'org_id'}}`,\n        encodeURIComponent(String(orgId)),\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * AuthenticationApi - functional programming interface\n * @export\n */\nexport const AuthenticationApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * The dev-login endpoints allows a developer inside permit.io to log in with an email address.  THIS IS ONLY AVAILABLE IN DEV MODE.\n     * @summary (DEV MODE) Login\n     * @param {DevLogin} devLogin\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async devLogin(\n      devLogin: DevLogin,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.devLogin(devLogin, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Elements Fe Login As\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {UserFELoginRequestInput} userFELoginRequestInput\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async elementsFeLoginAs(\n      envId: string,\n      userFELoginRequestInput: UserFELoginRequestInput,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmbeddedLoginRequestOutput>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.elementsFeLoginAs(\n        envId,\n        userFELoginRequestInput,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Elements Login As\n     * @param {UserLoginRequestInput} userLoginRequestInput\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async elementsLoginAs(\n      userLoginRequestInput: UserLoginRequestInput,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmbeddedLoginRequestOutput>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.elementsLoginAs(\n        userLoginRequestInput,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * The login endpoint allows the frontend app to exchange a user JWT with a user session. The user session is stored on an httpOnly + secure cookie.\n     * @summary Login\n     * @param {string} [inviteCode] An optional invite code to an existing organization. If the invite code is provided and is valid, the member will gain access to that organization.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async login(\n      inviteCode?: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.login(inviteCode, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * The login endpoint allows the frontend app to exchange a user JWT with a user session. The user session is stored on an httpOnly + secure cookie.\n     * @summary Login Elements\n     * @param {string} token\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async loginElements(\n      token: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.loginElements(token, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * The logout endpoint deletes the session cookie of a logged in user and invalidates cached VCs.\n     * @summary Logout Get\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async logoutGet(\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.logoutGet(options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * The logout endpoint deletes the session cookie of a logged in user and invalidates cached VCs.\n     * @summary Logout Post\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async logoutPost(\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.logoutPost(options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Me\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async me(\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthnMeRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.me(options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Allows the user to switch his active organization (manipulates the user\\'s login session).  This route will return a new login cookie to the user.\n     * @summary Switch Organization\n     * @param {string} orgId the organization id the user wishes to switch to as the active org on the session\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async switchOrganization(\n      orgId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.switchOrganization(orgId, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * AuthenticationApi - factory interface\n * @export\n */\nexport const AuthenticationApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = AuthenticationApiFp(configuration);\n  return {\n    /**\n     * The dev-login endpoints allows a developer inside permit.io to log in with an email address.  THIS IS ONLY AVAILABLE IN DEV MODE.\n     * @summary (DEV MODE) Login\n     * @param {DevLogin} devLogin\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    devLogin(devLogin: DevLogin, options?: any): AxiosPromise<void> {\n      return localVarFp.devLogin(devLogin, options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Elements Fe Login As\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {UserFELoginRequestInput} userFELoginRequestInput\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    elementsFeLoginAs(\n      envId: string,\n      userFELoginRequestInput: UserFELoginRequestInput,\n      options?: any,\n    ): AxiosPromise<EmbeddedLoginRequestOutput> {\n      return localVarFp\n        .elementsFeLoginAs(envId, userFELoginRequestInput, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Elements Login As\n     * @param {UserLoginRequestInput} userLoginRequestInput\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    elementsLoginAs(\n      userLoginRequestInput: UserLoginRequestInput,\n      options?: any,\n    ): AxiosPromise<EmbeddedLoginRequestOutput> {\n      return localVarFp\n        .elementsLoginAs(userLoginRequestInput, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * The login endpoint allows the frontend app to exchange a user JWT with a user session. The user session is stored on an httpOnly + secure cookie.\n     * @summary Login\n     * @param {string} [inviteCode] An optional invite code to an existing organization. If the invite code is provided and is valid, the member will gain access to that organization.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    login(inviteCode?: string, options?: any): AxiosPromise<LoginResult> {\n      return localVarFp.login(inviteCode, options).then((request) => request(axios, basePath));\n    },\n    /**\n     * The login endpoint allows the frontend app to exchange a user JWT with a user session. The user session is stored on an httpOnly + secure cookie.\n     * @summary Login Elements\n     * @param {string} token\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    loginElements(token: string, options?: any): AxiosPromise<LoginResult> {\n      return localVarFp.loginElements(token, options).then((request) => request(axios, basePath));\n    },\n    /**\n     * The logout endpoint deletes the session cookie of a logged in user and invalidates cached VCs.\n     * @summary Logout Get\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    logoutGet(options?: any): AxiosPromise<void> {\n      return localVarFp.logoutGet(options).then((request) => request(axios, basePath));\n    },\n    /**\n     * The logout endpoint deletes the session cookie of a logged in user and invalidates cached VCs.\n     * @summary Logout Post\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    logoutPost(options?: any): AxiosPromise<void> {\n      return localVarFp.logoutPost(options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Me\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    me(options?: any): AxiosPromise<AuthnMeRead> {\n      return localVarFp.me(options).then((request) => request(axios, basePath));\n    },\n    /**\n     * Allows the user to switch his active organization (manipulates the user\\'s login session).  This route will return a new login cookie to the user.\n     * @summary Switch Organization\n     * @param {string} orgId the organization id the user wishes to switch to as the active org on the session\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    switchOrganization(orgId: string, options?: any): AxiosPromise<LoginResult> {\n      return localVarFp\n        .switchOrganization(orgId, options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for devLogin operation in AuthenticationApi.\n * @export\n * @interface AuthenticationApiDevLoginRequest\n */\nexport interface AuthenticationApiDevLoginRequest {\n  /**\n   *\n   * @type {DevLogin}\n   * @memberof AuthenticationApiDevLogin\n   */\n  readonly devLogin: DevLogin;\n}\n\n/**\n * Request parameters for elementsFeLoginAs operation in AuthenticationApi.\n * @export\n * @interface AuthenticationApiElementsFeLoginAsRequest\n */\nexport interface AuthenticationApiElementsFeLoginAsRequest {\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof AuthenticationApiElementsFeLoginAs\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {UserFELoginRequestInput}\n   * @memberof AuthenticationApiElementsFeLoginAs\n   */\n  readonly userFELoginRequestInput: UserFELoginRequestInput;\n}\n\n/**\n * Request parameters for elementsLoginAs operation in AuthenticationApi.\n * @export\n * @interface AuthenticationApiElementsLoginAsRequest\n */\nexport interface AuthenticationApiElementsLoginAsRequest {\n  /**\n   *\n   * @type {UserLoginRequestInput}\n   * @memberof AuthenticationApiElementsLoginAs\n   */\n  readonly userLoginRequestInput: UserLoginRequestInput;\n}\n\n/**\n * Request parameters for login operation in AuthenticationApi.\n * @export\n * @interface AuthenticationApiLoginRequest\n */\nexport interface AuthenticationApiLoginRequest {\n  /**\n   * An optional invite code to an existing organization. If the invite code is provided and is valid, the member will gain access to that organization.\n   * @type {string}\n   * @memberof AuthenticationApiLogin\n   */\n  readonly inviteCode?: string;\n}\n\n/**\n * Request parameters for loginElements operation in AuthenticationApi.\n * @export\n * @interface AuthenticationApiLoginElementsRequest\n */\nexport interface AuthenticationApiLoginElementsRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof AuthenticationApiLoginElements\n   */\n  readonly token: string;\n}\n\n/**\n * Request parameters for switchOrganization operation in AuthenticationApi.\n * @export\n * @interface AuthenticationApiSwitchOrganizationRequest\n */\nexport interface AuthenticationApiSwitchOrganizationRequest {\n  /**\n   * the organization id the user wishes to switch to as the active org on the session\n   * @type {string}\n   * @memberof AuthenticationApiSwitchOrganization\n   */\n  readonly orgId: string;\n}\n\n/**\n * AuthenticationApi - object-oriented interface\n * @export\n * @class AuthenticationApi\n * @extends {BaseAPI}\n */\nexport class AuthenticationApi extends BaseAPI {\n  /**\n   * The dev-login endpoints allows a developer inside permit.io to log in with an email address.  THIS IS ONLY AVAILABLE IN DEV MODE.\n   * @summary (DEV MODE) Login\n   * @param {AuthenticationApiDevLoginRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthenticationApi\n   */\n  public devLogin(\n    requestParameters: AuthenticationApiDevLoginRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return AuthenticationApiFp(this.configuration)\n      .devLogin(requestParameters.devLogin, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Elements Fe Login As\n   * @param {AuthenticationApiElementsFeLoginAsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthenticationApi\n   */\n  public elementsFeLoginAs(\n    requestParameters: AuthenticationApiElementsFeLoginAsRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return AuthenticationApiFp(this.configuration)\n      .elementsFeLoginAs(\n        requestParameters.envId,\n        requestParameters.userFELoginRequestInput,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Elements Login As\n   * @param {AuthenticationApiElementsLoginAsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthenticationApi\n   */\n  public elementsLoginAs(\n    requestParameters: AuthenticationApiElementsLoginAsRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return AuthenticationApiFp(this.configuration)\n      .elementsLoginAs(requestParameters.userLoginRequestInput, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * The login endpoint allows the frontend app to exchange a user JWT with a user session. The user session is stored on an httpOnly + secure cookie.\n   * @summary Login\n   * @param {AuthenticationApiLoginRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthenticationApi\n   */\n  public login(\n    requestParameters: AuthenticationApiLoginRequest = {},\n    options?: AxiosRequestConfig,\n  ) {\n    return AuthenticationApiFp(this.configuration)\n      .login(requestParameters.inviteCode, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * The login endpoint allows the frontend app to exchange a user JWT with a user session. The user session is stored on an httpOnly + secure cookie.\n   * @summary Login Elements\n   * @param {AuthenticationApiLoginElementsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthenticationApi\n   */\n  public loginElements(\n    requestParameters: AuthenticationApiLoginElementsRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return AuthenticationApiFp(this.configuration)\n      .loginElements(requestParameters.token, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * The logout endpoint deletes the session cookie of a logged in user and invalidates cached VCs.\n   * @summary Logout Get\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthenticationApi\n   */\n  public logoutGet(options?: AxiosRequestConfig) {\n    return AuthenticationApiFp(this.configuration)\n      .logoutGet(options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * The logout endpoint deletes the session cookie of a logged in user and invalidates cached VCs.\n   * @summary Logout Post\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthenticationApi\n   */\n  public logoutPost(options?: AxiosRequestConfig) {\n    return AuthenticationApiFp(this.configuration)\n      .logoutPost(options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Me\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthenticationApi\n   */\n  public me(options?: AxiosRequestConfig) {\n    return AuthenticationApiFp(this.configuration)\n      .me(options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Allows the user to switch his active organization (manipulates the user\\'s login session).  This route will return a new login cookie to the user.\n   * @summary Switch Organization\n   * @param {AuthenticationApiSwitchOrganizationRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthenticationApi\n   */\n  public switchOrganization(\n    requestParameters: AuthenticationApiSwitchOrganizationRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return AuthenticationApiFp(this.configuration)\n      .switchOrganization(requestParameters.orgId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { ConditionSetRuleCreate } from '../types';\n// @ts-ignore\nimport { ConditionSetRuleRead } from '../types';\n// @ts-ignore\nimport { ConditionSetRuleRemove } from '../types';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n/**\n * ConditionSetRulesApi - axios parameter creator\n * @export\n */\nexport const ConditionSetRulesApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     * Grant permissions to a user set *on* a resource set.  If the permission is already granted, it is skipped.\n     * @summary Assign Set Permissions\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ConditionSetRuleCreate} conditionSetRuleCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    assignSetPermissions: async (\n      projId: string,\n      envId: string,\n      conditionSetRuleCreate: ConditionSetRuleCreate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('assignSetPermissions', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('assignSetPermissions', 'envId', envId);\n      // verify required parameter 'conditionSetRuleCreate' is not null or undefined\n      assertParamExists('assignSetPermissions', 'conditionSetRuleCreate', conditionSetRuleCreate);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/set_rules`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        conditionSetRuleCreate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Lists the condition set rules matching the filter. - If the `user_set` filter is present, will only return the permissions set of that user set. - If the `permission` filter is present, will only return the permissions sets that equals to the queried permission. - If the `resource_set` filter is present, will only return the permissions set of that resource set.\n     * @summary List Set Permissions\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [userSet] optional user set filter, will only return rules where the permission is granted to this user set\n     * @param {string} [permission] optional permission filter, will only return condition set rules granting this permission\n     * @param {string} [resourceSet] optional resource set filter, will only return rules where the permission is granted on this resource set\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listSetPermissions: async (\n      projId: string,\n      envId: string,\n      userSet?: string,\n      permission?: string,\n      resourceSet?: string,\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('listSetPermissions', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('listSetPermissions', 'envId', envId);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/set_rules`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (userSet !== undefined) {\n        localVarQueryParameter['user_set'] = userSet;\n      }\n\n      if (permission !== undefined) {\n        localVarQueryParameter['permission'] = permission;\n      }\n\n      if (resourceSet !== undefined) {\n        localVarQueryParameter['resource_set'] = resourceSet;\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Revokes permissions to a user set *on* a resource set.  If the permission is not granted, it is skipped.\n     * @summary Unassign Set Permissions\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ConditionSetRuleRemove} conditionSetRuleRemove\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    unassignSetPermissions: async (\n      projId: string,\n      envId: string,\n      conditionSetRuleRemove: ConditionSetRuleRemove,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('unassignSetPermissions', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('unassignSetPermissions', 'envId', envId);\n      // verify required parameter 'conditionSetRuleRemove' is not null or undefined\n      assertParamExists('unassignSetPermissions', 'conditionSetRuleRemove', conditionSetRuleRemove);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/set_rules`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        conditionSetRuleRemove,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * ConditionSetRulesApi - functional programming interface\n * @export\n */\nexport const ConditionSetRulesApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = ConditionSetRulesApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * Grant permissions to a user set *on* a resource set.  If the permission is already granted, it is skipped.\n     * @summary Assign Set Permissions\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ConditionSetRuleCreate} conditionSetRuleCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async assignSetPermissions(\n      projId: string,\n      envId: string,\n      conditionSetRuleCreate: ConditionSetRuleCreate,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConditionSetRuleRead>>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.assignSetPermissions(\n        projId,\n        envId,\n        conditionSetRuleCreate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Lists the condition set rules matching the filter. - If the `user_set` filter is present, will only return the permissions set of that user set. - If the `permission` filter is present, will only return the permissions sets that equals to the queried permission. - If the `resource_set` filter is present, will only return the permissions set of that resource set.\n     * @summary List Set Permissions\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [userSet] optional user set filter, will only return rules where the permission is granted to this user set\n     * @param {string} [permission] optional permission filter, will only return condition set rules granting this permission\n     * @param {string} [resourceSet] optional resource set filter, will only return rules where the permission is granted on this resource set\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async listSetPermissions(\n      projId: string,\n      envId: string,\n      userSet?: string,\n      permission?: string,\n      resourceSet?: string,\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConditionSetRuleRead>>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.listSetPermissions(\n        projId,\n        envId,\n        userSet,\n        permission,\n        resourceSet,\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Revokes permissions to a user set *on* a resource set.  If the permission is not granted, it is skipped.\n     * @summary Unassign Set Permissions\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ConditionSetRuleRemove} conditionSetRuleRemove\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async unassignSetPermissions(\n      projId: string,\n      envId: string,\n      conditionSetRuleRemove: ConditionSetRuleRemove,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.unassignSetPermissions(\n        projId,\n        envId,\n        conditionSetRuleRemove,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * ConditionSetRulesApi - factory interface\n * @export\n */\nexport const ConditionSetRulesApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = ConditionSetRulesApiFp(configuration);\n  return {\n    /**\n     * Grant permissions to a user set *on* a resource set.  If the permission is already granted, it is skipped.\n     * @summary Assign Set Permissions\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ConditionSetRuleCreate} conditionSetRuleCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    assignSetPermissions(\n      projId: string,\n      envId: string,\n      conditionSetRuleCreate: ConditionSetRuleCreate,\n      options?: any,\n    ): AxiosPromise<Array<ConditionSetRuleRead>> {\n      return localVarFp\n        .assignSetPermissions(projId, envId, conditionSetRuleCreate, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Lists the condition set rules matching the filter. - If the `user_set` filter is present, will only return the permissions set of that user set. - If the `permission` filter is present, will only return the permissions sets that equals to the queried permission. - If the `resource_set` filter is present, will only return the permissions set of that resource set.\n     * @summary List Set Permissions\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [userSet] optional user set filter, will only return rules where the permission is granted to this user set\n     * @param {string} [permission] optional permission filter, will only return condition set rules granting this permission\n     * @param {string} [resourceSet] optional resource set filter, will only return rules where the permission is granted on this resource set\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listSetPermissions(\n      projId: string,\n      envId: string,\n      userSet?: string,\n      permission?: string,\n      resourceSet?: string,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<Array<ConditionSetRuleRead>> {\n      return localVarFp\n        .listSetPermissions(projId, envId, userSet, permission, resourceSet, page, perPage, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Revokes permissions to a user set *on* a resource set.  If the permission is not granted, it is skipped.\n     * @summary Unassign Set Permissions\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ConditionSetRuleRemove} conditionSetRuleRemove\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    unassignSetPermissions(\n      projId: string,\n      envId: string,\n      conditionSetRuleRemove: ConditionSetRuleRemove,\n      options?: any,\n    ): AxiosPromise<void> {\n      return localVarFp\n        .unassignSetPermissions(projId, envId, conditionSetRuleRemove, options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for assignSetPermissions operation in ConditionSetRulesApi.\n * @export\n * @interface ConditionSetRulesApiAssignSetPermissionsRequest\n */\nexport interface ConditionSetRulesApiAssignSetPermissionsRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetRulesApiAssignSetPermissions\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetRulesApiAssignSetPermissions\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {ConditionSetRuleCreate}\n   * @memberof ConditionSetRulesApiAssignSetPermissions\n   */\n  readonly conditionSetRuleCreate: ConditionSetRuleCreate;\n}\n\n/**\n * Request parameters for listSetPermissions operation in ConditionSetRulesApi.\n * @export\n * @interface ConditionSetRulesApiListSetPermissionsRequest\n */\nexport interface ConditionSetRulesApiListSetPermissionsRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetRulesApiListSetPermissions\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetRulesApiListSetPermissions\n   */\n  readonly envId: string;\n\n  /**\n   * optional user set filter, will only return rules where the permission is granted to this user set\n   * @type {string}\n   * @memberof ConditionSetRulesApiListSetPermissions\n   */\n  readonly userSet?: string;\n\n  /**\n   * optional permission filter, will only return condition set rules granting this permission\n   * @type {string}\n   * @memberof ConditionSetRulesApiListSetPermissions\n   */\n  readonly permission?: string;\n\n  /**\n   * optional resource set filter, will only return rules where the permission is granted on this resource set\n   * @type {string}\n   * @memberof ConditionSetRulesApiListSetPermissions\n   */\n  readonly resourceSet?: string;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof ConditionSetRulesApiListSetPermissions\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof ConditionSetRulesApiListSetPermissions\n   */\n  readonly perPage?: number;\n}\n\n/**\n * Request parameters for unassignSetPermissions operation in ConditionSetRulesApi.\n * @export\n * @interface ConditionSetRulesApiUnassignSetPermissionsRequest\n */\nexport interface ConditionSetRulesApiUnassignSetPermissionsRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetRulesApiUnassignSetPermissions\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetRulesApiUnassignSetPermissions\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {ConditionSetRuleRemove}\n   * @memberof ConditionSetRulesApiUnassignSetPermissions\n   */\n  readonly conditionSetRuleRemove: ConditionSetRuleRemove;\n}\n\n/**\n * ConditionSetRulesApi - object-oriented interface\n * @export\n * @class ConditionSetRulesApi\n * @extends {BaseAPI}\n */\nexport class ConditionSetRulesApi extends BaseAPI {\n  /**\n   * Grant permissions to a user set *on* a resource set.  If the permission is already granted, it is skipped.\n   * @summary Assign Set Permissions\n   * @param {ConditionSetRulesApiAssignSetPermissionsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ConditionSetRulesApi\n   */\n  public assignSetPermissions(\n    requestParameters: ConditionSetRulesApiAssignSetPermissionsRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ConditionSetRulesApiFp(this.configuration)\n      .assignSetPermissions(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.conditionSetRuleCreate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Lists the condition set rules matching the filter. - If the `user_set` filter is present, will only return the permissions set of that user set. - If the `permission` filter is present, will only return the permissions sets that equals to the queried permission. - If the `resource_set` filter is present, will only return the permissions set of that resource set.\n   * @summary List Set Permissions\n   * @param {ConditionSetRulesApiListSetPermissionsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ConditionSetRulesApi\n   */\n  public listSetPermissions(\n    requestParameters: ConditionSetRulesApiListSetPermissionsRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ConditionSetRulesApiFp(this.configuration)\n      .listSetPermissions(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.userSet,\n        requestParameters.permission,\n        requestParameters.resourceSet,\n        requestParameters.page,\n        requestParameters.perPage,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Revokes permissions to a user set *on* a resource set.  If the permission is not granted, it is skipped.\n   * @summary Unassign Set Permissions\n   * @param {ConditionSetRulesApiUnassignSetPermissionsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ConditionSetRulesApi\n   */\n  public unassignSetPermissions(\n    requestParameters: ConditionSetRulesApiUnassignSetPermissionsRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ConditionSetRulesApiFp(this.configuration)\n      .unassignSetPermissions(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.conditionSetRuleRemove,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { ConditionSetCreate } from '../types';\n// @ts-ignore\nimport { ConditionSetRead } from '../types';\n// @ts-ignore\nimport { ConditionSetType } from '../types';\n// @ts-ignore\nimport { ConditionSetUpdate } from '../types';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n/**\n * ConditionSetsApi - axios parameter creator\n * @export\n */\nexport const ConditionSetsApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     * Creates a new condition set (can be either a user set or a resource set).\n     * @summary Create Condition Set\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ConditionSetCreate} conditionSetCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createConditionSet: async (\n      projId: string,\n      envId: string,\n      conditionSetCreate: ConditionSetCreate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('createConditionSet', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('createConditionSet', 'envId', envId);\n      // verify required parameter 'conditionSetCreate' is not null or undefined\n      assertParamExists('createConditionSet', 'conditionSetCreate', conditionSetCreate);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/condition_sets`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        conditionSetCreate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Deletes a condition set and all its related data. This includes any permissions granted to said condition set (i.e: any matching condition set rules).\n     * @summary Delete Condition Set\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteConditionSet: async (\n      projId: string,\n      envId: string,\n      conditionSetId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('deleteConditionSet', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('deleteConditionSet', 'envId', envId);\n      // verify required parameter 'conditionSetId' is not null or undefined\n      assertParamExists('deleteConditionSet', 'conditionSetId', conditionSetId);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'condition_set_id'}}`, encodeURIComponent(String(conditionSetId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Gets a single condition set, if such condition set exists.\n     * @summary Get Condition Set\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getConditionSet: async (\n      projId: string,\n      envId: string,\n      conditionSetId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getConditionSet', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getConditionSet', 'envId', envId);\n      // verify required parameter 'conditionSetId' is not null or undefined\n      assertParamExists('getConditionSet', 'conditionSetId', conditionSetId);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'condition_set_id'}}`, encodeURIComponent(String(conditionSetId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Gets all ancestors (parent, parent of parent, and so on)\n     * @summary Get Condition Set Ancestors\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getConditionSetAncestors: async (\n      projId: string,\n      envId: string,\n      conditionSetId: string,\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getConditionSetAncestors', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getConditionSetAncestors', 'envId', envId);\n      // verify required parameter 'conditionSetId' is not null or undefined\n      assertParamExists('getConditionSetAncestors', 'conditionSetId', conditionSetId);\n      const localVarPath =\n        `/v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}/ancestors`\n          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n          .replace(`{${'condition_set_id'}}`, encodeURIComponent(String(conditionSetId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Gets all descendants (children, children of children, and so on)\n     * @summary Get Condition Set Descendants\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getConditionSetDescendants: async (\n      projId: string,\n      envId: string,\n      conditionSetId: string,\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getConditionSetDescendants', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getConditionSetDescendants', 'envId', envId);\n      // verify required parameter 'conditionSetId' is not null or undefined\n      assertParamExists('getConditionSetDescendants', 'conditionSetId', conditionSetId);\n      const localVarPath =\n        `/v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}/descendants`\n          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n          .replace(`{${'condition_set_id'}}`, encodeURIComponent(String(conditionSetId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get Condition Set Possible Parents\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getConditionSetPossibleParents: async (\n      projId: string,\n      envId: string,\n      conditionSetId: string,\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getConditionSetPossibleParents', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getConditionSetPossibleParents', 'envId', envId);\n      // verify required parameter 'conditionSetId' is not null or undefined\n      assertParamExists('getConditionSetPossibleParents', 'conditionSetId', conditionSetId);\n      const localVarPath =\n        `/v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}/possible_parents`\n          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n          .replace(`{${'condition_set_id'}}`, encodeURIComponent(String(conditionSetId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Lists all condition sets matching a filter.\n     * @summary List Condition Sets\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ConditionSetType} [type] if provided, will return only the condition sets of the specified type. e.g: only user sets.\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listConditionSets: async (\n      projId: string,\n      envId: string,\n      type?: ConditionSetType,\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('listConditionSets', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('listConditionSets', 'envId', envId);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/condition_sets`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (type !== undefined) {\n        localVarQueryParameter['type'] = type;\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Partially updates a condition set. Fields that will be provided will be completely overwritten.\n     * @summary Update Condition Set\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n     * @param {ConditionSetUpdate} conditionSetUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateConditionSet: async (\n      projId: string,\n      envId: string,\n      conditionSetId: string,\n      conditionSetUpdate: ConditionSetUpdate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('updateConditionSet', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('updateConditionSet', 'envId', envId);\n      // verify required parameter 'conditionSetId' is not null or undefined\n      assertParamExists('updateConditionSet', 'conditionSetId', conditionSetId);\n      // verify required parameter 'conditionSetUpdate' is not null or undefined\n      assertParamExists('updateConditionSet', 'conditionSetUpdate', conditionSetUpdate);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'condition_set_id'}}`, encodeURIComponent(String(conditionSetId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        conditionSetUpdate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * ConditionSetsApi - functional programming interface\n * @export\n */\nexport const ConditionSetsApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = ConditionSetsApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * Creates a new condition set (can be either a user set or a resource set).\n     * @summary Create Condition Set\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ConditionSetCreate} conditionSetCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async createConditionSet(\n      projId: string,\n      envId: string,\n      conditionSetCreate: ConditionSetCreate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConditionSetRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.createConditionSet(\n        projId,\n        envId,\n        conditionSetCreate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Deletes a condition set and all its related data. This includes any permissions granted to said condition set (i.e: any matching condition set rules).\n     * @summary Delete Condition Set\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async deleteConditionSet(\n      projId: string,\n      envId: string,\n      conditionSetId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteConditionSet(\n        projId,\n        envId,\n        conditionSetId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Gets a single condition set, if such condition set exists.\n     * @summary Get Condition Set\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getConditionSet(\n      projId: string,\n      envId: string,\n      conditionSetId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConditionSetRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getConditionSet(\n        projId,\n        envId,\n        conditionSetId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Gets all ancestors (parent, parent of parent, and so on)\n     * @summary Get Condition Set Ancestors\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getConditionSetAncestors(\n      projId: string,\n      envId: string,\n      conditionSetId: string,\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConditionSetRead>>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getConditionSetAncestors(\n        projId,\n        envId,\n        conditionSetId,\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Gets all descendants (children, children of children, and so on)\n     * @summary Get Condition Set Descendants\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getConditionSetDescendants(\n      projId: string,\n      envId: string,\n      conditionSetId: string,\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConditionSetRead>>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getConditionSetDescendants(\n        projId,\n        envId,\n        conditionSetId,\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get Condition Set Possible Parents\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getConditionSetPossibleParents(\n      projId: string,\n      envId: string,\n      conditionSetId: string,\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConditionSetRead>>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getConditionSetPossibleParents(\n        projId,\n        envId,\n        conditionSetId,\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Lists all condition sets matching a filter.\n     * @summary List Condition Sets\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ConditionSetType} [type] if provided, will return only the condition sets of the specified type. e.g: only user sets.\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async listConditionSets(\n      projId: string,\n      envId: string,\n      type?: ConditionSetType,\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConditionSetRead>>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.listConditionSets(\n        projId,\n        envId,\n        type,\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Partially updates a condition set. Fields that will be provided will be completely overwritten.\n     * @summary Update Condition Set\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n     * @param {ConditionSetUpdate} conditionSetUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async updateConditionSet(\n      projId: string,\n      envId: string,\n      conditionSetId: string,\n      conditionSetUpdate: ConditionSetUpdate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConditionSetRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.updateConditionSet(\n        projId,\n        envId,\n        conditionSetId,\n        conditionSetUpdate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * ConditionSetsApi - factory interface\n * @export\n */\nexport const ConditionSetsApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = ConditionSetsApiFp(configuration);\n  return {\n    /**\n     * Creates a new condition set (can be either a user set or a resource set).\n     * @summary Create Condition Set\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ConditionSetCreate} conditionSetCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createConditionSet(\n      projId: string,\n      envId: string,\n      conditionSetCreate: ConditionSetCreate,\n      options?: any,\n    ): AxiosPromise<ConditionSetRead> {\n      return localVarFp\n        .createConditionSet(projId, envId, conditionSetCreate, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Deletes a condition set and all its related data. This includes any permissions granted to said condition set (i.e: any matching condition set rules).\n     * @summary Delete Condition Set\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteConditionSet(\n      projId: string,\n      envId: string,\n      conditionSetId: string,\n      options?: any,\n    ): AxiosPromise<void> {\n      return localVarFp\n        .deleteConditionSet(projId, envId, conditionSetId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Gets a single condition set, if such condition set exists.\n     * @summary Get Condition Set\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getConditionSet(\n      projId: string,\n      envId: string,\n      conditionSetId: string,\n      options?: any,\n    ): AxiosPromise<ConditionSetRead> {\n      return localVarFp\n        .getConditionSet(projId, envId, conditionSetId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Gets all ancestors (parent, parent of parent, and so on)\n     * @summary Get Condition Set Ancestors\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getConditionSetAncestors(\n      projId: string,\n      envId: string,\n      conditionSetId: string,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<Array<ConditionSetRead>> {\n      return localVarFp\n        .getConditionSetAncestors(projId, envId, conditionSetId, page, perPage, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Gets all descendants (children, children of children, and so on)\n     * @summary Get Condition Set Descendants\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getConditionSetDescendants(\n      projId: string,\n      envId: string,\n      conditionSetId: string,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<Array<ConditionSetRead>> {\n      return localVarFp\n        .getConditionSetDescendants(projId, envId, conditionSetId, page, perPage, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get Condition Set Possible Parents\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getConditionSetPossibleParents(\n      projId: string,\n      envId: string,\n      conditionSetId: string,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<Array<ConditionSetRead>> {\n      return localVarFp\n        .getConditionSetPossibleParents(projId, envId, conditionSetId, page, perPage, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Lists all condition sets matching a filter.\n     * @summary List Condition Sets\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ConditionSetType} [type] if provided, will return only the condition sets of the specified type. e.g: only user sets.\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listConditionSets(\n      projId: string,\n      envId: string,\n      type?: ConditionSetType,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<Array<ConditionSetRead>> {\n      return localVarFp\n        .listConditionSets(projId, envId, type, page, perPage, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Partially updates a condition set. Fields that will be provided will be completely overwritten.\n     * @summary Update Condition Set\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n     * @param {ConditionSetUpdate} conditionSetUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateConditionSet(\n      projId: string,\n      envId: string,\n      conditionSetId: string,\n      conditionSetUpdate: ConditionSetUpdate,\n      options?: any,\n    ): AxiosPromise<ConditionSetRead> {\n      return localVarFp\n        .updateConditionSet(projId, envId, conditionSetId, conditionSetUpdate, options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for createConditionSet operation in ConditionSetsApi.\n * @export\n * @interface ConditionSetsApiCreateConditionSetRequest\n */\nexport interface ConditionSetsApiCreateConditionSetRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiCreateConditionSet\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiCreateConditionSet\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {ConditionSetCreate}\n   * @memberof ConditionSetsApiCreateConditionSet\n   */\n  readonly conditionSetCreate: ConditionSetCreate;\n}\n\n/**\n * Request parameters for deleteConditionSet operation in ConditionSetsApi.\n * @export\n * @interface ConditionSetsApiDeleteConditionSetRequest\n */\nexport interface ConditionSetsApiDeleteConditionSetRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiDeleteConditionSet\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiDeleteConditionSet\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiDeleteConditionSet\n   */\n  readonly conditionSetId: string;\n}\n\n/**\n * Request parameters for getConditionSet operation in ConditionSetsApi.\n * @export\n * @interface ConditionSetsApiGetConditionSetRequest\n */\nexport interface ConditionSetsApiGetConditionSetRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiGetConditionSet\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiGetConditionSet\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiGetConditionSet\n   */\n  readonly conditionSetId: string;\n}\n\n/**\n * Request parameters for getConditionSetAncestors operation in ConditionSetsApi.\n * @export\n * @interface ConditionSetsApiGetConditionSetAncestorsRequest\n */\nexport interface ConditionSetsApiGetConditionSetAncestorsRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiGetConditionSetAncestors\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiGetConditionSetAncestors\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiGetConditionSetAncestors\n   */\n  readonly conditionSetId: string;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof ConditionSetsApiGetConditionSetAncestors\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof ConditionSetsApiGetConditionSetAncestors\n   */\n  readonly perPage?: number;\n}\n\n/**\n * Request parameters for getConditionSetDescendants operation in ConditionSetsApi.\n * @export\n * @interface ConditionSetsApiGetConditionSetDescendantsRequest\n */\nexport interface ConditionSetsApiGetConditionSetDescendantsRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiGetConditionSetDescendants\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiGetConditionSetDescendants\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiGetConditionSetDescendants\n   */\n  readonly conditionSetId: string;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof ConditionSetsApiGetConditionSetDescendants\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof ConditionSetsApiGetConditionSetDescendants\n   */\n  readonly perPage?: number;\n}\n\n/**\n * Request parameters for getConditionSetPossibleParents operation in ConditionSetsApi.\n * @export\n * @interface ConditionSetsApiGetConditionSetPossibleParentsRequest\n */\nexport interface ConditionSetsApiGetConditionSetPossibleParentsRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiGetConditionSetPossibleParents\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiGetConditionSetPossibleParents\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiGetConditionSetPossibleParents\n   */\n  readonly conditionSetId: string;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof ConditionSetsApiGetConditionSetPossibleParents\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof ConditionSetsApiGetConditionSetPossibleParents\n   */\n  readonly perPage?: number;\n}\n\n/**\n * Request parameters for listConditionSets operation in ConditionSetsApi.\n * @export\n * @interface ConditionSetsApiListConditionSetsRequest\n */\nexport interface ConditionSetsApiListConditionSetsRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiListConditionSets\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiListConditionSets\n   */\n  readonly envId: string;\n\n  /**\n   * if provided, will return only the condition sets of the specified type. e.g: only user sets.\n   * @type {ConditionSetType}\n   * @memberof ConditionSetsApiListConditionSets\n   */\n  readonly type?: ConditionSetType;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof ConditionSetsApiListConditionSets\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof ConditionSetsApiListConditionSets\n   */\n  readonly perPage?: number;\n}\n\n/**\n * Request parameters for updateConditionSet operation in ConditionSetsApi.\n * @export\n * @interface ConditionSetsApiUpdateConditionSetRequest\n */\nexport interface ConditionSetsApiUpdateConditionSetRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiUpdateConditionSet\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiUpdateConditionSet\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiUpdateConditionSet\n   */\n  readonly conditionSetId: string;\n\n  /**\n   *\n   * @type {ConditionSetUpdate}\n   * @memberof ConditionSetsApiUpdateConditionSet\n   */\n  readonly conditionSetUpdate: ConditionSetUpdate;\n}\n\n/**\n * ConditionSetsApi - object-oriented interface\n * @export\n * @class ConditionSetsApi\n * @extends {BaseAPI}\n */\nexport class ConditionSetsApi extends BaseAPI {\n  /**\n   * Creates a new condition set (can be either a user set or a resource set).\n   * @summary Create Condition Set\n   * @param {ConditionSetsApiCreateConditionSetRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ConditionSetsApi\n   */\n  public createConditionSet(\n    requestParameters: ConditionSetsApiCreateConditionSetRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ConditionSetsApiFp(this.configuration)\n      .createConditionSet(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.conditionSetCreate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Deletes a condition set and all its related data. This includes any permissions granted to said condition set (i.e: any matching condition set rules).\n   * @summary Delete Condition Set\n   * @param {ConditionSetsApiDeleteConditionSetRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ConditionSetsApi\n   */\n  public deleteConditionSet(\n    requestParameters: ConditionSetsApiDeleteConditionSetRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ConditionSetsApiFp(this.configuration)\n      .deleteConditionSet(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.conditionSetId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Gets a single condition set, if such condition set exists.\n   * @summary Get Condition Set\n   * @param {ConditionSetsApiGetConditionSetRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ConditionSetsApi\n   */\n  public getConditionSet(\n    requestParameters: ConditionSetsApiGetConditionSetRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ConditionSetsApiFp(this.configuration)\n      .getConditionSet(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.conditionSetId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Gets all ancestors (parent, parent of parent, and so on)\n   * @summary Get Condition Set Ancestors\n   * @param {ConditionSetsApiGetConditionSetAncestorsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ConditionSetsApi\n   */\n  public getConditionSetAncestors(\n    requestParameters: ConditionSetsApiGetConditionSetAncestorsRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ConditionSetsApiFp(this.configuration)\n      .getConditionSetAncestors(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.conditionSetId,\n        requestParameters.page,\n        requestParameters.perPage,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Gets all descendants (children, children of children, and so on)\n   * @summary Get Condition Set Descendants\n   * @param {ConditionSetsApiGetConditionSetDescendantsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ConditionSetsApi\n   */\n  public getConditionSetDescendants(\n    requestParameters: ConditionSetsApiGetConditionSetDescendantsRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ConditionSetsApiFp(this.configuration)\n      .getConditionSetDescendants(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.conditionSetId,\n        requestParameters.page,\n        requestParameters.perPage,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get Condition Set Possible Parents\n   * @param {ConditionSetsApiGetConditionSetPossibleParentsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ConditionSetsApi\n   */\n  public getConditionSetPossibleParents(\n    requestParameters: ConditionSetsApiGetConditionSetPossibleParentsRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ConditionSetsApiFp(this.configuration)\n      .getConditionSetPossibleParents(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.conditionSetId,\n        requestParameters.page,\n        requestParameters.perPage,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Lists all condition sets matching a filter.\n   * @summary List Condition Sets\n   * @param {ConditionSetsApiListConditionSetsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ConditionSetsApi\n   */\n  public listConditionSets(\n    requestParameters: ConditionSetsApiListConditionSetsRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ConditionSetsApiFp(this.configuration)\n      .listConditionSets(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.type,\n        requestParameters.page,\n        requestParameters.perPage,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Partially updates a condition set. Fields that will be provided will be completely overwritten.\n   * @summary Update Condition Set\n   * @param {ConditionSetsApiUpdateConditionSetRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ConditionSetsApi\n   */\n  public updateConditionSet(\n    requestParameters: ConditionSetsApiUpdateConditionSetRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ConditionSetsApiFp(this.configuration)\n      .updateConditionSet(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.conditionSetId,\n        requestParameters.conditionSetUpdate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n// @ts-ignore\nimport { PaginatedResultOPADecisionLog } from '../types';\n/**\n * DecisionLogsApi - axios parameter creator\n * @export\n */\nexport const DecisionLogsApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     *\n     * @summary List PDP Decisions\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} pdpId The unique id of the pdp\n     * @param {Array<string>} [users] List of user IDs to filter by\n     * @param {boolean} [approved] Filter by approved decisions\n     * @param {Array<string>} [resources] Filter by resources\n     * @param {number} [timestampFrom] Filter by timestamp from\n     * @param {number} [timestampTo] Filter by timestamp to\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listPdpDecisionLogs: async (\n      projId: string,\n      envId: string,\n      pdpId: string,\n      users?: Array<string>,\n      approved?: boolean,\n      resources?: Array<string>,\n      timestampFrom?: number,\n      timestampTo?: number,\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('listPdpDecisionLogs', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('listPdpDecisionLogs', 'envId', envId);\n      // verify required parameter 'pdpId' is not null or undefined\n      assertParamExists('listPdpDecisionLogs', 'pdpId', pdpId);\n      const localVarPath = `/v2/pdps/{proj_id}/{env_id}/decision-logs/{pdp_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'pdp_id'}}`, encodeURIComponent(String(pdpId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (users) {\n        localVarQueryParameter['users'] = users;\n      }\n\n      if (approved !== undefined) {\n        localVarQueryParameter['approved'] = approved;\n      }\n\n      if (resources) {\n        localVarQueryParameter['resources'] = resources;\n      }\n\n      if (timestampFrom !== undefined) {\n        localVarQueryParameter['timestamp_from'] = timestampFrom;\n      }\n\n      if (timestampTo !== undefined) {\n        localVarQueryParameter['timestamp_to'] = timestampTo;\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * DecisionLogsApi - functional programming interface\n * @export\n */\nexport const DecisionLogsApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = DecisionLogsApiAxiosParamCreator(configuration);\n  return {\n    /**\n     *\n     * @summary List PDP Decisions\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} pdpId The unique id of the pdp\n     * @param {Array<string>} [users] List of user IDs to filter by\n     * @param {boolean} [approved] Filter by approved decisions\n     * @param {Array<string>} [resources] Filter by resources\n     * @param {number} [timestampFrom] Filter by timestamp from\n     * @param {number} [timestampTo] Filter by timestamp to\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async listPdpDecisionLogs(\n      projId: string,\n      envId: string,\n      pdpId: string,\n      users?: Array<string>,\n      approved?: boolean,\n      resources?: Array<string>,\n      timestampFrom?: number,\n      timestampTo?: number,\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResultOPADecisionLog>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.listPdpDecisionLogs(\n        projId,\n        envId,\n        pdpId,\n        users,\n        approved,\n        resources,\n        timestampFrom,\n        timestampTo,\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * DecisionLogsApi - factory interface\n * @export\n */\nexport const DecisionLogsApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = DecisionLogsApiFp(configuration);\n  return {\n    /**\n     *\n     * @summary List PDP Decisions\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} pdpId The unique id of the pdp\n     * @param {Array<string>} [users] List of user IDs to filter by\n     * @param {boolean} [approved] Filter by approved decisions\n     * @param {Array<string>} [resources] Filter by resources\n     * @param {number} [timestampFrom] Filter by timestamp from\n     * @param {number} [timestampTo] Filter by timestamp to\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listPdpDecisionLogs(\n      projId: string,\n      envId: string,\n      pdpId: string,\n      users?: Array<string>,\n      approved?: boolean,\n      resources?: Array<string>,\n      timestampFrom?: number,\n      timestampTo?: number,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<PaginatedResultOPADecisionLog> {\n      return localVarFp\n        .listPdpDecisionLogs(\n          projId,\n          envId,\n          pdpId,\n          users,\n          approved,\n          resources,\n          timestampFrom,\n          timestampTo,\n          page,\n          perPage,\n          options,\n        )\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for listPdpDecisionLogs operation in DecisionLogsApi.\n * @export\n * @interface DecisionLogsApiListPdpDecisionLogsRequest\n */\nexport interface DecisionLogsApiListPdpDecisionLogsRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof DecisionLogsApiListPdpDecisionLogs\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof DecisionLogsApiListPdpDecisionLogs\n   */\n  readonly envId: string;\n\n  /**\n   * The unique id of the pdp\n   * @type {string}\n   * @memberof DecisionLogsApiListPdpDecisionLogs\n   */\n  readonly pdpId: string;\n\n  /**\n   * List of user IDs to filter by\n   * @type {Array<string>}\n   * @memberof DecisionLogsApiListPdpDecisionLogs\n   */\n  readonly users?: Array<string>;\n\n  /**\n   * Filter by approved decisions\n   * @type {boolean}\n   * @memberof DecisionLogsApiListPdpDecisionLogs\n   */\n  readonly approved?: boolean;\n\n  /**\n   * Filter by resources\n   * @type {Array<string>}\n   * @memberof DecisionLogsApiListPdpDecisionLogs\n   */\n  readonly resources?: Array<string>;\n\n  /**\n   * Filter by timestamp from\n   * @type {number}\n   * @memberof DecisionLogsApiListPdpDecisionLogs\n   */\n  readonly timestampFrom?: number;\n\n  /**\n   * Filter by timestamp to\n   * @type {number}\n   * @memberof DecisionLogsApiListPdpDecisionLogs\n   */\n  readonly timestampTo?: number;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof DecisionLogsApiListPdpDecisionLogs\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof DecisionLogsApiListPdpDecisionLogs\n   */\n  readonly perPage?: number;\n}\n\n/**\n * DecisionLogsApi - object-oriented interface\n * @export\n * @class DecisionLogsApi\n * @extends {BaseAPI}\n */\nexport class DecisionLogsApi extends BaseAPI {\n  /**\n   *\n   * @summary List PDP Decisions\n   * @param {DecisionLogsApiListPdpDecisionLogsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DecisionLogsApi\n   */\n  public listPdpDecisionLogs(\n    requestParameters: DecisionLogsApiListPdpDecisionLogsRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return DecisionLogsApiFp(this.configuration)\n      .listPdpDecisionLogs(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.pdpId,\n        requestParameters.users,\n        requestParameters.approved,\n        requestParameters.resources,\n        requestParameters.timestampFrom,\n        requestParameters.timestampTo,\n        requestParameters.page,\n        requestParameters.perPage,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n/**\n * DecisionLogsIngressApi - axios parameter creator\n * @export\n */\nexport const DecisionLogsIngressApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     * This ingress endpoint captures OPA decision logs.\n     * @summary OPA Decision Logs Ingress\n     * @param {Array<object>} requestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    insertOpaDecisionLogs: async (\n      requestBody: Array<object>,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'requestBody' is not null or undefined\n      assertParamExists('insertOpaDecisionLogs', 'requestBody', requestBody);\n      const localVarPath = `/v2/decision-logs/ingress`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        requestBody,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * DecisionLogsIngressApi - functional programming interface\n * @export\n */\nexport const DecisionLogsIngressApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = DecisionLogsIngressApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * This ingress endpoint captures OPA decision logs.\n     * @summary OPA Decision Logs Ingress\n     * @param {Array<object>} requestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async insertOpaDecisionLogs(\n      requestBody: Array<object>,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.insertOpaDecisionLogs(\n        requestBody,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * DecisionLogsIngressApi - factory interface\n * @export\n */\nexport const DecisionLogsIngressApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = DecisionLogsIngressApiFp(configuration);\n  return {\n    /**\n     * This ingress endpoint captures OPA decision logs.\n     * @summary OPA Decision Logs Ingress\n     * @param {Array<object>} requestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    insertOpaDecisionLogs(requestBody: Array<object>, options?: any): AxiosPromise<void> {\n      return localVarFp\n        .insertOpaDecisionLogs(requestBody, options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for insertOpaDecisionLogs operation in DecisionLogsIngressApi.\n * @export\n * @interface DecisionLogsIngressApiInsertOpaDecisionLogsRequest\n */\nexport interface DecisionLogsIngressApiInsertOpaDecisionLogsRequest {\n  /**\n   *\n   * @type {Array<object>}\n   * @memberof DecisionLogsIngressApiInsertOpaDecisionLogs\n   */\n  readonly requestBody: Array<object>;\n}\n\n/**\n * DecisionLogsIngressApi - object-oriented interface\n * @export\n * @class DecisionLogsIngressApi\n * @extends {BaseAPI}\n */\nexport class DecisionLogsIngressApi extends BaseAPI {\n  /**\n   * This ingress endpoint captures OPA decision logs.\n   * @summary OPA Decision Logs Ingress\n   * @param {DecisionLogsIngressApiInsertOpaDecisionLogsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DecisionLogsIngressApi\n   */\n  public insertOpaDecisionLogs(\n    requestParameters: DecisionLogsIngressApiInsertOpaDecisionLogsRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return DecisionLogsIngressApiFp(this.configuration)\n      .insertOpaDecisionLogs(requestParameters.requestBody, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n// @ts-ignore\nimport { OrganizationRead } from '../types';\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     *\n     * @summary Dummy\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    dummy: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n      const localVarPath = `/v2/stress/dummy`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Dummy Db\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    dummyDb: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n      const localVarPath = `/v2/stress/db/dummy`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get Organization\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getOrganizationV2StressDbOrganizationGet: async (\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/v2/stress/db/organization`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get Organization With Authn\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getOrganizationWithAuthn: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n      const localVarPath = `/v2/stress/db/organization_auth`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get Organization With Authz\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getOrganizationWithAuthz: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n      const localVarPath = `/v2/stress/db/organization_authz`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);\n  return {\n    /**\n     *\n     * @summary Dummy\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async dummy(\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.dummy(options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Dummy Db\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async dummyDb(\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.dummyDb(options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get Organization\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getOrganizationV2StressDbOrganizationGet(\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationRead>> {\n      const localVarAxiosArgs =\n        await localVarAxiosParamCreator.getOrganizationV2StressDbOrganizationGet(options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get Organization With Authn\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getOrganizationWithAuthn(\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationWithAuthn(options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get Organization With Authz\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getOrganizationWithAuthz(\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationWithAuthz(options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = DefaultApiFp(configuration);\n  return {\n    /**\n     *\n     * @summary Dummy\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    dummy(options?: any): AxiosPromise<any> {\n      return localVarFp.dummy(options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Dummy Db\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    dummyDb(options?: any): AxiosPromise<any> {\n      return localVarFp.dummyDb(options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get Organization\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getOrganizationV2StressDbOrganizationGet(options?: any): AxiosPromise<OrganizationRead> {\n      return localVarFp\n        .getOrganizationV2StressDbOrganizationGet(options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get Organization With Authn\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getOrganizationWithAuthn(options?: any): AxiosPromise<OrganizationRead> {\n      return localVarFp\n        .getOrganizationWithAuthn(options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get Organization With Authz\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getOrganizationWithAuthz(options?: any): AxiosPromise<OrganizationRead> {\n      return localVarFp\n        .getOrganizationWithAuthz(options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI {\n  /**\n   *\n   * @summary Dummy\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public dummy(options?: AxiosRequestConfig) {\n    return DefaultApiFp(this.configuration)\n      .dummy(options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Dummy Db\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public dummyDb(options?: AxiosRequestConfig) {\n    return DefaultApiFp(this.configuration)\n      .dummyDb(options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get Organization\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public getOrganizationV2StressDbOrganizationGet(options?: AxiosRequestConfig) {\n    return DefaultApiFp(this.configuration)\n      .getOrganizationV2StressDbOrganizationGet(options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get Organization With Authn\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public getOrganizationWithAuthn(options?: AxiosRequestConfig) {\n    return DefaultApiFp(this.configuration)\n      .getOrganizationWithAuthn(options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get Organization With Authz\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public getOrganizationWithAuthz(options?: AxiosRequestConfig) {\n    return DefaultApiFp(this.configuration)\n      .getOrganizationWithAuthz(options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { ElementsConfigCreate } from '../types';\n// @ts-ignore\nimport { ElementsConfigRead } from '../types';\n// @ts-ignore\nimport { ElementsConfigRuntimeRead } from '../types';\n// @ts-ignore\nimport { ElementsConfigUpdate } from '../types';\n// @ts-ignore\nimport { ElementsEnvTypeRead } from '../types';\n// @ts-ignore\nimport { ElementsEnvTypeUpdate } from '../types';\n// @ts-ignore\nimport { ElementsType } from '../types';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n// @ts-ignore\nimport { PaginatedResultElementsConfigRead } from '../types';\n/**\n * ElementsConfigsApi - axios parameter creator\n * @export\n */\nexport const ElementsConfigsApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     * Creates a new elements_config under the active organization.\n     * @summary Create Elements Config\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ElementsConfigCreate} elementsConfigCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createElementsConfig: async (\n      projId: string,\n      envId: string,\n      elementsConfigCreate: ElementsConfigCreate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('createElementsConfig', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('createElementsConfig', 'envId', envId);\n      // verify required parameter 'elementsConfigCreate' is not null or undefined\n      assertParamExists('createElementsConfig', 'elementsConfigCreate', elementsConfigCreate);\n      const localVarPath = `/v2/elements/{proj_id}/{env_id}/config`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        elementsConfigCreate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Deletes the elements_config and all its related data.\n     * @summary Delete Elements Config\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteElementsConfig: async (\n      elementsConfigId: string,\n      projId: string,\n      envId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'elementsConfigId' is not null or undefined\n      assertParamExists('deleteElementsConfig', 'elementsConfigId', elementsConfigId);\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('deleteElementsConfig', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('deleteElementsConfig', 'envId', envId);\n      const localVarPath = `/v2/elements/{proj_id}/{env_id}/{elements_config_id}`\n        .replace(`{${'elements_config_id'}}`, encodeURIComponent(String(elementsConfigId)))\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.\n     * @summary Get Elements Config\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getElementsConfig: async (\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getElementsConfig', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getElementsConfig', 'envId', envId);\n      // verify required parameter 'elementsConfigId' is not null or undefined\n      assertParamExists('getElementsConfig', 'elementsConfigId', elementsConfigId);\n      const localVarPath = `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'elements_config_id'}}`, encodeURIComponent(String(elementsConfigId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.\n     * @summary Get Elements Config Runtime\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getElementsConfigRuntime: async (\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getElementsConfigRuntime', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getElementsConfigRuntime', 'envId', envId);\n      // verify required parameter 'elementsConfigId' is not null or undefined\n      assertParamExists('getElementsConfigRuntime', 'elementsConfigId', elementsConfigId);\n      const localVarPath = `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/runtime`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'elements_config_id'}}`, encodeURIComponent(String(elementsConfigId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get Elements Type Config\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ElementsType} elementType Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getElementsTypeConfig: async (\n      projId: string,\n      envId: string,\n      elementType: ElementsType,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getElementsTypeConfig', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getElementsTypeConfig', 'envId', envId);\n      // verify required parameter 'elementType' is not null or undefined\n      assertParamExists('getElementsTypeConfig', 'elementType', elementType);\n      const localVarPath = `/v2/elements/{proj_id}/{env_id}/{element_type}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'element_type'}}`, encodeURIComponent(String(elementType)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Lists all the elements_configs under the active organization.\n     * @summary List Elements Configs\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listElementsConfigs: async (\n      projId: string,\n      envId: string,\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('listElementsConfigs', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('listElementsConfigs', 'envId', envId);\n      const localVarPath = `/v2/elements/{proj_id}/{env_id}/config`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Updates the elements_config.\n     * @summary Update Elements Config\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ElementsConfigUpdate} elementsConfigUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateElementsConfig: async (\n      elementsConfigId: string,\n      projId: string,\n      envId: string,\n      elementsConfigUpdate: ElementsConfigUpdate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'elementsConfigId' is not null or undefined\n      assertParamExists('updateElementsConfig', 'elementsConfigId', elementsConfigId);\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('updateElementsConfig', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('updateElementsConfig', 'envId', envId);\n      // verify required parameter 'elementsConfigUpdate' is not null or undefined\n      assertParamExists('updateElementsConfig', 'elementsConfigUpdate', elementsConfigUpdate);\n      const localVarPath = `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}`\n        .replace(`{${'elements_config_id'}}`, encodeURIComponent(String(elementsConfigId)))\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        elementsConfigUpdate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Update Elements Type Permissions\n     * @param {ElementsType} elementType Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ElementsEnvTypeUpdate} elementsEnvTypeUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateElementsTypePermissions: async (\n      elementType: ElementsType,\n      projId: string,\n      envId: string,\n      elementsEnvTypeUpdate: ElementsEnvTypeUpdate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'elementType' is not null or undefined\n      assertParamExists('updateElementsTypePermissions', 'elementType', elementType);\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('updateElementsTypePermissions', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('updateElementsTypePermissions', 'envId', envId);\n      // verify required parameter 'elementsEnvTypeUpdate' is not null or undefined\n      assertParamExists(\n        'updateElementsTypePermissions',\n        'elementsEnvTypeUpdate',\n        elementsEnvTypeUpdate,\n      );\n      const localVarPath = `/v2/elements/{proj_id}/{env_id}/{element_type}`\n        .replace(`{${'element_type'}}`, encodeURIComponent(String(elementType)))\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        elementsEnvTypeUpdate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * ElementsConfigsApi - functional programming interface\n * @export\n */\nexport const ElementsConfigsApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = ElementsConfigsApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * Creates a new elements_config under the active organization.\n     * @summary Create Elements Config\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ElementsConfigCreate} elementsConfigCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async createElementsConfig(\n      projId: string,\n      envId: string,\n      elementsConfigCreate: ElementsConfigCreate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElementsConfigRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.createElementsConfig(\n        projId,\n        envId,\n        elementsConfigCreate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Deletes the elements_config and all its related data.\n     * @summary Delete Elements Config\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async deleteElementsConfig(\n      elementsConfigId: string,\n      projId: string,\n      envId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteElementsConfig(\n        elementsConfigId,\n        projId,\n        envId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.\n     * @summary Get Elements Config\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getElementsConfig(\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElementsConfigRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getElementsConfig(\n        projId,\n        envId,\n        elementsConfigId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.\n     * @summary Get Elements Config Runtime\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getElementsConfigRuntime(\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElementsConfigRuntimeRead>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getElementsConfigRuntime(\n        projId,\n        envId,\n        elementsConfigId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get Elements Type Config\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ElementsType} elementType Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getElementsTypeConfig(\n      projId: string,\n      envId: string,\n      elementType: ElementsType,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElementsEnvTypeRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getElementsTypeConfig(\n        projId,\n        envId,\n        elementType,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Lists all the elements_configs under the active organization.\n     * @summary List Elements Configs\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async listElementsConfigs(\n      projId: string,\n      envId: string,\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResultElementsConfigRead>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.listElementsConfigs(\n        projId,\n        envId,\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Updates the elements_config.\n     * @summary Update Elements Config\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ElementsConfigUpdate} elementsConfigUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async updateElementsConfig(\n      elementsConfigId: string,\n      projId: string,\n      envId: string,\n      elementsConfigUpdate: ElementsConfigUpdate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElementsConfigRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.updateElementsConfig(\n        elementsConfigId,\n        projId,\n        envId,\n        elementsConfigUpdate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Update Elements Type Permissions\n     * @param {ElementsType} elementType Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ElementsEnvTypeUpdate} elementsEnvTypeUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async updateElementsTypePermissions(\n      elementType: ElementsType,\n      projId: string,\n      envId: string,\n      elementsEnvTypeUpdate: ElementsEnvTypeUpdate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElementsEnvTypeRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.updateElementsTypePermissions(\n        elementType,\n        projId,\n        envId,\n        elementsEnvTypeUpdate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * ElementsConfigsApi - factory interface\n * @export\n */\nexport const ElementsConfigsApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = ElementsConfigsApiFp(configuration);\n  return {\n    /**\n     * Creates a new elements_config under the active organization.\n     * @summary Create Elements Config\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ElementsConfigCreate} elementsConfigCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createElementsConfig(\n      projId: string,\n      envId: string,\n      elementsConfigCreate: ElementsConfigCreate,\n      options?: any,\n    ): AxiosPromise<ElementsConfigRead> {\n      return localVarFp\n        .createElementsConfig(projId, envId, elementsConfigCreate, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Deletes the elements_config and all its related data.\n     * @summary Delete Elements Config\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteElementsConfig(\n      elementsConfigId: string,\n      projId: string,\n      envId: string,\n      options?: any,\n    ): AxiosPromise<void> {\n      return localVarFp\n        .deleteElementsConfig(elementsConfigId, projId, envId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.\n     * @summary Get Elements Config\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getElementsConfig(\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      options?: any,\n    ): AxiosPromise<ElementsConfigRead> {\n      return localVarFp\n        .getElementsConfig(projId, envId, elementsConfigId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.\n     * @summary Get Elements Config Runtime\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getElementsConfigRuntime(\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      options?: any,\n    ): AxiosPromise<ElementsConfigRuntimeRead> {\n      return localVarFp\n        .getElementsConfigRuntime(projId, envId, elementsConfigId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get Elements Type Config\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ElementsType} elementType Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getElementsTypeConfig(\n      projId: string,\n      envId: string,\n      elementType: ElementsType,\n      options?: any,\n    ): AxiosPromise<ElementsEnvTypeRead> {\n      return localVarFp\n        .getElementsTypeConfig(projId, envId, elementType, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Lists all the elements_configs under the active organization.\n     * @summary List Elements Configs\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listElementsConfigs(\n      projId: string,\n      envId: string,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<PaginatedResultElementsConfigRead> {\n      return localVarFp\n        .listElementsConfigs(projId, envId, page, perPage, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Updates the elements_config.\n     * @summary Update Elements Config\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ElementsConfigUpdate} elementsConfigUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateElementsConfig(\n      elementsConfigId: string,\n      projId: string,\n      envId: string,\n      elementsConfigUpdate: ElementsConfigUpdate,\n      options?: any,\n    ): AxiosPromise<ElementsConfigRead> {\n      return localVarFp\n        .updateElementsConfig(elementsConfigId, projId, envId, elementsConfigUpdate, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Update Elements Type Permissions\n     * @param {ElementsType} elementType Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ElementsEnvTypeUpdate} elementsEnvTypeUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateElementsTypePermissions(\n      elementType: ElementsType,\n      projId: string,\n      envId: string,\n      elementsEnvTypeUpdate: ElementsEnvTypeUpdate,\n      options?: any,\n    ): AxiosPromise<ElementsEnvTypeRead> {\n      return localVarFp\n        .updateElementsTypePermissions(elementType, projId, envId, elementsEnvTypeUpdate, options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for createElementsConfig operation in ElementsConfigsApi.\n * @export\n * @interface ElementsConfigsApiCreateElementsConfigRequest\n */\nexport interface ElementsConfigsApiCreateElementsConfigRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ElementsConfigsApiCreateElementsConfig\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ElementsConfigsApiCreateElementsConfig\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {ElementsConfigCreate}\n   * @memberof ElementsConfigsApiCreateElementsConfig\n   */\n  readonly elementsConfigCreate: ElementsConfigCreate;\n}\n\n/**\n * Request parameters for deleteElementsConfig operation in ElementsConfigsApi.\n * @export\n * @interface ElementsConfigsApiDeleteElementsConfigRequest\n */\nexport interface ElementsConfigsApiDeleteElementsConfigRequest {\n  /**\n   * Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ElementsConfigsApiDeleteElementsConfig\n   */\n  readonly elementsConfigId: string;\n\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ElementsConfigsApiDeleteElementsConfig\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ElementsConfigsApiDeleteElementsConfig\n   */\n  readonly envId: string;\n}\n\n/**\n * Request parameters for getElementsConfig operation in ElementsConfigsApi.\n * @export\n * @interface ElementsConfigsApiGetElementsConfigRequest\n */\nexport interface ElementsConfigsApiGetElementsConfigRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ElementsConfigsApiGetElementsConfig\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ElementsConfigsApiGetElementsConfig\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ElementsConfigsApiGetElementsConfig\n   */\n  readonly elementsConfigId: string;\n}\n\n/**\n * Request parameters for getElementsConfigRuntime operation in ElementsConfigsApi.\n * @export\n * @interface ElementsConfigsApiGetElementsConfigRuntimeRequest\n */\nexport interface ElementsConfigsApiGetElementsConfigRuntimeRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ElementsConfigsApiGetElementsConfigRuntime\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ElementsConfigsApiGetElementsConfigRuntime\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ElementsConfigsApiGetElementsConfigRuntime\n   */\n  readonly elementsConfigId: string;\n}\n\n/**\n * Request parameters for getElementsTypeConfig operation in ElementsConfigsApi.\n * @export\n * @interface ElementsConfigsApiGetElementsTypeConfigRequest\n */\nexport interface ElementsConfigsApiGetElementsTypeConfigRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ElementsConfigsApiGetElementsTypeConfig\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ElementsConfigsApiGetElementsTypeConfig\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \\&quot;slug\\&quot;).\n   * @type {ElementsType}\n   * @memberof ElementsConfigsApiGetElementsTypeConfig\n   */\n  readonly elementType: ElementsType;\n}\n\n/**\n * Request parameters for listElementsConfigs operation in ElementsConfigsApi.\n * @export\n * @interface ElementsConfigsApiListElementsConfigsRequest\n */\nexport interface ElementsConfigsApiListElementsConfigsRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ElementsConfigsApiListElementsConfigs\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ElementsConfigsApiListElementsConfigs\n   */\n  readonly envId: string;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof ElementsConfigsApiListElementsConfigs\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof ElementsConfigsApiListElementsConfigs\n   */\n  readonly perPage?: number;\n}\n\n/**\n * Request parameters for updateElementsConfig operation in ElementsConfigsApi.\n * @export\n * @interface ElementsConfigsApiUpdateElementsConfigRequest\n */\nexport interface ElementsConfigsApiUpdateElementsConfigRequest {\n  /**\n   * Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ElementsConfigsApiUpdateElementsConfig\n   */\n  readonly elementsConfigId: string;\n\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ElementsConfigsApiUpdateElementsConfig\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ElementsConfigsApiUpdateElementsConfig\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {ElementsConfigUpdate}\n   * @memberof ElementsConfigsApiUpdateElementsConfig\n   */\n  readonly elementsConfigUpdate: ElementsConfigUpdate;\n}\n\n/**\n * Request parameters for updateElementsTypePermissions operation in ElementsConfigsApi.\n * @export\n * @interface ElementsConfigsApiUpdateElementsTypePermissionsRequest\n */\nexport interface ElementsConfigsApiUpdateElementsTypePermissionsRequest {\n  /**\n   * Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \\&quot;slug\\&quot;).\n   * @type {ElementsType}\n   * @memberof ElementsConfigsApiUpdateElementsTypePermissions\n   */\n  readonly elementType: ElementsType;\n\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ElementsConfigsApiUpdateElementsTypePermissions\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ElementsConfigsApiUpdateElementsTypePermissions\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {ElementsEnvTypeUpdate}\n   * @memberof ElementsConfigsApiUpdateElementsTypePermissions\n   */\n  readonly elementsEnvTypeUpdate: ElementsEnvTypeUpdate;\n}\n\n/**\n * ElementsConfigsApi - object-oriented interface\n * @export\n * @class ElementsConfigsApi\n * @extends {BaseAPI}\n */\nexport class ElementsConfigsApi extends BaseAPI {\n  /**\n   * Creates a new elements_config under the active organization.\n   * @summary Create Elements Config\n   * @param {ElementsConfigsApiCreateElementsConfigRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ElementsConfigsApi\n   */\n  public createElementsConfig(\n    requestParameters: ElementsConfigsApiCreateElementsConfigRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ElementsConfigsApiFp(this.configuration)\n      .createElementsConfig(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.elementsConfigCreate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Deletes the elements_config and all its related data.\n   * @summary Delete Elements Config\n   * @param {ElementsConfigsApiDeleteElementsConfigRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ElementsConfigsApi\n   */\n  public deleteElementsConfig(\n    requestParameters: ElementsConfigsApiDeleteElementsConfigRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ElementsConfigsApiFp(this.configuration)\n      .deleteElementsConfig(\n        requestParameters.elementsConfigId,\n        requestParameters.projId,\n        requestParameters.envId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.\n   * @summary Get Elements Config\n   * @param {ElementsConfigsApiGetElementsConfigRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ElementsConfigsApi\n   */\n  public getElementsConfig(\n    requestParameters: ElementsConfigsApiGetElementsConfigRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ElementsConfigsApiFp(this.configuration)\n      .getElementsConfig(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.elementsConfigId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.\n   * @summary Get Elements Config Runtime\n   * @param {ElementsConfigsApiGetElementsConfigRuntimeRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ElementsConfigsApi\n   */\n  public getElementsConfigRuntime(\n    requestParameters: ElementsConfigsApiGetElementsConfigRuntimeRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ElementsConfigsApiFp(this.configuration)\n      .getElementsConfigRuntime(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.elementsConfigId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get Elements Type Config\n   * @param {ElementsConfigsApiGetElementsTypeConfigRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ElementsConfigsApi\n   */\n  public getElementsTypeConfig(\n    requestParameters: ElementsConfigsApiGetElementsTypeConfigRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ElementsConfigsApiFp(this.configuration)\n      .getElementsTypeConfig(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.elementType,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Lists all the elements_configs under the active organization.\n   * @summary List Elements Configs\n   * @param {ElementsConfigsApiListElementsConfigsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ElementsConfigsApi\n   */\n  public listElementsConfigs(\n    requestParameters: ElementsConfigsApiListElementsConfigsRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ElementsConfigsApiFp(this.configuration)\n      .listElementsConfigs(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.page,\n        requestParameters.perPage,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Updates the elements_config.\n   * @summary Update Elements Config\n   * @param {ElementsConfigsApiUpdateElementsConfigRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ElementsConfigsApi\n   */\n  public updateElementsConfig(\n    requestParameters: ElementsConfigsApiUpdateElementsConfigRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ElementsConfigsApiFp(this.configuration)\n      .updateElementsConfig(\n        requestParameters.elementsConfigId,\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.elementsConfigUpdate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Update Elements Type Permissions\n   * @param {ElementsConfigsApiUpdateElementsTypePermissionsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ElementsConfigsApi\n   */\n  public updateElementsTypePermissions(\n    requestParameters: ElementsConfigsApiUpdateElementsTypePermissionsRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ElementsConfigsApiFp(this.configuration)\n      .updateElementsTypePermissions(\n        requestParameters.elementType,\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.elementsEnvTypeUpdate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { EnvironmentCopy } from '../types';\n// @ts-ignore\nimport { EnvironmentCreate } from '../types';\n// @ts-ignore\nimport { EnvironmentRead } from '../types';\n// @ts-ignore\nimport { EnvironmentStats } from '../types';\n// @ts-ignore\nimport { EnvironmentUpdate } from '../types';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n/**\n * EnvironmentsApi - axios parameter creator\n * @export\n */\nexport const EnvironmentsApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     * Copy environment  This endpoint either duplicates an existing environment to a new environment in the same project, or copies from an existing environment to another existing environment.  The `scope` object controls which objects will be copied to the target environment.  To clone to a new environment, the user must have write permissions to the containing project. To clone into an existing environment, the user must have write permissions to the target environment.  Copying environments across projects or organizations is not allowed.\n     * @summary Copy Environment\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {EnvironmentCopy} environmentCopy\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    copyEnvironment: async (\n      projId: string,\n      envId: string,\n      environmentCopy: EnvironmentCopy,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('copyEnvironment', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('copyEnvironment', 'envId', envId);\n      // verify required parameter 'environmentCopy' is not null or undefined\n      assertParamExists('copyEnvironment', 'environmentCopy', environmentCopy);\n      const localVarPath = `/v2/projects/{proj_id}/envs/{env_id}/copy`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        environmentCopy,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Creates a new environment under a given project.\n     * @summary Create Environment\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {EnvironmentCreate} environmentCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createEnvironment: async (\n      projId: string,\n      environmentCreate: EnvironmentCreate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('createEnvironment', 'projId', projId);\n      // verify required parameter 'environmentCreate' is not null or undefined\n      assertParamExists('createEnvironment', 'environmentCreate', environmentCreate);\n      const localVarPath = `/v2/projects/{proj_id}/envs`.replace(\n        `{${'proj_id'}}`,\n        encodeURIComponent(String(projId)),\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        environmentCreate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Deletes an environment and all its related data.\n     * @summary Delete Environment\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteEnvironment: async (\n      projId: string,\n      envId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('deleteEnvironment', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('deleteEnvironment', 'envId', envId);\n      const localVarPath = `/v2/projects/{proj_id}/envs/{env_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Gets a single environment matching the given env_id, if such environment exists.\n     * @summary Get Environment\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getEnvironment: async (\n      projId: string,\n      envId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getEnvironment', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getEnvironment', 'envId', envId);\n      const localVarPath = `/v2/projects/{proj_id}/envs/{env_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Lists all the environments under a given project.\n     * @summary List Environments\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listEnvironments: async (\n      projId: string,\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('listEnvironments', 'projId', projId);\n      const localVarPath = `/v2/projects/{proj_id}/envs`.replace(\n        `{${'proj_id'}}`,\n        encodeURIComponent(String(projId)),\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Stats Environments\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    statsEnvironments: async (\n      projId: string,\n      envId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('statsEnvironments', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('statsEnvironments', 'envId', envId);\n      const localVarPath = `/v2/projects/{proj_id}/envs/{env_id}/stats`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Updates the environment.\n     * @summary Update Environment\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {EnvironmentUpdate} environmentUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateEnvironment: async (\n      projId: string,\n      envId: string,\n      environmentUpdate: EnvironmentUpdate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('updateEnvironment', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('updateEnvironment', 'envId', envId);\n      // verify required parameter 'environmentUpdate' is not null or undefined\n      assertParamExists('updateEnvironment', 'environmentUpdate', environmentUpdate);\n      const localVarPath = `/v2/projects/{proj_id}/envs/{env_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        environmentUpdate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * EnvironmentsApi - functional programming interface\n * @export\n */\nexport const EnvironmentsApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = EnvironmentsApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * Copy environment  This endpoint either duplicates an existing environment to a new environment in the same project, or copies from an existing environment to another existing environment.  The `scope` object controls which objects will be copied to the target environment.  To clone to a new environment, the user must have write permissions to the containing project. To clone into an existing environment, the user must have write permissions to the target environment.  Copying environments across projects or organizations is not allowed.\n     * @summary Copy Environment\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {EnvironmentCopy} environmentCopy\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async copyEnvironment(\n      projId: string,\n      envId: string,\n      environmentCopy: EnvironmentCopy,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnvironmentRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.copyEnvironment(\n        projId,\n        envId,\n        environmentCopy,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Creates a new environment under a given project.\n     * @summary Create Environment\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {EnvironmentCreate} environmentCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async createEnvironment(\n      projId: string,\n      environmentCreate: EnvironmentCreate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnvironmentRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.createEnvironment(\n        projId,\n        environmentCreate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Deletes an environment and all its related data.\n     * @summary Delete Environment\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async deleteEnvironment(\n      projId: string,\n      envId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEnvironment(\n        projId,\n        envId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Gets a single environment matching the given env_id, if such environment exists.\n     * @summary Get Environment\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getEnvironment(\n      projId: string,\n      envId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnvironmentRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getEnvironment(\n        projId,\n        envId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Lists all the environments under a given project.\n     * @summary List Environments\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async listEnvironments(\n      projId: string,\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EnvironmentRead>>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.listEnvironments(\n        projId,\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Stats Environments\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async statsEnvironments(\n      projId: string,\n      envId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnvironmentStats>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.statsEnvironments(\n        projId,\n        envId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Updates the environment.\n     * @summary Update Environment\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {EnvironmentUpdate} environmentUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async updateEnvironment(\n      projId: string,\n      envId: string,\n      environmentUpdate: EnvironmentUpdate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnvironmentRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.updateEnvironment(\n        projId,\n        envId,\n        environmentUpdate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * EnvironmentsApi - factory interface\n * @export\n */\nexport const EnvironmentsApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = EnvironmentsApiFp(configuration);\n  return {\n    /**\n     * Copy environment  This endpoint either duplicates an existing environment to a new environment in the same project, or copies from an existing environment to another existing environment.  The `scope` object controls which objects will be copied to the target environment.  To clone to a new environment, the user must have write permissions to the containing project. To clone into an existing environment, the user must have write permissions to the target environment.  Copying environments across projects or organizations is not allowed.\n     * @summary Copy Environment\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {EnvironmentCopy} environmentCopy\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    copyEnvironment(\n      projId: string,\n      envId: string,\n      environmentCopy: EnvironmentCopy,\n      options?: any,\n    ): AxiosPromise<EnvironmentRead> {\n      return localVarFp\n        .copyEnvironment(projId, envId, environmentCopy, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Creates a new environment under a given project.\n     * @summary Create Environment\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {EnvironmentCreate} environmentCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createEnvironment(\n      projId: string,\n      environmentCreate: EnvironmentCreate,\n      options?: any,\n    ): AxiosPromise<EnvironmentRead> {\n      return localVarFp\n        .createEnvironment(projId, environmentCreate, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Deletes an environment and all its related data.\n     * @summary Delete Environment\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteEnvironment(projId: string, envId: string, options?: any): AxiosPromise<void> {\n      return localVarFp\n        .deleteEnvironment(projId, envId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Gets a single environment matching the given env_id, if such environment exists.\n     * @summary Get Environment\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getEnvironment(projId: string, envId: string, options?: any): AxiosPromise<EnvironmentRead> {\n      return localVarFp\n        .getEnvironment(projId, envId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Lists all the environments under a given project.\n     * @summary List Environments\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listEnvironments(\n      projId: string,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<Array<EnvironmentRead>> {\n      return localVarFp\n        .listEnvironments(projId, page, perPage, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Stats Environments\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    statsEnvironments(\n      projId: string,\n      envId: string,\n      options?: any,\n    ): AxiosPromise<EnvironmentStats> {\n      return localVarFp\n        .statsEnvironments(projId, envId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Updates the environment.\n     * @summary Update Environment\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {EnvironmentUpdate} environmentUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateEnvironment(\n      projId: string,\n      envId: string,\n      environmentUpdate: EnvironmentUpdate,\n      options?: any,\n    ): AxiosPromise<EnvironmentRead> {\n      return localVarFp\n        .updateEnvironment(projId, envId, environmentUpdate, options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for copyEnvironment operation in EnvironmentsApi.\n * @export\n * @interface EnvironmentsApiCopyEnvironmentRequest\n */\nexport interface EnvironmentsApiCopyEnvironmentRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof EnvironmentsApiCopyEnvironment\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof EnvironmentsApiCopyEnvironment\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {EnvironmentCopy}\n   * @memberof EnvironmentsApiCopyEnvironment\n   */\n  readonly environmentCopy: EnvironmentCopy;\n}\n\n/**\n * Request parameters for createEnvironment operation in EnvironmentsApi.\n * @export\n * @interface EnvironmentsApiCreateEnvironmentRequest\n */\nexport interface EnvironmentsApiCreateEnvironmentRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof EnvironmentsApiCreateEnvironment\n   */\n  readonly projId: string;\n\n  /**\n   *\n   * @type {EnvironmentCreate}\n   * @memberof EnvironmentsApiCreateEnvironment\n   */\n  readonly environmentCreate: EnvironmentCreate;\n}\n\n/**\n * Request parameters for deleteEnvironment operation in EnvironmentsApi.\n * @export\n * @interface EnvironmentsApiDeleteEnvironmentRequest\n */\nexport interface EnvironmentsApiDeleteEnvironmentRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof EnvironmentsApiDeleteEnvironment\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof EnvironmentsApiDeleteEnvironment\n   */\n  readonly envId: string;\n}\n\n/**\n * Request parameters for getEnvironment operation in EnvironmentsApi.\n * @export\n * @interface EnvironmentsApiGetEnvironmentRequest\n */\nexport interface EnvironmentsApiGetEnvironmentRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof EnvironmentsApiGetEnvironment\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof EnvironmentsApiGetEnvironment\n   */\n  readonly envId: string;\n}\n\n/**\n * Request parameters for listEnvironments operation in EnvironmentsApi.\n * @export\n * @interface EnvironmentsApiListEnvironmentsRequest\n */\nexport interface EnvironmentsApiListEnvironmentsRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof EnvironmentsApiListEnvironments\n   */\n  readonly projId: string;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof EnvironmentsApiListEnvironments\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof EnvironmentsApiListEnvironments\n   */\n  readonly perPage?: number;\n}\n\n/**\n * Request parameters for statsEnvironments operation in EnvironmentsApi.\n * @export\n * @interface EnvironmentsApiStatsEnvironmentsRequest\n */\nexport interface EnvironmentsApiStatsEnvironmentsRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof EnvironmentsApiStatsEnvironments\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof EnvironmentsApiStatsEnvironments\n   */\n  readonly envId: string;\n}\n\n/**\n * Request parameters for updateEnvironment operation in EnvironmentsApi.\n * @export\n * @interface EnvironmentsApiUpdateEnvironmentRequest\n */\nexport interface EnvironmentsApiUpdateEnvironmentRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof EnvironmentsApiUpdateEnvironment\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof EnvironmentsApiUpdateEnvironment\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {EnvironmentUpdate}\n   * @memberof EnvironmentsApiUpdateEnvironment\n   */\n  readonly environmentUpdate: EnvironmentUpdate;\n}\n\n/**\n * EnvironmentsApi - object-oriented interface\n * @export\n * @class EnvironmentsApi\n * @extends {BaseAPI}\n */\nexport class EnvironmentsApi extends BaseAPI {\n  /**\n   * Copy environment  This endpoint either duplicates an existing environment to a new environment in the same project, or copies from an existing environment to another existing environment.  The `scope` object controls which objects will be copied to the target environment.  To clone to a new environment, the user must have write permissions to the containing project. To clone into an existing environment, the user must have write permissions to the target environment.  Copying environments across projects or organizations is not allowed.\n   * @summary Copy Environment\n   * @param {EnvironmentsApiCopyEnvironmentRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof EnvironmentsApi\n   */\n  public copyEnvironment(\n    requestParameters: EnvironmentsApiCopyEnvironmentRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return EnvironmentsApiFp(this.configuration)\n      .copyEnvironment(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.environmentCopy,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Creates a new environment under a given project.\n   * @summary Create Environment\n   * @param {EnvironmentsApiCreateEnvironmentRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof EnvironmentsApi\n   */\n  public createEnvironment(\n    requestParameters: EnvironmentsApiCreateEnvironmentRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return EnvironmentsApiFp(this.configuration)\n      .createEnvironment(requestParameters.projId, requestParameters.environmentCreate, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Deletes an environment and all its related data.\n   * @summary Delete Environment\n   * @param {EnvironmentsApiDeleteEnvironmentRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof EnvironmentsApi\n   */\n  public deleteEnvironment(\n    requestParameters: EnvironmentsApiDeleteEnvironmentRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return EnvironmentsApiFp(this.configuration)\n      .deleteEnvironment(requestParameters.projId, requestParameters.envId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Gets a single environment matching the given env_id, if such environment exists.\n   * @summary Get Environment\n   * @param {EnvironmentsApiGetEnvironmentRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof EnvironmentsApi\n   */\n  public getEnvironment(\n    requestParameters: EnvironmentsApiGetEnvironmentRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return EnvironmentsApiFp(this.configuration)\n      .getEnvironment(requestParameters.projId, requestParameters.envId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Lists all the environments under a given project.\n   * @summary List Environments\n   * @param {EnvironmentsApiListEnvironmentsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof EnvironmentsApi\n   */\n  public listEnvironments(\n    requestParameters: EnvironmentsApiListEnvironmentsRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return EnvironmentsApiFp(this.configuration)\n      .listEnvironments(\n        requestParameters.projId,\n        requestParameters.page,\n        requestParameters.perPage,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Stats Environments\n   * @param {EnvironmentsApiStatsEnvironmentsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof EnvironmentsApi\n   */\n  public statsEnvironments(\n    requestParameters: EnvironmentsApiStatsEnvironmentsRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return EnvironmentsApiFp(this.configuration)\n      .statsEnvironments(requestParameters.projId, requestParameters.envId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Updates the environment.\n   * @summary Update Environment\n   * @param {EnvironmentsApiUpdateEnvironmentRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof EnvironmentsApi\n   */\n  public updateEnvironment(\n    requestParameters: EnvironmentsApiUpdateEnvironmentRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return EnvironmentsApiFp(this.configuration)\n      .updateEnvironment(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.environmentUpdate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { DerivedRoleRuleCreate } from '../types';\n// @ts-ignore\nimport { DerivedRoleRuleDelete } from '../types';\n// @ts-ignore\nimport { DerivedRoleRuleRead } from '../types';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n// @ts-ignore\nimport { PermitBackendSchemasSchemaDerivedRoleDerivedRoleSettings } from '../types';\n/**\n * ImplicitGrantsApi - axios parameter creator\n * @export\n */\nexport const ImplicitGrantsApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     * Creates an implicit grant on a given role\n     * @summary Create Implicit Grant\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {DerivedRoleRuleCreate} derivedRoleRuleCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createImplicitGrant: async (\n      projId: string,\n      envId: string,\n      resourceId: string,\n      roleId: string,\n      derivedRoleRuleCreate: DerivedRoleRuleCreate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('createImplicitGrant', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('createImplicitGrant', 'envId', envId);\n      // verify required parameter 'resourceId' is not null or undefined\n      assertParamExists('createImplicitGrant', 'resourceId', resourceId);\n      // verify required parameter 'roleId' is not null or undefined\n      assertParamExists('createImplicitGrant', 'roleId', roleId);\n      // verify required parameter 'derivedRoleRuleCreate' is not null or undefined\n      assertParamExists('createImplicitGrant', 'derivedRoleRuleCreate', derivedRoleRuleCreate);\n      const localVarPath =\n        `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/implicit_grants`\n          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n          .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))\n          .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        derivedRoleRuleCreate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Deletes an implicit grant on a given role\n     * @summary Delete Implicit Grant\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {DerivedRoleRuleDelete} derivedRoleRuleDelete\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteImplicitGrant: async (\n      projId: string,\n      envId: string,\n      roleId: string,\n      resourceId: string,\n      derivedRoleRuleDelete: DerivedRoleRuleDelete,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('deleteImplicitGrant', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('deleteImplicitGrant', 'envId', envId);\n      // verify required parameter 'roleId' is not null or undefined\n      assertParamExists('deleteImplicitGrant', 'roleId', roleId);\n      // verify required parameter 'resourceId' is not null or undefined\n      assertParamExists('deleteImplicitGrant', 'resourceId', resourceId);\n      // verify required parameter 'derivedRoleRuleDelete' is not null or undefined\n      assertParamExists('deleteImplicitGrant', 'derivedRoleRuleDelete', derivedRoleRuleDelete);\n      const localVarPath =\n        `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/implicit_grants`\n          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n          .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)))\n          .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        derivedRoleRuleDelete,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Update the `when` for implicit grants on a given role\n     * @summary Update Implicit Grants Conditions\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {PermitBackendSchemasSchemaDerivedRoleDerivedRoleSettings} permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateImplicitGrantsConditions: async (\n      projId: string,\n      envId: string,\n      resourceId: string,\n      roleId: string,\n      permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings: PermitBackendSchemasSchemaDerivedRoleDerivedRoleSettings,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('updateImplicitGrantsConditions', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('updateImplicitGrantsConditions', 'envId', envId);\n      // verify required parameter 'resourceId' is not null or undefined\n      assertParamExists('updateImplicitGrantsConditions', 'resourceId', resourceId);\n      // verify required parameter 'roleId' is not null or undefined\n      assertParamExists('updateImplicitGrantsConditions', 'roleId', roleId);\n      // verify required parameter 'permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings' is not null or undefined\n      assertParamExists(\n        'updateImplicitGrantsConditions',\n        'permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings',\n        permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings,\n      );\n      const localVarPath =\n        `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/implicit_grants/conditions`\n          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n          .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))\n          .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * ImplicitGrantsApi - functional programming interface\n * @export\n */\nexport const ImplicitGrantsApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = ImplicitGrantsApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * Creates an implicit grant on a given role\n     * @summary Create Implicit Grant\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {DerivedRoleRuleCreate} derivedRoleRuleCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async createImplicitGrant(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      roleId: string,\n      derivedRoleRuleCreate: DerivedRoleRuleCreate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DerivedRoleRuleRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.createImplicitGrant(\n        projId,\n        envId,\n        resourceId,\n        roleId,\n        derivedRoleRuleCreate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Deletes an implicit grant on a given role\n     * @summary Delete Implicit Grant\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {DerivedRoleRuleDelete} derivedRoleRuleDelete\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async deleteImplicitGrant(\n      projId: string,\n      envId: string,\n      roleId: string,\n      resourceId: string,\n      derivedRoleRuleDelete: DerivedRoleRuleDelete,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteImplicitGrant(\n        projId,\n        envId,\n        roleId,\n        resourceId,\n        derivedRoleRuleDelete,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Update the `when` for implicit grants on a given role\n     * @summary Update Implicit Grants Conditions\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {PermitBackendSchemasSchemaDerivedRoleDerivedRoleSettings} permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async updateImplicitGrantsConditions(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      roleId: string,\n      permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings: PermitBackendSchemasSchemaDerivedRoleDerivedRoleSettings,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (\n        axios?: AxiosInstance,\n        basePath?: string,\n      ) => AxiosPromise<PermitBackendSchemasSchemaDerivedRoleDerivedRoleSettings>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.updateImplicitGrantsConditions(\n        projId,\n        envId,\n        resourceId,\n        roleId,\n        permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * ImplicitGrantsApi - factory interface\n * @export\n */\nexport const ImplicitGrantsApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = ImplicitGrantsApiFp(configuration);\n  return {\n    /**\n     * Creates an implicit grant on a given role\n     * @summary Create Implicit Grant\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {DerivedRoleRuleCreate} derivedRoleRuleCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createImplicitGrant(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      roleId: string,\n      derivedRoleRuleCreate: DerivedRoleRuleCreate,\n      options?: any,\n    ): AxiosPromise<DerivedRoleRuleRead> {\n      return localVarFp\n        .createImplicitGrant(projId, envId, resourceId, roleId, derivedRoleRuleCreate, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Deletes an implicit grant on a given role\n     * @summary Delete Implicit Grant\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {DerivedRoleRuleDelete} derivedRoleRuleDelete\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteImplicitGrant(\n      projId: string,\n      envId: string,\n      roleId: string,\n      resourceId: string,\n      derivedRoleRuleDelete: DerivedRoleRuleDelete,\n      options?: any,\n    ): AxiosPromise<void> {\n      return localVarFp\n        .deleteImplicitGrant(projId, envId, roleId, resourceId, derivedRoleRuleDelete, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Update the `when` for implicit grants on a given role\n     * @summary Update Implicit Grants Conditions\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {PermitBackendSchemasSchemaDerivedRoleDerivedRoleSettings} permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateImplicitGrantsConditions(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      roleId: string,\n      permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings: PermitBackendSchemasSchemaDerivedRoleDerivedRoleSettings,\n      options?: any,\n    ): AxiosPromise<PermitBackendSchemasSchemaDerivedRoleDerivedRoleSettings> {\n      return localVarFp\n        .updateImplicitGrantsConditions(\n          projId,\n          envId,\n          resourceId,\n          roleId,\n          permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings,\n          options,\n        )\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for createImplicitGrant operation in ImplicitGrantsApi.\n * @export\n * @interface ImplicitGrantsApiCreateImplicitGrantRequest\n */\nexport interface ImplicitGrantsApiCreateImplicitGrantRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ImplicitGrantsApiCreateImplicitGrant\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ImplicitGrantsApiCreateImplicitGrant\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ImplicitGrantsApiCreateImplicitGrant\n   */\n  readonly resourceId: string;\n\n  /**\n   * Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ImplicitGrantsApiCreateImplicitGrant\n   */\n  readonly roleId: string;\n\n  /**\n   *\n   * @type {DerivedRoleRuleCreate}\n   * @memberof ImplicitGrantsApiCreateImplicitGrant\n   */\n  readonly derivedRoleRuleCreate: DerivedRoleRuleCreate;\n}\n\n/**\n * Request parameters for deleteImplicitGrant operation in ImplicitGrantsApi.\n * @export\n * @interface ImplicitGrantsApiDeleteImplicitGrantRequest\n */\nexport interface ImplicitGrantsApiDeleteImplicitGrantRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ImplicitGrantsApiDeleteImplicitGrant\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ImplicitGrantsApiDeleteImplicitGrant\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ImplicitGrantsApiDeleteImplicitGrant\n   */\n  readonly roleId: string;\n\n  /**\n   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ImplicitGrantsApiDeleteImplicitGrant\n   */\n  readonly resourceId: string;\n\n  /**\n   *\n   * @type {DerivedRoleRuleDelete}\n   * @memberof ImplicitGrantsApiDeleteImplicitGrant\n   */\n  readonly derivedRoleRuleDelete: DerivedRoleRuleDelete;\n}\n\n/**\n * Request parameters for updateImplicitGrantsConditions operation in ImplicitGrantsApi.\n * @export\n * @interface ImplicitGrantsApiUpdateImplicitGrantsConditionsRequest\n */\nexport interface ImplicitGrantsApiUpdateImplicitGrantsConditionsRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ImplicitGrantsApiUpdateImplicitGrantsConditions\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ImplicitGrantsApiUpdateImplicitGrantsConditions\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ImplicitGrantsApiUpdateImplicitGrantsConditions\n   */\n  readonly resourceId: string;\n\n  /**\n   * Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ImplicitGrantsApiUpdateImplicitGrantsConditions\n   */\n  readonly roleId: string;\n\n  /**\n   *\n   * @type {PermitBackendSchemasSchemaDerivedRoleDerivedRoleSettings}\n   * @memberof ImplicitGrantsApiUpdateImplicitGrantsConditions\n   */\n  readonly permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings: PermitBackendSchemasSchemaDerivedRoleDerivedRoleSettings;\n}\n\n/**\n * ImplicitGrantsApi - object-oriented interface\n * @export\n * @class ImplicitGrantsApi\n * @extends {BaseAPI}\n */\nexport class ImplicitGrantsApi extends BaseAPI {\n  /**\n   * Creates an implicit grant on a given role\n   * @summary Create Implicit Grant\n   * @param {ImplicitGrantsApiCreateImplicitGrantRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ImplicitGrantsApi\n   */\n  public createImplicitGrant(\n    requestParameters: ImplicitGrantsApiCreateImplicitGrantRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ImplicitGrantsApiFp(this.configuration)\n      .createImplicitGrant(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.resourceId,\n        requestParameters.roleId,\n        requestParameters.derivedRoleRuleCreate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Deletes an implicit grant on a given role\n   * @summary Delete Implicit Grant\n   * @param {ImplicitGrantsApiDeleteImplicitGrantRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ImplicitGrantsApi\n   */\n  public deleteImplicitGrant(\n    requestParameters: ImplicitGrantsApiDeleteImplicitGrantRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ImplicitGrantsApiFp(this.configuration)\n      .deleteImplicitGrant(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.roleId,\n        requestParameters.resourceId,\n        requestParameters.derivedRoleRuleDelete,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Update the `when` for implicit grants on a given role\n   * @summary Update Implicit Grants Conditions\n   * @param {ImplicitGrantsApiUpdateImplicitGrantsConditionsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ImplicitGrantsApi\n   */\n  public updateImplicitGrantsConditions(\n    requestParameters: ImplicitGrantsApiUpdateImplicitGrantsConditionsRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ImplicitGrantsApiFp(this.configuration)\n      .updateImplicitGrantsConditions(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.resourceId,\n        requestParameters.roleId,\n        requestParameters.permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n// @ts-ignore\nimport { LanguageInstructions } from '../types';\n/**\n * InstructionsApi - axios parameter creator\n * @export\n */\nexport const InstructionsApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     * Lists pending organization invites\n     * @summary List Language Instructions\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listLanguageInstructions: async (\n      projId: string,\n      envId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('listLanguageInstructions', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('listLanguageInstructions', 'envId', envId);\n      const localVarPath = `/v2/{proj_id}/{env_id}/get_instructions`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * InstructionsApi - functional programming interface\n * @export\n */\nexport const InstructionsApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = InstructionsApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * Lists pending organization invites\n     * @summary List Language Instructions\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async listLanguageInstructions(\n      projId: string,\n      envId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LanguageInstructions>>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.listLanguageInstructions(\n        projId,\n        envId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * InstructionsApi - factory interface\n * @export\n */\nexport const InstructionsApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = InstructionsApiFp(configuration);\n  return {\n    /**\n     * Lists pending organization invites\n     * @summary List Language Instructions\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listLanguageInstructions(\n      projId: string,\n      envId: string,\n      options?: any,\n    ): AxiosPromise<Array<LanguageInstructions>> {\n      return localVarFp\n        .listLanguageInstructions(projId, envId, options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for listLanguageInstructions operation in InstructionsApi.\n * @export\n * @interface InstructionsApiListLanguageInstructionsRequest\n */\nexport interface InstructionsApiListLanguageInstructionsRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof InstructionsApiListLanguageInstructions\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof InstructionsApiListLanguageInstructions\n   */\n  readonly envId: string;\n}\n\n/**\n * InstructionsApi - object-oriented interface\n * @export\n * @class InstructionsApi\n * @extends {BaseAPI}\n */\nexport class InstructionsApi extends BaseAPI {\n  /**\n   * Lists pending organization invites\n   * @summary List Language Instructions\n   * @param {InstructionsApiListLanguageInstructionsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof InstructionsApi\n   */\n  public listLanguageInstructions(\n    requestParameters: InstructionsApiListLanguageInstructionsRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return InstructionsApiFp(this.configuration)\n      .listLanguageInstructions(requestParameters.projId, requestParameters.envId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n// @ts-ignore\nimport { OrgMemberCreate } from '../types';\n// @ts-ignore\nimport { OrgMemberReadWithGrants } from '../types';\n// @ts-ignore\nimport { OrgMemberRemovePermissions } from '../types';\n// @ts-ignore\nimport { OrgMemberUpdate } from '../types';\n/**\n * MembersApi - axios parameter creator\n * @export\n */\nexport const MembersApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     * Create an organization member if needed, and grant it permissions.  The member can be specified either by ID (for an existing member), or by email (for either an existing member or a new one).  For a new member, an invite will be sent.\n     * @summary Create Organization Members\n     * @param {OrgMemberCreate} orgMemberCreate\n     * @param {string} [inviterName]\n     * @param {string} [inviterEmail]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createOrganizationMembers: async (\n      orgMemberCreate: OrgMemberCreate,\n      inviterName?: string,\n      inviterEmail?: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgMemberCreate' is not null or undefined\n      assertParamExists('createOrganizationMembers', 'orgMemberCreate', orgMemberCreate);\n      const localVarPath = `/v2/members`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (inviterName !== undefined) {\n        localVarQueryParameter['inviter_name'] = inviterName;\n      }\n\n      if (inviterEmail !== undefined) {\n        localVarQueryParameter['inviter_email'] = inviterEmail;\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        orgMemberCreate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Deletes an account member matching the given id or email address. The member will be removed from the active account in permit.io.  If the member is the only member in its account (organization), returns 400 (bad request), due to nobody remains with access to the account, meaning deletion of the entire account (org). To completely remove an account, call DELETE `/orgs/{org}`.\n     * @summary Delete Organization Member\n     * @param {string} memberId Either the unique id (UUID) of the account member, or the email address of the account member.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteOrganizationMember: async (\n      memberId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'memberId' is not null or undefined\n      assertParamExists('deleteOrganizationMember', 'memberId', memberId);\n      const localVarPath = `/v2/members/{member_id}`.replace(\n        `{${'member_id'}}`,\n        encodeURIComponent(String(memberId)),\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Remove permissions from a member. If the last permissions a member has are removed, the member is also deleted.\n     * @summary Delete Organization Permissions\n     * @param {OrgMemberRemovePermissions} orgMemberRemovePermissions\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteOrganizationPermissions: async (\n      orgMemberRemovePermissions: OrgMemberRemovePermissions,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgMemberRemovePermissions' is not null or undefined\n      assertParamExists(\n        'deleteOrganizationPermissions',\n        'orgMemberRemovePermissions',\n        orgMemberRemovePermissions,\n      );\n      const localVarPath = `/v2/members`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        orgMemberRemovePermissions,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Gets the authenticated account member\\'s details.\n     * @summary Get the authenticated account member\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getAuthenticatedMember: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n      const localVarPath = `/v2/members/me`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Gets a single account member by its id or email address. matching the given member, if no such member exists under the current active account (organization), returns 404.\n     * @summary Get Organization Member\n     * @param {string} memberId Either the unique id (UUID) of the account member, or the email address of the account member.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getOrganizationMember: async (\n      memberId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'memberId' is not null or undefined\n      assertParamExists('getOrganizationMember', 'memberId', memberId);\n      const localVarPath = `/v2/members/{member_id}`.replace(\n        `{${'member_id'}}`,\n        encodeURIComponent(String(memberId)),\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Lists all the account members that current active account has access to, optionally filtering by project or environment. The active account/organization is determined by the API Key used or by the authenticated session id.\n     * @summary List Organization Members\n     * @param {string} [projectId]\n     * @param {string} [envId]\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listOrganizationMembers: async (\n      projectId?: string,\n      envId?: string,\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/v2/members`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (projectId !== undefined) {\n        localVarQueryParameter['project_id'] = projectId;\n      }\n\n      if (envId !== undefined) {\n        localVarQueryParameter['env_id'] = envId;\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Updates an account member\\'s settings.\n     * @summary Update Organization Member\n     * @param {string} memberId Either the unique id (UUID) of the account member, or the email address of the account member.\n     * @param {OrgMemberUpdate} orgMemberUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateOrganizationMember: async (\n      memberId: string,\n      orgMemberUpdate: OrgMemberUpdate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'memberId' is not null or undefined\n      assertParamExists('updateOrganizationMember', 'memberId', memberId);\n      // verify required parameter 'orgMemberUpdate' is not null or undefined\n      assertParamExists('updateOrganizationMember', 'orgMemberUpdate', orgMemberUpdate);\n      const localVarPath = `/v2/members/{member_id}`.replace(\n        `{${'member_id'}}`,\n        encodeURIComponent(String(memberId)),\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        orgMemberUpdate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * MembersApi - functional programming interface\n * @export\n */\nexport const MembersApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = MembersApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * Create an organization member if needed, and grant it permissions.  The member can be specified either by ID (for an existing member), or by email (for either an existing member or a new one).  For a new member, an invite will be sent.\n     * @summary Create Organization Members\n     * @param {OrgMemberCreate} orgMemberCreate\n     * @param {string} [inviterName]\n     * @param {string} [inviterEmail]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async createOrganizationMembers(\n      orgMemberCreate: OrgMemberCreate,\n      inviterName?: string,\n      inviterEmail?: string,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgMemberReadWithGrants>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.createOrganizationMembers(\n        orgMemberCreate,\n        inviterName,\n        inviterEmail,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Deletes an account member matching the given id or email address. The member will be removed from the active account in permit.io.  If the member is the only member in its account (organization), returns 400 (bad request), due to nobody remains with access to the account, meaning deletion of the entire account (org). To completely remove an account, call DELETE `/orgs/{org}`.\n     * @summary Delete Organization Member\n     * @param {string} memberId Either the unique id (UUID) of the account member, or the email address of the account member.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async deleteOrganizationMember(\n      memberId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrganizationMember(\n        memberId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Remove permissions from a member. If the last permissions a member has are removed, the member is also deleted.\n     * @summary Delete Organization Permissions\n     * @param {OrgMemberRemovePermissions} orgMemberRemovePermissions\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async deleteOrganizationPermissions(\n      orgMemberRemovePermissions: OrgMemberRemovePermissions,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrganizationPermissions(\n        orgMemberRemovePermissions,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Gets the authenticated account member\\'s details.\n     * @summary Get the authenticated account member\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getAuthenticatedMember(\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgMemberReadWithGrants>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthenticatedMember(options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Gets a single account member by its id or email address. matching the given member, if no such member exists under the current active account (organization), returns 404.\n     * @summary Get Organization Member\n     * @param {string} memberId Either the unique id (UUID) of the account member, or the email address of the account member.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getOrganizationMember(\n      memberId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgMemberReadWithGrants>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationMember(\n        memberId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Lists all the account members that current active account has access to, optionally filtering by project or environment. The active account/organization is determined by the API Key used or by the authenticated session id.\n     * @summary List Organization Members\n     * @param {string} [projectId]\n     * @param {string} [envId]\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async listOrganizationMembers(\n      projectId?: string,\n      envId?: string,\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrgMemberReadWithGrants>>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.listOrganizationMembers(\n        projectId,\n        envId,\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Updates an account member\\'s settings.\n     * @summary Update Organization Member\n     * @param {string} memberId Either the unique id (UUID) of the account member, or the email address of the account member.\n     * @param {OrgMemberUpdate} orgMemberUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async updateOrganizationMember(\n      memberId: string,\n      orgMemberUpdate: OrgMemberUpdate,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgMemberReadWithGrants>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrganizationMember(\n        memberId,\n        orgMemberUpdate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * MembersApi - factory interface\n * @export\n */\nexport const MembersApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = MembersApiFp(configuration);\n  return {\n    /**\n     * Create an organization member if needed, and grant it permissions.  The member can be specified either by ID (for an existing member), or by email (for either an existing member or a new one).  For a new member, an invite will be sent.\n     * @summary Create Organization Members\n     * @param {OrgMemberCreate} orgMemberCreate\n     * @param {string} [inviterName]\n     * @param {string} [inviterEmail]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createOrganizationMembers(\n      orgMemberCreate: OrgMemberCreate,\n      inviterName?: string,\n      inviterEmail?: string,\n      options?: any,\n    ): AxiosPromise<OrgMemberReadWithGrants> {\n      return localVarFp\n        .createOrganizationMembers(orgMemberCreate, inviterName, inviterEmail, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Deletes an account member matching the given id or email address. The member will be removed from the active account in permit.io.  If the member is the only member in its account (organization), returns 400 (bad request), due to nobody remains with access to the account, meaning deletion of the entire account (org). To completely remove an account, call DELETE `/orgs/{org}`.\n     * @summary Delete Organization Member\n     * @param {string} memberId Either the unique id (UUID) of the account member, or the email address of the account member.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteOrganizationMember(memberId: string, options?: any): AxiosPromise<void> {\n      return localVarFp\n        .deleteOrganizationMember(memberId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Remove permissions from a member. If the last permissions a member has are removed, the member is also deleted.\n     * @summary Delete Organization Permissions\n     * @param {OrgMemberRemovePermissions} orgMemberRemovePermissions\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteOrganizationPermissions(\n      orgMemberRemovePermissions: OrgMemberRemovePermissions,\n      options?: any,\n    ): AxiosPromise<void> {\n      return localVarFp\n        .deleteOrganizationPermissions(orgMemberRemovePermissions, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Gets the authenticated account member\\'s details.\n     * @summary Get the authenticated account member\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getAuthenticatedMember(options?: any): AxiosPromise<OrgMemberReadWithGrants> {\n      return localVarFp.getAuthenticatedMember(options).then((request) => request(axios, basePath));\n    },\n    /**\n     * Gets a single account member by its id or email address. matching the given member, if no such member exists under the current active account (organization), returns 404.\n     * @summary Get Organization Member\n     * @param {string} memberId Either the unique id (UUID) of the account member, or the email address of the account member.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getOrganizationMember(memberId: string, options?: any): AxiosPromise<OrgMemberReadWithGrants> {\n      return localVarFp\n        .getOrganizationMember(memberId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Lists all the account members that current active account has access to, optionally filtering by project or environment. The active account/organization is determined by the API Key used or by the authenticated session id.\n     * @summary List Organization Members\n     * @param {string} [projectId]\n     * @param {string} [envId]\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listOrganizationMembers(\n      projectId?: string,\n      envId?: string,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<Array<OrgMemberReadWithGrants>> {\n      return localVarFp\n        .listOrganizationMembers(projectId, envId, page, perPage, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Updates an account member\\'s settings.\n     * @summary Update Organization Member\n     * @param {string} memberId Either the unique id (UUID) of the account member, or the email address of the account member.\n     * @param {OrgMemberUpdate} orgMemberUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateOrganizationMember(\n      memberId: string,\n      orgMemberUpdate: OrgMemberUpdate,\n      options?: any,\n    ): AxiosPromise<OrgMemberReadWithGrants> {\n      return localVarFp\n        .updateOrganizationMember(memberId, orgMemberUpdate, options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for createOrganizationMembers operation in MembersApi.\n * @export\n * @interface MembersApiCreateOrganizationMembersRequest\n */\nexport interface MembersApiCreateOrganizationMembersRequest {\n  /**\n   *\n   * @type {OrgMemberCreate}\n   * @memberof MembersApiCreateOrganizationMembers\n   */\n  readonly orgMemberCreate: OrgMemberCreate;\n\n  /**\n   *\n   * @type {string}\n   * @memberof MembersApiCreateOrganizationMembers\n   */\n  readonly inviterName?: string;\n\n  /**\n   *\n   * @type {string}\n   * @memberof MembersApiCreateOrganizationMembers\n   */\n  readonly inviterEmail?: string;\n}\n\n/**\n * Request parameters for deleteOrganizationMember operation in MembersApi.\n * @export\n * @interface MembersApiDeleteOrganizationMemberRequest\n */\nexport interface MembersApiDeleteOrganizationMemberRequest {\n  /**\n   * Either the unique id (UUID) of the account member, or the email address of the account member.\n   * @type {string}\n   * @memberof MembersApiDeleteOrganizationMember\n   */\n  readonly memberId: string;\n}\n\n/**\n * Request parameters for deleteOrganizationPermissions operation in MembersApi.\n * @export\n * @interface MembersApiDeleteOrganizationPermissionsRequest\n */\nexport interface MembersApiDeleteOrganizationPermissionsRequest {\n  /**\n   *\n   * @type {OrgMemberRemovePermissions}\n   * @memberof MembersApiDeleteOrganizationPermissions\n   */\n  readonly orgMemberRemovePermissions: OrgMemberRemovePermissions;\n}\n\n/**\n * Request parameters for getOrganizationMember operation in MembersApi.\n * @export\n * @interface MembersApiGetOrganizationMemberRequest\n */\nexport interface MembersApiGetOrganizationMemberRequest {\n  /**\n   * Either the unique id (UUID) of the account member, or the email address of the account member.\n   * @type {string}\n   * @memberof MembersApiGetOrganizationMember\n   */\n  readonly memberId: string;\n}\n\n/**\n * Request parameters for listOrganizationMembers operation in MembersApi.\n * @export\n * @interface MembersApiListOrganizationMembersRequest\n */\nexport interface MembersApiListOrganizationMembersRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof MembersApiListOrganizationMembers\n   */\n  readonly projectId?: string;\n\n  /**\n   *\n   * @type {string}\n   * @memberof MembersApiListOrganizationMembers\n   */\n  readonly envId?: string;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof MembersApiListOrganizationMembers\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof MembersApiListOrganizationMembers\n   */\n  readonly perPage?: number;\n}\n\n/**\n * Request parameters for updateOrganizationMember operation in MembersApi.\n * @export\n * @interface MembersApiUpdateOrganizationMemberRequest\n */\nexport interface MembersApiUpdateOrganizationMemberRequest {\n  /**\n   * Either the unique id (UUID) of the account member, or the email address of the account member.\n   * @type {string}\n   * @memberof MembersApiUpdateOrganizationMember\n   */\n  readonly memberId: string;\n\n  /**\n   *\n   * @type {OrgMemberUpdate}\n   * @memberof MembersApiUpdateOrganizationMember\n   */\n  readonly orgMemberUpdate: OrgMemberUpdate;\n}\n\n/**\n * MembersApi - object-oriented interface\n * @export\n * @class MembersApi\n * @extends {BaseAPI}\n */\nexport class MembersApi extends BaseAPI {\n  /**\n   * Create an organization member if needed, and grant it permissions.  The member can be specified either by ID (for an existing member), or by email (for either an existing member or a new one).  For a new member, an invite will be sent.\n   * @summary Create Organization Members\n   * @param {MembersApiCreateOrganizationMembersRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof MembersApi\n   */\n  public createOrganizationMembers(\n    requestParameters: MembersApiCreateOrganizationMembersRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return MembersApiFp(this.configuration)\n      .createOrganizationMembers(\n        requestParameters.orgMemberCreate,\n        requestParameters.inviterName,\n        requestParameters.inviterEmail,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Deletes an account member matching the given id or email address. The member will be removed from the active account in permit.io.  If the member is the only member in its account (organization), returns 400 (bad request), due to nobody remains with access to the account, meaning deletion of the entire account (org). To completely remove an account, call DELETE `/orgs/{org}`.\n   * @summary Delete Organization Member\n   * @param {MembersApiDeleteOrganizationMemberRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof MembersApi\n   */\n  public deleteOrganizationMember(\n    requestParameters: MembersApiDeleteOrganizationMemberRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return MembersApiFp(this.configuration)\n      .deleteOrganizationMember(requestParameters.memberId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Remove permissions from a member. If the last permissions a member has are removed, the member is also deleted.\n   * @summary Delete Organization Permissions\n   * @param {MembersApiDeleteOrganizationPermissionsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof MembersApi\n   */\n  public deleteOrganizationPermissions(\n    requestParameters: MembersApiDeleteOrganizationPermissionsRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return MembersApiFp(this.configuration)\n      .deleteOrganizationPermissions(requestParameters.orgMemberRemovePermissions, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Gets the authenticated account member\\'s details.\n   * @summary Get the authenticated account member\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof MembersApi\n   */\n  public getAuthenticatedMember(options?: AxiosRequestConfig) {\n    return MembersApiFp(this.configuration)\n      .getAuthenticatedMember(options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Gets a single account member by its id or email address. matching the given member, if no such member exists under the current active account (organization), returns 404.\n   * @summary Get Organization Member\n   * @param {MembersApiGetOrganizationMemberRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof MembersApi\n   */\n  public getOrganizationMember(\n    requestParameters: MembersApiGetOrganizationMemberRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return MembersApiFp(this.configuration)\n      .getOrganizationMember(requestParameters.memberId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Lists all the account members that current active account has access to, optionally filtering by project or environment. The active account/organization is determined by the API Key used or by the authenticated session id.\n   * @summary List Organization Members\n   * @param {MembersApiListOrganizationMembersRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof MembersApi\n   */\n  public listOrganizationMembers(\n    requestParameters: MembersApiListOrganizationMembersRequest = {},\n    options?: AxiosRequestConfig,\n  ) {\n    return MembersApiFp(this.configuration)\n      .listOrganizationMembers(\n        requestParameters.projectId,\n        requestParameters.envId,\n        requestParameters.page,\n        requestParameters.perPage,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Updates an account member\\'s settings.\n   * @summary Update Organization Member\n   * @param {MembersApiUpdateOrganizationMemberRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof MembersApi\n   */\n  public updateOrganizationMember(\n    requestParameters: MembersApiUpdateOrganizationMemberRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return MembersApiFp(this.configuration)\n      .updateOrganizationMember(\n        requestParameters.memberId,\n        requestParameters.orgMemberUpdate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { FullData } from '../types';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n// @ts-ignore\nimport { ResponseGetDataForConditionSetV2InternalOpalDataOrgIdProjIdEnvIdConditionSetsConditionSetIdGet } from '../types';\n// @ts-ignore\nimport { ResponseGetDataForResourceV2InternalOpalDataOrgIdProjIdEnvIdResourceTypesResourceIdGet } from '../types';\n// @ts-ignore\nimport { ResponseGetDataForRoleV2InternalOpalDataOrgIdProjIdEnvIdRolesRoleIdGet } from '../types';\n// @ts-ignore\nimport { ResponseGetDataForTenantV2InternalOpalDataOrgIdProjIdEnvIdTenantsTenantIdGet } from '../types';\n// @ts-ignore\nimport { ResponseGetDataForUserV2InternalOpalDataOrgIdProjIdEnvIdUsersUserIdGet } from '../types';\n/**\n * OPALDataApi - axios parameter creator\n * @export\n */\nexport const OPALDataApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     *\n     * @summary Get All Data\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {boolean} [internalUpdateCache]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getAllData: async (\n      orgId: string,\n      projId: string,\n      envId: string,\n      internalUpdateCache?: boolean,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('getAllData', 'orgId', orgId);\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getAllData', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getAllData', 'envId', envId);\n      const localVarPath = `/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}`\n        .replace(`{${'org_id'}}`, encodeURIComponent(String(orgId)))\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (internalUpdateCache !== undefined) {\n        localVarQueryParameter['__internal_update_cache'] = internalUpdateCache;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get Data For Condition Set\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} conditionSetId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getDataForConditionSet: async (\n      orgId: string,\n      projId: string,\n      envId: string,\n      conditionSetId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('getDataForConditionSet', 'orgId', orgId);\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getDataForConditionSet', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getDataForConditionSet', 'envId', envId);\n      // verify required parameter 'conditionSetId' is not null or undefined\n      assertParamExists('getDataForConditionSet', 'conditionSetId', conditionSetId);\n      const localVarPath =\n        `/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/condition_sets/{condition_set_id}`\n          .replace(`{${'org_id'}}`, encodeURIComponent(String(orgId)))\n          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n          .replace(`{${'condition_set_id'}}`, encodeURIComponent(String(conditionSetId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get Data For Resource\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getDataForResource: async (\n      orgId: string,\n      projId: string,\n      envId: string,\n      resourceId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('getDataForResource', 'orgId', orgId);\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getDataForResource', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getDataForResource', 'envId', envId);\n      // verify required parameter 'resourceId' is not null or undefined\n      assertParamExists('getDataForResource', 'resourceId', resourceId);\n      const localVarPath =\n        `/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/resource_types/{resource_id}`\n          .replace(`{${'org_id'}}`, encodeURIComponent(String(orgId)))\n          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n          .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get Data For Role\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getDataForRole: async (\n      orgId: string,\n      projId: string,\n      envId: string,\n      roleId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('getDataForRole', 'orgId', orgId);\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getDataForRole', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getDataForRole', 'envId', envId);\n      // verify required parameter 'roleId' is not null or undefined\n      assertParamExists('getDataForRole', 'roleId', roleId);\n      const localVarPath = `/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/roles/{role_id}`\n        .replace(`{${'org_id'}}`, encodeURIComponent(String(orgId)))\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * return permission assignment data between user sets and resource sets (i.e: condition set rules data)\n     * @summary Get Data For Set Rule\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userSetId\n     * @param {string} resourceSetId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getDataForSetRule: async (\n      orgId: string,\n      projId: string,\n      envId: string,\n      userSetId: string,\n      resourceSetId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('getDataForSetRule', 'orgId', orgId);\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getDataForSetRule', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getDataForSetRule', 'envId', envId);\n      // verify required parameter 'userSetId' is not null or undefined\n      assertParamExists('getDataForSetRule', 'userSetId', userSetId);\n      // verify required parameter 'resourceSetId' is not null or undefined\n      assertParamExists('getDataForSetRule', 'resourceSetId', resourceSetId);\n      const localVarPath =\n        `/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/condition_set_rules/{user_set_id}/{resource_set_id}`\n          .replace(`{${'org_id'}}`, encodeURIComponent(String(orgId)))\n          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n          .replace(`{${'user_set_id'}}`, encodeURIComponent(String(userSetId)))\n          .replace(`{${'resource_set_id'}}`, encodeURIComponent(String(resourceSetId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get Data For Tenant\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} tenantId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getDataForTenant: async (\n      orgId: string,\n      projId: string,\n      envId: string,\n      tenantId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('getDataForTenant', 'orgId', orgId);\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getDataForTenant', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getDataForTenant', 'envId', envId);\n      // verify required parameter 'tenantId' is not null or undefined\n      assertParamExists('getDataForTenant', 'tenantId', tenantId);\n      const localVarPath = `/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/tenants/{tenant_id}`\n        .replace(`{${'org_id'}}`, encodeURIComponent(String(orgId)))\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'tenant_id'}}`, encodeURIComponent(String(tenantId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get Data For User\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getDataForUser: async (\n      orgId: string,\n      projId: string,\n      envId: string,\n      userId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('getDataForUser', 'orgId', orgId);\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getDataForUser', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getDataForUser', 'envId', envId);\n      // verify required parameter 'userId' is not null or undefined\n      assertParamExists('getDataForUser', 'userId', userId);\n      const localVarPath = `/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/users/{user_id}`\n        .replace(`{${'org_id'}}`, encodeURIComponent(String(orgId)))\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'user_id'}}`, encodeURIComponent(String(userId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * OPALDataApi - functional programming interface\n * @export\n */\nexport const OPALDataApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = OPALDataApiAxiosParamCreator(configuration);\n  return {\n    /**\n     *\n     * @summary Get All Data\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {boolean} [internalUpdateCache]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getAllData(\n      orgId: string,\n      projId: string,\n      envId: string,\n      internalUpdateCache?: boolean,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FullData>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllData(\n        orgId,\n        projId,\n        envId,\n        internalUpdateCache,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get Data For Condition Set\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} conditionSetId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getDataForConditionSet(\n      orgId: string,\n      projId: string,\n      envId: string,\n      conditionSetId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (\n        axios?: AxiosInstance,\n        basePath?: string,\n      ) => AxiosPromise<ResponseGetDataForConditionSetV2InternalOpalDataOrgIdProjIdEnvIdConditionSetsConditionSetIdGet>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getDataForConditionSet(\n        orgId,\n        projId,\n        envId,\n        conditionSetId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get Data For Resource\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getDataForResource(\n      orgId: string,\n      projId: string,\n      envId: string,\n      resourceId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (\n        axios?: AxiosInstance,\n        basePath?: string,\n      ) => AxiosPromise<ResponseGetDataForResourceV2InternalOpalDataOrgIdProjIdEnvIdResourceTypesResourceIdGet>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getDataForResource(\n        orgId,\n        projId,\n        envId,\n        resourceId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get Data For Role\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getDataForRole(\n      orgId: string,\n      projId: string,\n      envId: string,\n      roleId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (\n        axios?: AxiosInstance,\n        basePath?: string,\n      ) => AxiosPromise<ResponseGetDataForRoleV2InternalOpalDataOrgIdProjIdEnvIdRolesRoleIdGet>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getDataForRole(\n        orgId,\n        projId,\n        envId,\n        roleId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * return permission assignment data between user sets and resource sets (i.e: condition set rules data)\n     * @summary Get Data For Set Rule\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userSetId\n     * @param {string} resourceSetId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getDataForSetRule(\n      orgId: string,\n      projId: string,\n      envId: string,\n      userSetId: string,\n      resourceSetId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: Array<string> }>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getDataForSetRule(\n        orgId,\n        projId,\n        envId,\n        userSetId,\n        resourceSetId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get Data For Tenant\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} tenantId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getDataForTenant(\n      orgId: string,\n      projId: string,\n      envId: string,\n      tenantId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (\n        axios?: AxiosInstance,\n        basePath?: string,\n      ) => AxiosPromise<ResponseGetDataForTenantV2InternalOpalDataOrgIdProjIdEnvIdTenantsTenantIdGet>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getDataForTenant(\n        orgId,\n        projId,\n        envId,\n        tenantId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get Data For User\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getDataForUser(\n      orgId: string,\n      projId: string,\n      envId: string,\n      userId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (\n        axios?: AxiosInstance,\n        basePath?: string,\n      ) => AxiosPromise<ResponseGetDataForUserV2InternalOpalDataOrgIdProjIdEnvIdUsersUserIdGet>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getDataForUser(\n        orgId,\n        projId,\n        envId,\n        userId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * OPALDataApi - factory interface\n * @export\n */\nexport const OPALDataApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = OPALDataApiFp(configuration);\n  return {\n    /**\n     *\n     * @summary Get All Data\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {boolean} [internalUpdateCache]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getAllData(\n      orgId: string,\n      projId: string,\n      envId: string,\n      internalUpdateCache?: boolean,\n      options?: any,\n    ): AxiosPromise<FullData> {\n      return localVarFp\n        .getAllData(orgId, projId, envId, internalUpdateCache, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get Data For Condition Set\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} conditionSetId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getDataForConditionSet(\n      orgId: string,\n      projId: string,\n      envId: string,\n      conditionSetId: string,\n      options?: any,\n    ): AxiosPromise<ResponseGetDataForConditionSetV2InternalOpalDataOrgIdProjIdEnvIdConditionSetsConditionSetIdGet> {\n      return localVarFp\n        .getDataForConditionSet(orgId, projId, envId, conditionSetId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get Data For Resource\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getDataForResource(\n      orgId: string,\n      projId: string,\n      envId: string,\n      resourceId: string,\n      options?: any,\n    ): AxiosPromise<ResponseGetDataForResourceV2InternalOpalDataOrgIdProjIdEnvIdResourceTypesResourceIdGet> {\n      return localVarFp\n        .getDataForResource(orgId, projId, envId, resourceId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get Data For Role\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getDataForRole(\n      orgId: string,\n      projId: string,\n      envId: string,\n      roleId: string,\n      options?: any,\n    ): AxiosPromise<ResponseGetDataForRoleV2InternalOpalDataOrgIdProjIdEnvIdRolesRoleIdGet> {\n      return localVarFp\n        .getDataForRole(orgId, projId, envId, roleId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * return permission assignment data between user sets and resource sets (i.e: condition set rules data)\n     * @summary Get Data For Set Rule\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userSetId\n     * @param {string} resourceSetId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getDataForSetRule(\n      orgId: string,\n      projId: string,\n      envId: string,\n      userSetId: string,\n      resourceSetId: string,\n      options?: any,\n    ): AxiosPromise<{ [key: string]: Array<string> }> {\n      return localVarFp\n        .getDataForSetRule(orgId, projId, envId, userSetId, resourceSetId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get Data For Tenant\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} tenantId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getDataForTenant(\n      orgId: string,\n      projId: string,\n      envId: string,\n      tenantId: string,\n      options?: any,\n    ): AxiosPromise<ResponseGetDataForTenantV2InternalOpalDataOrgIdProjIdEnvIdTenantsTenantIdGet> {\n      return localVarFp\n        .getDataForTenant(orgId, projId, envId, tenantId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get Data For User\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getDataForUser(\n      orgId: string,\n      projId: string,\n      envId: string,\n      userId: string,\n      options?: any,\n    ): AxiosPromise<ResponseGetDataForUserV2InternalOpalDataOrgIdProjIdEnvIdUsersUserIdGet> {\n      return localVarFp\n        .getDataForUser(orgId, projId, envId, userId, options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for getAllData operation in OPALDataApi.\n * @export\n * @interface OPALDataApiGetAllDataRequest\n */\nexport interface OPALDataApiGetAllDataRequest {\n  /**\n   * Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OPALDataApiGetAllData\n   */\n  readonly orgId: string;\n\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OPALDataApiGetAllData\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OPALDataApiGetAllData\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {boolean}\n   * @memberof OPALDataApiGetAllData\n   */\n  readonly internalUpdateCache?: boolean;\n}\n\n/**\n * Request parameters for getDataForConditionSet operation in OPALDataApi.\n * @export\n * @interface OPALDataApiGetDataForConditionSetRequest\n */\nexport interface OPALDataApiGetDataForConditionSetRequest {\n  /**\n   * Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OPALDataApiGetDataForConditionSet\n   */\n  readonly orgId: string;\n\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OPALDataApiGetDataForConditionSet\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OPALDataApiGetDataForConditionSet\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {string}\n   * @memberof OPALDataApiGetDataForConditionSet\n   */\n  readonly conditionSetId: string;\n}\n\n/**\n * Request parameters for getDataForResource operation in OPALDataApi.\n * @export\n * @interface OPALDataApiGetDataForResourceRequest\n */\nexport interface OPALDataApiGetDataForResourceRequest {\n  /**\n   * Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OPALDataApiGetDataForResource\n   */\n  readonly orgId: string;\n\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OPALDataApiGetDataForResource\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OPALDataApiGetDataForResource\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {string}\n   * @memberof OPALDataApiGetDataForResource\n   */\n  readonly resourceId: string;\n}\n\n/**\n * Request parameters for getDataForRole operation in OPALDataApi.\n * @export\n * @interface OPALDataApiGetDataForRoleRequest\n */\nexport interface OPALDataApiGetDataForRoleRequest {\n  /**\n   * Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OPALDataApiGetDataForRole\n   */\n  readonly orgId: string;\n\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OPALDataApiGetDataForRole\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OPALDataApiGetDataForRole\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {string}\n   * @memberof OPALDataApiGetDataForRole\n   */\n  readonly roleId: string;\n}\n\n/**\n * Request parameters for getDataForSetRule operation in OPALDataApi.\n * @export\n * @interface OPALDataApiGetDataForSetRuleRequest\n */\nexport interface OPALDataApiGetDataForSetRuleRequest {\n  /**\n   * Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OPALDataApiGetDataForSetRule\n   */\n  readonly orgId: string;\n\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OPALDataApiGetDataForSetRule\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OPALDataApiGetDataForSetRule\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {string}\n   * @memberof OPALDataApiGetDataForSetRule\n   */\n  readonly userSetId: string;\n\n  /**\n   *\n   * @type {string}\n   * @memberof OPALDataApiGetDataForSetRule\n   */\n  readonly resourceSetId: string;\n}\n\n/**\n * Request parameters for getDataForTenant operation in OPALDataApi.\n * @export\n * @interface OPALDataApiGetDataForTenantRequest\n */\nexport interface OPALDataApiGetDataForTenantRequest {\n  /**\n   * Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OPALDataApiGetDataForTenant\n   */\n  readonly orgId: string;\n\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OPALDataApiGetDataForTenant\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OPALDataApiGetDataForTenant\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {string}\n   * @memberof OPALDataApiGetDataForTenant\n   */\n  readonly tenantId: string;\n}\n\n/**\n * Request parameters for getDataForUser operation in OPALDataApi.\n * @export\n * @interface OPALDataApiGetDataForUserRequest\n */\nexport interface OPALDataApiGetDataForUserRequest {\n  /**\n   * Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OPALDataApiGetDataForUser\n   */\n  readonly orgId: string;\n\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OPALDataApiGetDataForUser\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OPALDataApiGetDataForUser\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {string}\n   * @memberof OPALDataApiGetDataForUser\n   */\n  readonly userId: string;\n}\n\n/**\n * OPALDataApi - object-oriented interface\n * @export\n * @class OPALDataApi\n * @extends {BaseAPI}\n */\nexport class OPALDataApi extends BaseAPI {\n  /**\n   *\n   * @summary Get All Data\n   * @param {OPALDataApiGetAllDataRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OPALDataApi\n   */\n  public getAllData(requestParameters: OPALDataApiGetAllDataRequest, options?: AxiosRequestConfig) {\n    return OPALDataApiFp(this.configuration)\n      .getAllData(\n        requestParameters.orgId,\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.internalUpdateCache,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get Data For Condition Set\n   * @param {OPALDataApiGetDataForConditionSetRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OPALDataApi\n   */\n  public getDataForConditionSet(\n    requestParameters: OPALDataApiGetDataForConditionSetRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return OPALDataApiFp(this.configuration)\n      .getDataForConditionSet(\n        requestParameters.orgId,\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.conditionSetId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get Data For Resource\n   * @param {OPALDataApiGetDataForResourceRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OPALDataApi\n   */\n  public getDataForResource(\n    requestParameters: OPALDataApiGetDataForResourceRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return OPALDataApiFp(this.configuration)\n      .getDataForResource(\n        requestParameters.orgId,\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.resourceId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get Data For Role\n   * @param {OPALDataApiGetDataForRoleRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OPALDataApi\n   */\n  public getDataForRole(\n    requestParameters: OPALDataApiGetDataForRoleRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return OPALDataApiFp(this.configuration)\n      .getDataForRole(\n        requestParameters.orgId,\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.roleId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * return permission assignment data between user sets and resource sets (i.e: condition set rules data)\n   * @summary Get Data For Set Rule\n   * @param {OPALDataApiGetDataForSetRuleRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OPALDataApi\n   */\n  public getDataForSetRule(\n    requestParameters: OPALDataApiGetDataForSetRuleRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return OPALDataApiFp(this.configuration)\n      .getDataForSetRule(\n        requestParameters.orgId,\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.userSetId,\n        requestParameters.resourceSetId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get Data For Tenant\n   * @param {OPALDataApiGetDataForTenantRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OPALDataApi\n   */\n  public getDataForTenant(\n    requestParameters: OPALDataApiGetDataForTenantRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return OPALDataApiFp(this.configuration)\n      .getDataForTenant(\n        requestParameters.orgId,\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.tenantId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get Data For User\n   * @param {OPALDataApiGetDataForUserRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OPALDataApi\n   */\n  public getDataForUser(\n    requestParameters: OPALDataApiGetDataForUserRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return OPALDataApiFp(this.configuration)\n      .getDataForUser(\n        requestParameters.orgId,\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.userId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n// @ts-ignore\nimport { InviteCreate } from '../types';\n// @ts-ignore\nimport { InviteRead } from '../types';\n// @ts-ignore\nimport { MultiInviteResult } from '../types';\n// @ts-ignore\nimport { OrganizationCreate } from '../types';\n// @ts-ignore\nimport { OrganizationRead } from '../types';\n// @ts-ignore\nimport { OrganizationReadWithAPIKey } from '../types';\n// @ts-ignore\nimport { OrganizationUpdate } from '../types';\n/**\n * OrganizationsApi - axios parameter creator\n * @export\n */\nexport const OrganizationsApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     * Cancels an invite that was sent to a new member.\n     * @summary Cancel Invite\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} inviteId Id of the invite to cancel\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    cancelInvite: async (\n      orgId: string,\n      inviteId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('cancelInvite', 'orgId', orgId);\n      // verify required parameter 'inviteId' is not null or undefined\n      assertParamExists('cancelInvite', 'inviteId', inviteId);\n      const localVarPath = `/v2/orgs/{org_id}/invites/{invite_id}`\n        .replace(`{${'org_id'}}`, encodeURIComponent(String(orgId)))\n        .replace(`{${'invite_id'}}`, encodeURIComponent(String(inviteId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Creates a new organization that will be owned by the authenticated actor (i.e: human team member or api key).\n     * @summary Create Organization\n     * @param {OrganizationCreate} organizationCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createOrganization: async (\n      organizationCreate: OrganizationCreate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'organizationCreate' is not null or undefined\n      assertParamExists('createOrganization', 'organizationCreate', organizationCreate);\n      const localVarPath = `/v2/orgs`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        organizationCreate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Deletes an organization (Permit.io account) and all its related data.\n     * @summary Delete Organization\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteOrganization: async (\n      orgId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('deleteOrganization', 'orgId', orgId);\n      const localVarPath = `/v2/orgs/{org_id}`.replace(\n        `{${'org_id'}}`,\n        encodeURIComponent(String(orgId)),\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.\n     * @summary Get Active Organization\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getActiveOrganization: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n      const localVarPath = `/v2/orgs/active/org`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.\n     * @summary Get Organization\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getOrganization: async (\n      orgId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('getOrganization', 'orgId', orgId);\n      const localVarPath = `/v2/orgs/{org_id}`.replace(\n        `{${'org_id'}}`,\n        encodeURIComponent(String(orgId)),\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Invite new members into the organization.\n     * @summary Invite Members To Organization\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {Array<InviteCreate>} inviteCreate\n     * @param {string} [inviterName]\n     * @param {string} [inviterEmail]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    inviteMembersToOrganization: async (\n      orgId: string,\n      inviteCreate: Array<InviteCreate>,\n      inviterName?: string,\n      inviterEmail?: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('inviteMembersToOrganization', 'orgId', orgId);\n      // verify required parameter 'inviteCreate' is not null or undefined\n      assertParamExists('inviteMembersToOrganization', 'inviteCreate', inviteCreate);\n      const localVarPath = `/v2/orgs/{org_id}/invites`.replace(\n        `{${'org_id'}}`,\n        encodeURIComponent(String(orgId)),\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (inviterName !== undefined) {\n        localVarQueryParameter['inviter_name'] = inviterName;\n      }\n\n      if (inviterEmail !== undefined) {\n        localVarQueryParameter['inviter_email'] = inviterEmail;\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        inviteCreate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Lists pending organization invites\n     * @summary List Organization Invites\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listOrganizationInvites: async (\n      orgId: string,\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('listOrganizationInvites', 'orgId', orgId);\n      const localVarPath = `/v2/orgs/{org_id}/invites`.replace(\n        `{${'org_id'}}`,\n        encodeURIComponent(String(orgId)),\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Lists all the organizations that can be accessed by the authenticated actor (i.e: human team member or api key).\n     * @summary List Organizations\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listOrganizations: async (\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/v2/orgs`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Updates the organization\\'s profile.\n     * @summary Update Organization\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {OrganizationUpdate} organizationUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateOrganization: async (\n      orgId: string,\n      organizationUpdate: OrganizationUpdate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('updateOrganization', 'orgId', orgId);\n      // verify required parameter 'organizationUpdate' is not null or undefined\n      assertParamExists('updateOrganization', 'organizationUpdate', organizationUpdate);\n      const localVarPath = `/v2/orgs/{org_id}`.replace(\n        `{${'org_id'}}`,\n        encodeURIComponent(String(orgId)),\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        organizationUpdate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * OrganizationsApi - functional programming interface\n * @export\n */\nexport const OrganizationsApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = OrganizationsApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * Cancels an invite that was sent to a new member.\n     * @summary Cancel Invite\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} inviteId Id of the invite to cancel\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async cancelInvite(\n      orgId: string,\n      inviteId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.cancelInvite(\n        orgId,\n        inviteId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Creates a new organization that will be owned by the authenticated actor (i.e: human team member or api key).\n     * @summary Create Organization\n     * @param {OrganizationCreate} organizationCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async createOrganization(\n      organizationCreate: OrganizationCreate,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationReadWithAPIKey>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.createOrganization(\n        organizationCreate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Deletes an organization (Permit.io account) and all its related data.\n     * @summary Delete Organization\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async deleteOrganization(\n      orgId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrganization(orgId, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.\n     * @summary Get Active Organization\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getActiveOrganization(\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getActiveOrganization(options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.\n     * @summary Get Organization\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getOrganization(\n      orgId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganization(orgId, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Invite new members into the organization.\n     * @summary Invite Members To Organization\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {Array<InviteCreate>} inviteCreate\n     * @param {string} [inviterName]\n     * @param {string} [inviterEmail]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async inviteMembersToOrganization(\n      orgId: string,\n      inviteCreate: Array<InviteCreate>,\n      inviterName?: string,\n      inviterEmail?: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MultiInviteResult>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.inviteMembersToOrganization(\n        orgId,\n        inviteCreate,\n        inviterName,\n        inviterEmail,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Lists pending organization invites\n     * @summary List Organization Invites\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async listOrganizationInvites(\n      orgId: string,\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InviteRead>>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.listOrganizationInvites(\n        orgId,\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Lists all the organizations that can be accessed by the authenticated actor (i.e: human team member or api key).\n     * @summary List Organizations\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async listOrganizations(\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrganizationRead>>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.listOrganizations(\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Updates the organization\\'s profile.\n     * @summary Update Organization\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {OrganizationUpdate} organizationUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async updateOrganization(\n      orgId: string,\n      organizationUpdate: OrganizationUpdate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrganization(\n        orgId,\n        organizationUpdate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * OrganizationsApi - factory interface\n * @export\n */\nexport const OrganizationsApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = OrganizationsApiFp(configuration);\n  return {\n    /**\n     * Cancels an invite that was sent to a new member.\n     * @summary Cancel Invite\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} inviteId Id of the invite to cancel\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    cancelInvite(orgId: string, inviteId: string, options?: any): AxiosPromise<void> {\n      return localVarFp\n        .cancelInvite(orgId, inviteId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Creates a new organization that will be owned by the authenticated actor (i.e: human team member or api key).\n     * @summary Create Organization\n     * @param {OrganizationCreate} organizationCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createOrganization(\n      organizationCreate: OrganizationCreate,\n      options?: any,\n    ): AxiosPromise<OrganizationReadWithAPIKey> {\n      return localVarFp\n        .createOrganization(organizationCreate, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Deletes an organization (Permit.io account) and all its related data.\n     * @summary Delete Organization\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteOrganization(orgId: string, options?: any): AxiosPromise<void> {\n      return localVarFp\n        .deleteOrganization(orgId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.\n     * @summary Get Active Organization\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getActiveOrganization(options?: any): AxiosPromise<OrganizationRead> {\n      return localVarFp.getActiveOrganization(options).then((request) => request(axios, basePath));\n    },\n    /**\n     * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.\n     * @summary Get Organization\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getOrganization(orgId: string, options?: any): AxiosPromise<OrganizationRead> {\n      return localVarFp.getOrganization(orgId, options).then((request) => request(axios, basePath));\n    },\n    /**\n     * Invite new members into the organization.\n     * @summary Invite Members To Organization\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {Array<InviteCreate>} inviteCreate\n     * @param {string} [inviterName]\n     * @param {string} [inviterEmail]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    inviteMembersToOrganization(\n      orgId: string,\n      inviteCreate: Array<InviteCreate>,\n      inviterName?: string,\n      inviterEmail?: string,\n      options?: any,\n    ): AxiosPromise<MultiInviteResult> {\n      return localVarFp\n        .inviteMembersToOrganization(orgId, inviteCreate, inviterName, inviterEmail, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Lists pending organization invites\n     * @summary List Organization Invites\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listOrganizationInvites(\n      orgId: string,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<Array<InviteRead>> {\n      return localVarFp\n        .listOrganizationInvites(orgId, page, perPage, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Lists all the organizations that can be accessed by the authenticated actor (i.e: human team member or api key).\n     * @summary List Organizations\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listOrganizations(\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<Array<OrganizationRead>> {\n      return localVarFp\n        .listOrganizations(page, perPage, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Updates the organization\\'s profile.\n     * @summary Update Organization\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {OrganizationUpdate} organizationUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateOrganization(\n      orgId: string,\n      organizationUpdate: OrganizationUpdate,\n      options?: any,\n    ): AxiosPromise<OrganizationRead> {\n      return localVarFp\n        .updateOrganization(orgId, organizationUpdate, options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for cancelInvite operation in OrganizationsApi.\n * @export\n * @interface OrganizationsApiCancelInviteRequest\n */\nexport interface OrganizationsApiCancelInviteRequest {\n  /**\n   * Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OrganizationsApiCancelInvite\n   */\n  readonly orgId: string;\n\n  /**\n   * Id of the invite to cancel\n   * @type {string}\n   * @memberof OrganizationsApiCancelInvite\n   */\n  readonly inviteId: string;\n}\n\n/**\n * Request parameters for createOrganization operation in OrganizationsApi.\n * @export\n * @interface OrganizationsApiCreateOrganizationRequest\n */\nexport interface OrganizationsApiCreateOrganizationRequest {\n  /**\n   *\n   * @type {OrganizationCreate}\n   * @memberof OrganizationsApiCreateOrganization\n   */\n  readonly organizationCreate: OrganizationCreate;\n}\n\n/**\n * Request parameters for deleteOrganization operation in OrganizationsApi.\n * @export\n * @interface OrganizationsApiDeleteOrganizationRequest\n */\nexport interface OrganizationsApiDeleteOrganizationRequest {\n  /**\n   * Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OrganizationsApiDeleteOrganization\n   */\n  readonly orgId: string;\n}\n\n/**\n * Request parameters for getOrganization operation in OrganizationsApi.\n * @export\n * @interface OrganizationsApiGetOrganizationRequest\n */\nexport interface OrganizationsApiGetOrganizationRequest {\n  /**\n   * Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OrganizationsApiGetOrganization\n   */\n  readonly orgId: string;\n}\n\n/**\n * Request parameters for inviteMembersToOrganization operation in OrganizationsApi.\n * @export\n * @interface OrganizationsApiInviteMembersToOrganizationRequest\n */\nexport interface OrganizationsApiInviteMembersToOrganizationRequest {\n  /**\n   * Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OrganizationsApiInviteMembersToOrganization\n   */\n  readonly orgId: string;\n\n  /**\n   *\n   * @type {Array<InviteCreate>}\n   * @memberof OrganizationsApiInviteMembersToOrganization\n   */\n  readonly inviteCreate: Array<InviteCreate>;\n\n  /**\n   *\n   * @type {string}\n   * @memberof OrganizationsApiInviteMembersToOrganization\n   */\n  readonly inviterName?: string;\n\n  /**\n   *\n   * @type {string}\n   * @memberof OrganizationsApiInviteMembersToOrganization\n   */\n  readonly inviterEmail?: string;\n}\n\n/**\n * Request parameters for listOrganizationInvites operation in OrganizationsApi.\n * @export\n * @interface OrganizationsApiListOrganizationInvitesRequest\n */\nexport interface OrganizationsApiListOrganizationInvitesRequest {\n  /**\n   * Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OrganizationsApiListOrganizationInvites\n   */\n  readonly orgId: string;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof OrganizationsApiListOrganizationInvites\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof OrganizationsApiListOrganizationInvites\n   */\n  readonly perPage?: number;\n}\n\n/**\n * Request parameters for listOrganizations operation in OrganizationsApi.\n * @export\n * @interface OrganizationsApiListOrganizationsRequest\n */\nexport interface OrganizationsApiListOrganizationsRequest {\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof OrganizationsApiListOrganizations\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof OrganizationsApiListOrganizations\n   */\n  readonly perPage?: number;\n}\n\n/**\n * Request parameters for updateOrganization operation in OrganizationsApi.\n * @export\n * @interface OrganizationsApiUpdateOrganizationRequest\n */\nexport interface OrganizationsApiUpdateOrganizationRequest {\n  /**\n   * Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OrganizationsApiUpdateOrganization\n   */\n  readonly orgId: string;\n\n  /**\n   *\n   * @type {OrganizationUpdate}\n   * @memberof OrganizationsApiUpdateOrganization\n   */\n  readonly organizationUpdate: OrganizationUpdate;\n}\n\n/**\n * OrganizationsApi - object-oriented interface\n * @export\n * @class OrganizationsApi\n * @extends {BaseAPI}\n */\nexport class OrganizationsApi extends BaseAPI {\n  /**\n   * Cancels an invite that was sent to a new member.\n   * @summary Cancel Invite\n   * @param {OrganizationsApiCancelInviteRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OrganizationsApi\n   */\n  public cancelInvite(\n    requestParameters: OrganizationsApiCancelInviteRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return OrganizationsApiFp(this.configuration)\n      .cancelInvite(requestParameters.orgId, requestParameters.inviteId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Creates a new organization that will be owned by the authenticated actor (i.e: human team member or api key).\n   * @summary Create Organization\n   * @param {OrganizationsApiCreateOrganizationRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OrganizationsApi\n   */\n  public createOrganization(\n    requestParameters: OrganizationsApiCreateOrganizationRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return OrganizationsApiFp(this.configuration)\n      .createOrganization(requestParameters.organizationCreate, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Deletes an organization (Permit.io account) and all its related data.\n   * @summary Delete Organization\n   * @param {OrganizationsApiDeleteOrganizationRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OrganizationsApi\n   */\n  public deleteOrganization(\n    requestParameters: OrganizationsApiDeleteOrganizationRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return OrganizationsApiFp(this.configuration)\n      .deleteOrganization(requestParameters.orgId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.\n   * @summary Get Active Organization\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OrganizationsApi\n   */\n  public getActiveOrganization(options?: AxiosRequestConfig) {\n    return OrganizationsApiFp(this.configuration)\n      .getActiveOrganization(options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.\n   * @summary Get Organization\n   * @param {OrganizationsApiGetOrganizationRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OrganizationsApi\n   */\n  public getOrganization(\n    requestParameters: OrganizationsApiGetOrganizationRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return OrganizationsApiFp(this.configuration)\n      .getOrganization(requestParameters.orgId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Invite new members into the organization.\n   * @summary Invite Members To Organization\n   * @param {OrganizationsApiInviteMembersToOrganizationRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OrganizationsApi\n   */\n  public inviteMembersToOrganization(\n    requestParameters: OrganizationsApiInviteMembersToOrganizationRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return OrganizationsApiFp(this.configuration)\n      .inviteMembersToOrganization(\n        requestParameters.orgId,\n        requestParameters.inviteCreate,\n        requestParameters.inviterName,\n        requestParameters.inviterEmail,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Lists pending organization invites\n   * @summary List Organization Invites\n   * @param {OrganizationsApiListOrganizationInvitesRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OrganizationsApi\n   */\n  public listOrganizationInvites(\n    requestParameters: OrganizationsApiListOrganizationInvitesRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return OrganizationsApiFp(this.configuration)\n      .listOrganizationInvites(\n        requestParameters.orgId,\n        requestParameters.page,\n        requestParameters.perPage,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Lists all the organizations that can be accessed by the authenticated actor (i.e: human team member or api key).\n   * @summary List Organizations\n   * @param {OrganizationsApiListOrganizationsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OrganizationsApi\n   */\n  public listOrganizations(\n    requestParameters: OrganizationsApiListOrganizationsRequest = {},\n    options?: AxiosRequestConfig,\n  ) {\n    return OrganizationsApiFp(this.configuration)\n      .listOrganizations(requestParameters.page, requestParameters.perPage, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Updates the organization\\'s profile.\n   * @summary Update Organization\n   * @param {OrganizationsApiUpdateOrganizationRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OrganizationsApi\n   */\n  public updateOrganization(\n    requestParameters: OrganizationsApiUpdateOrganizationRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return OrganizationsApiFp(this.configuration)\n      .updateOrganization(requestParameters.orgId, requestParameters.organizationUpdate, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n// @ts-ignore\nimport { PermitBackendOpalApiDataDataSourceConfig } from '../types';\n/**\n * PolicyApi - axios parameter creator\n * @export\n */\nexport const PolicyApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     *\n     * @summary Get Opal Data Sources\n     * @param {string} [token]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getOpalDataSources: async (\n      token?: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/v2/opal/data/config`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (token !== undefined) {\n        localVarQueryParameter['token'] = token;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get Opal Data Sources\n     * @param {string} [token]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getOpalDataSourcesOpalDataConfigGet: async (\n      token?: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/opal/data/config`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (token !== undefined) {\n        localVarQueryParameter['token'] = token;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * PolicyApi - functional programming interface\n * @export\n */\nexport const PolicyApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = PolicyApiAxiosParamCreator(configuration);\n  return {\n    /**\n     *\n     * @summary Get Opal Data Sources\n     * @param {string} [token]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getOpalDataSources(\n      token?: string,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (\n        axios?: AxiosInstance,\n        basePath?: string,\n      ) => AxiosPromise<PermitBackendOpalApiDataDataSourceConfig>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getOpalDataSources(token, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get Opal Data Sources\n     * @param {string} [token]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getOpalDataSourcesOpalDataConfigGet(\n      token?: string,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (\n        axios?: AxiosInstance,\n        basePath?: string,\n      ) => AxiosPromise<PermitBackendOpalApiDataDataSourceConfig>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getOpalDataSourcesOpalDataConfigGet(\n        token,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * PolicyApi - factory interface\n * @export\n */\nexport const PolicyApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = PolicyApiFp(configuration);\n  return {\n    /**\n     *\n     * @summary Get Opal Data Sources\n     * @param {string} [token]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getOpalDataSources(\n      token?: string,\n      options?: any,\n    ): AxiosPromise<PermitBackendOpalApiDataDataSourceConfig> {\n      return localVarFp\n        .getOpalDataSources(token, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get Opal Data Sources\n     * @param {string} [token]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getOpalDataSourcesOpalDataConfigGet(\n      token?: string,\n      options?: any,\n    ): AxiosPromise<PermitBackendOpalApiDataDataSourceConfig> {\n      return localVarFp\n        .getOpalDataSourcesOpalDataConfigGet(token, options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for getOpalDataSources operation in PolicyApi.\n * @export\n * @interface PolicyApiGetOpalDataSourcesRequest\n */\nexport interface PolicyApiGetOpalDataSourcesRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof PolicyApiGetOpalDataSources\n   */\n  readonly token?: string;\n}\n\n/**\n * Request parameters for getOpalDataSourcesOpalDataConfigGet operation in PolicyApi.\n * @export\n * @interface PolicyApiGetOpalDataSourcesOpalDataConfigGetRequest\n */\nexport interface PolicyApiGetOpalDataSourcesOpalDataConfigGetRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof PolicyApiGetOpalDataSourcesOpalDataConfigGet\n   */\n  readonly token?: string;\n}\n\n/**\n * PolicyApi - object-oriented interface\n * @export\n * @class PolicyApi\n * @extends {BaseAPI}\n */\nexport class PolicyApi extends BaseAPI {\n  /**\n   *\n   * @summary Get Opal Data Sources\n   * @param {PolicyApiGetOpalDataSourcesRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PolicyApi\n   */\n  public getOpalDataSources(\n    requestParameters: PolicyApiGetOpalDataSourcesRequest = {},\n    options?: AxiosRequestConfig,\n  ) {\n    return PolicyApiFp(this.configuration)\n      .getOpalDataSources(requestParameters.token, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get Opal Data Sources\n   * @param {PolicyApiGetOpalDataSourcesOpalDataConfigGetRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PolicyApi\n   */\n  public getOpalDataSourcesOpalDataConfigGet(\n    requestParameters: PolicyApiGetOpalDataSourcesOpalDataConfigGetRequest = {},\n    options?: AxiosRequestConfig,\n  ) {\n    return PolicyApiFp(this.configuration)\n      .getOpalDataSourcesOpalDataConfigGet(requestParameters.token, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { DataUpdateReport } from '../types';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n// @ts-ignore\nimport { PDPConfigRead } from '../types';\n// @ts-ignore\nimport { PDPStateUpdate } from '../types';\n// @ts-ignore\nimport { RemoteConfig } from '../types';\n/**\n * PolicyDecisionPointsApi - axios parameter creator\n * @export\n */\nexport const PolicyDecisionPointsApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     * Gets the configuration values for the currently authenticated PDP container.  The PDP authenticates with an API key scoped to a given Permit.io environment. The system identifies the PDP via its API key and then returns all the configuration values required for the container to run correctly.  The config values returned are considered \\\"overrides\\\", meaning they are overriding any default values given to the container by the user.\n     * @summary Get connected PDP configuration and push state\n     * @param {PDPStateUpdate} pDPStateUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getAuthenticatingPdpConfigValues: async (\n      pDPStateUpdate: PDPStateUpdate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'pDPStateUpdate' is not null or undefined\n      assertParamExists('getAuthenticatingPdpConfigValues', 'pDPStateUpdate', pDPStateUpdate);\n      const localVarPath = `/v2/pdps/me/config`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        pDPStateUpdate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Gets the configuration values for the currently authenticated PDP container.  The PDP authenticates with an API key scoped to a given Permit.io environment. The system identifies the PDP via its API key and then returns all the configuration values required for the container to run correctly.  The config values returned are considered \\\"overrides\\\", meaning they are overriding any default values given to the container by the user.\n     * @summary Get connected PDP configuration\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getAuthenticatingPdpConfigValuesLegacy: async (\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/v2/pdps/me/config`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Gets the configuration values for the PDP container with id `pdp_id`.  The config values returned are considered \\\"overrides\\\", meaning they are overriding any default values given to the container by the user.\n     * @summary Get PDP configuration\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} pdpId The unique id of the pdp\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getPdpConfigValues: async (\n      projId: string,\n      envId: string,\n      pdpId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getPdpConfigValues', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getPdpConfigValues', 'envId', envId);\n      // verify required parameter 'pdpId' is not null or undefined\n      assertParamExists('getPdpConfigValues', 'pdpId', pdpId);\n      const localVarPath = `/v2/pdps/{proj_id}/{env_id}/configs/{pdp_id}/values`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'pdp_id'}}`, encodeURIComponent(String(pdpId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary List PDP configurations\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listPdpConfigs: async (\n      projId: string,\n      envId: string,\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('listPdpConfigs', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('listPdpConfigs', 'envId', envId);\n      const localVarPath = `/v2/pdps/{proj_id}/{env_id}/configs`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Accept a PDP data callback\n     * @param {string} xPermitInstanceId\n     * @param {DataUpdateReport} dataUpdateReport\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    opalDataCallback: async (\n      xPermitInstanceId: string,\n      dataUpdateReport: DataUpdateReport,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'xPermitInstanceId' is not null or undefined\n      assertParamExists('opalDataCallback', 'xPermitInstanceId', xPermitInstanceId);\n      // verify required parameter 'dataUpdateReport' is not null or undefined\n      assertParamExists('opalDataCallback', 'dataUpdateReport', dataUpdateReport);\n      const localVarPath = `/v2/pdps/me/opal_data_callback`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (xPermitInstanceId != null) {\n        localVarHeaderParameter['x-permit-instance-id'] = String(xPermitInstanceId);\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        dataUpdateReport,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Push a PDP state update.\n     * @summary Push PDP state\n     * @param {PDPStateUpdate} pDPStateUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pushPdpState: async (\n      pDPStateUpdate: PDPStateUpdate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'pDPStateUpdate' is not null or undefined\n      assertParamExists('pushPdpState', 'pDPStateUpdate', pDPStateUpdate);\n      const localVarPath = `/v2/pdps/me/state`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        pDPStateUpdate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Rotates the API key of the PDP container with id `pdp_id`.  The rotation of the API key revokes the old API key and issues a new API key to the PDP.\n     * @summary Rotate PDP API Key\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} pdpId The unique id of the pdp\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    rotatePdpApiKey: async (\n      projId: string,\n      envId: string,\n      pdpId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('rotatePdpApiKey', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('rotatePdpApiKey', 'envId', envId);\n      // verify required parameter 'pdpId' is not null or undefined\n      assertParamExists('rotatePdpApiKey', 'pdpId', pdpId);\n      const localVarPath = `/v2/pdps/{proj_id}/{env_id}/configs/{pdp_id}/rotate-api-key`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'pdp_id'}}`, encodeURIComponent(String(pdpId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * PolicyDecisionPointsApi - functional programming interface\n * @export\n */\nexport const PolicyDecisionPointsApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = PolicyDecisionPointsApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * Gets the configuration values for the currently authenticated PDP container.  The PDP authenticates with an API key scoped to a given Permit.io environment. The system identifies the PDP via its API key and then returns all the configuration values required for the container to run correctly.  The config values returned are considered \\\"overrides\\\", meaning they are overriding any default values given to the container by the user.\n     * @summary Get connected PDP configuration and push state\n     * @param {PDPStateUpdate} pDPStateUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getAuthenticatingPdpConfigValues(\n      pDPStateUpdate: PDPStateUpdate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RemoteConfig>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthenticatingPdpConfigValues(\n        pDPStateUpdate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Gets the configuration values for the currently authenticated PDP container.  The PDP authenticates with an API key scoped to a given Permit.io environment. The system identifies the PDP via its API key and then returns all the configuration values required for the container to run correctly.  The config values returned are considered \\\"overrides\\\", meaning they are overriding any default values given to the container by the user.\n     * @summary Get connected PDP configuration\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getAuthenticatingPdpConfigValuesLegacy(\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RemoteConfig>> {\n      const localVarAxiosArgs =\n        await localVarAxiosParamCreator.getAuthenticatingPdpConfigValuesLegacy(options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Gets the configuration values for the PDP container with id `pdp_id`.  The config values returned are considered \\\"overrides\\\", meaning they are overriding any default values given to the container by the user.\n     * @summary Get PDP configuration\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} pdpId The unique id of the pdp\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getPdpConfigValues(\n      projId: string,\n      envId: string,\n      pdpId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RemoteConfig>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getPdpConfigValues(\n        projId,\n        envId,\n        pdpId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary List PDP configurations\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async listPdpConfigs(\n      projId: string,\n      envId: string,\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PDPConfigRead>>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.listPdpConfigs(\n        projId,\n        envId,\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Accept a PDP data callback\n     * @param {string} xPermitInstanceId\n     * @param {DataUpdateReport} dataUpdateReport\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async opalDataCallback(\n      xPermitInstanceId: string,\n      dataUpdateReport: DataUpdateReport,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.opalDataCallback(\n        xPermitInstanceId,\n        dataUpdateReport,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Push a PDP state update.\n     * @summary Push PDP state\n     * @param {PDPStateUpdate} pDPStateUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async pushPdpState(\n      pDPStateUpdate: PDPStateUpdate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.pushPdpState(\n        pDPStateUpdate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Rotates the API key of the PDP container with id `pdp_id`.  The rotation of the API key revokes the old API key and issues a new API key to the PDP.\n     * @summary Rotate PDP API Key\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} pdpId The unique id of the pdp\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async rotatePdpApiKey(\n      projId: string,\n      envId: string,\n      pdpId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PDPConfigRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.rotatePdpApiKey(\n        projId,\n        envId,\n        pdpId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * PolicyDecisionPointsApi - factory interface\n * @export\n */\nexport const PolicyDecisionPointsApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = PolicyDecisionPointsApiFp(configuration);\n  return {\n    /**\n     * Gets the configuration values for the currently authenticated PDP container.  The PDP authenticates with an API key scoped to a given Permit.io environment. The system identifies the PDP via its API key and then returns all the configuration values required for the container to run correctly.  The config values returned are considered \\\"overrides\\\", meaning they are overriding any default values given to the container by the user.\n     * @summary Get connected PDP configuration and push state\n     * @param {PDPStateUpdate} pDPStateUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getAuthenticatingPdpConfigValues(\n      pDPStateUpdate: PDPStateUpdate,\n      options?: any,\n    ): AxiosPromise<RemoteConfig> {\n      return localVarFp\n        .getAuthenticatingPdpConfigValues(pDPStateUpdate, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Gets the configuration values for the currently authenticated PDP container.  The PDP authenticates with an API key scoped to a given Permit.io environment. The system identifies the PDP via its API key and then returns all the configuration values required for the container to run correctly.  The config values returned are considered \\\"overrides\\\", meaning they are overriding any default values given to the container by the user.\n     * @summary Get connected PDP configuration\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getAuthenticatingPdpConfigValuesLegacy(options?: any): AxiosPromise<RemoteConfig> {\n      return localVarFp\n        .getAuthenticatingPdpConfigValuesLegacy(options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Gets the configuration values for the PDP container with id `pdp_id`.  The config values returned are considered \\\"overrides\\\", meaning they are overriding any default values given to the container by the user.\n     * @summary Get PDP configuration\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} pdpId The unique id of the pdp\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getPdpConfigValues(\n      projId: string,\n      envId: string,\n      pdpId: string,\n      options?: any,\n    ): AxiosPromise<RemoteConfig> {\n      return localVarFp\n        .getPdpConfigValues(projId, envId, pdpId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary List PDP configurations\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listPdpConfigs(\n      projId: string,\n      envId: string,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<Array<PDPConfigRead>> {\n      return localVarFp\n        .listPdpConfigs(projId, envId, page, perPage, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Accept a PDP data callback\n     * @param {string} xPermitInstanceId\n     * @param {DataUpdateReport} dataUpdateReport\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    opalDataCallback(\n      xPermitInstanceId: string,\n      dataUpdateReport: DataUpdateReport,\n      options?: any,\n    ): AxiosPromise<void> {\n      return localVarFp\n        .opalDataCallback(xPermitInstanceId, dataUpdateReport, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Push a PDP state update.\n     * @summary Push PDP state\n     * @param {PDPStateUpdate} pDPStateUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pushPdpState(pDPStateUpdate: PDPStateUpdate, options?: any): AxiosPromise<void> {\n      return localVarFp\n        .pushPdpState(pDPStateUpdate, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Rotates the API key of the PDP container with id `pdp_id`.  The rotation of the API key revokes the old API key and issues a new API key to the PDP.\n     * @summary Rotate PDP API Key\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} pdpId The unique id of the pdp\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    rotatePdpApiKey(\n      projId: string,\n      envId: string,\n      pdpId: string,\n      options?: any,\n    ): AxiosPromise<PDPConfigRead> {\n      return localVarFp\n        .rotatePdpApiKey(projId, envId, pdpId, options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for getAuthenticatingPdpConfigValues operation in PolicyDecisionPointsApi.\n * @export\n * @interface PolicyDecisionPointsApiGetAuthenticatingPdpConfigValuesRequest\n */\nexport interface PolicyDecisionPointsApiGetAuthenticatingPdpConfigValuesRequest {\n  /**\n   *\n   * @type {PDPStateUpdate}\n   * @memberof PolicyDecisionPointsApiGetAuthenticatingPdpConfigValues\n   */\n  readonly pDPStateUpdate: PDPStateUpdate;\n}\n\n/**\n * Request parameters for getPdpConfigValues operation in PolicyDecisionPointsApi.\n * @export\n * @interface PolicyDecisionPointsApiGetPdpConfigValuesRequest\n */\nexport interface PolicyDecisionPointsApiGetPdpConfigValuesRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof PolicyDecisionPointsApiGetPdpConfigValues\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof PolicyDecisionPointsApiGetPdpConfigValues\n   */\n  readonly envId: string;\n\n  /**\n   * The unique id of the pdp\n   * @type {string}\n   * @memberof PolicyDecisionPointsApiGetPdpConfigValues\n   */\n  readonly pdpId: string;\n}\n\n/**\n * Request parameters for listPdpConfigs operation in PolicyDecisionPointsApi.\n * @export\n * @interface PolicyDecisionPointsApiListPdpConfigsRequest\n */\nexport interface PolicyDecisionPointsApiListPdpConfigsRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof PolicyDecisionPointsApiListPdpConfigs\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof PolicyDecisionPointsApiListPdpConfigs\n   */\n  readonly envId: string;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof PolicyDecisionPointsApiListPdpConfigs\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof PolicyDecisionPointsApiListPdpConfigs\n   */\n  readonly perPage?: number;\n}\n\n/**\n * Request parameters for opalDataCallback operation in PolicyDecisionPointsApi.\n * @export\n * @interface PolicyDecisionPointsApiOpalDataCallbackRequest\n */\nexport interface PolicyDecisionPointsApiOpalDataCallbackRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof PolicyDecisionPointsApiOpalDataCallback\n   */\n  readonly xPermitInstanceId: string;\n\n  /**\n   *\n   * @type {DataUpdateReport}\n   * @memberof PolicyDecisionPointsApiOpalDataCallback\n   */\n  readonly dataUpdateReport: DataUpdateReport;\n}\n\n/**\n * Request parameters for pushPdpState operation in PolicyDecisionPointsApi.\n * @export\n * @interface PolicyDecisionPointsApiPushPdpStateRequest\n */\nexport interface PolicyDecisionPointsApiPushPdpStateRequest {\n  /**\n   *\n   * @type {PDPStateUpdate}\n   * @memberof PolicyDecisionPointsApiPushPdpState\n   */\n  readonly pDPStateUpdate: PDPStateUpdate;\n}\n\n/**\n * Request parameters for rotatePdpApiKey operation in PolicyDecisionPointsApi.\n * @export\n * @interface PolicyDecisionPointsApiRotatePdpApiKeyRequest\n */\nexport interface PolicyDecisionPointsApiRotatePdpApiKeyRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof PolicyDecisionPointsApiRotatePdpApiKey\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof PolicyDecisionPointsApiRotatePdpApiKey\n   */\n  readonly envId: string;\n\n  /**\n   * The unique id of the pdp\n   * @type {string}\n   * @memberof PolicyDecisionPointsApiRotatePdpApiKey\n   */\n  readonly pdpId: string;\n}\n\n/**\n * PolicyDecisionPointsApi - object-oriented interface\n * @export\n * @class PolicyDecisionPointsApi\n * @extends {BaseAPI}\n */\nexport class PolicyDecisionPointsApi extends BaseAPI {\n  /**\n   * Gets the configuration values for the currently authenticated PDP container.  The PDP authenticates with an API key scoped to a given Permit.io environment. The system identifies the PDP via its API key and then returns all the configuration values required for the container to run correctly.  The config values returned are considered \\\"overrides\\\", meaning they are overriding any default values given to the container by the user.\n   * @summary Get connected PDP configuration and push state\n   * @param {PolicyDecisionPointsApiGetAuthenticatingPdpConfigValuesRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PolicyDecisionPointsApi\n   */\n  public getAuthenticatingPdpConfigValues(\n    requestParameters: PolicyDecisionPointsApiGetAuthenticatingPdpConfigValuesRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return PolicyDecisionPointsApiFp(this.configuration)\n      .getAuthenticatingPdpConfigValues(requestParameters.pDPStateUpdate, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Gets the configuration values for the currently authenticated PDP container.  The PDP authenticates with an API key scoped to a given Permit.io environment. The system identifies the PDP via its API key and then returns all the configuration values required for the container to run correctly.  The config values returned are considered \\\"overrides\\\", meaning they are overriding any default values given to the container by the user.\n   * @summary Get connected PDP configuration\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PolicyDecisionPointsApi\n   */\n  public getAuthenticatingPdpConfigValuesLegacy(options?: AxiosRequestConfig) {\n    return PolicyDecisionPointsApiFp(this.configuration)\n      .getAuthenticatingPdpConfigValuesLegacy(options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Gets the configuration values for the PDP container with id `pdp_id`.  The config values returned are considered \\\"overrides\\\", meaning they are overriding any default values given to the container by the user.\n   * @summary Get PDP configuration\n   * @param {PolicyDecisionPointsApiGetPdpConfigValuesRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PolicyDecisionPointsApi\n   */\n  public getPdpConfigValues(\n    requestParameters: PolicyDecisionPointsApiGetPdpConfigValuesRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return PolicyDecisionPointsApiFp(this.configuration)\n      .getPdpConfigValues(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.pdpId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary List PDP configurations\n   * @param {PolicyDecisionPointsApiListPdpConfigsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PolicyDecisionPointsApi\n   */\n  public listPdpConfigs(\n    requestParameters: PolicyDecisionPointsApiListPdpConfigsRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return PolicyDecisionPointsApiFp(this.configuration)\n      .listPdpConfigs(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.page,\n        requestParameters.perPage,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Accept a PDP data callback\n   * @param {PolicyDecisionPointsApiOpalDataCallbackRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PolicyDecisionPointsApi\n   */\n  public opalDataCallback(\n    requestParameters: PolicyDecisionPointsApiOpalDataCallbackRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return PolicyDecisionPointsApiFp(this.configuration)\n      .opalDataCallback(\n        requestParameters.xPermitInstanceId,\n        requestParameters.dataUpdateReport,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Push a PDP state update.\n   * @summary Push PDP state\n   * @param {PolicyDecisionPointsApiPushPdpStateRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PolicyDecisionPointsApi\n   */\n  public pushPdpState(\n    requestParameters: PolicyDecisionPointsApiPushPdpStateRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return PolicyDecisionPointsApiFp(this.configuration)\n      .pushPdpState(requestParameters.pDPStateUpdate, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Rotates the API key of the PDP container with id `pdp_id`.  The rotation of the API key revokes the old API key and issues a new API key to the PDP.\n   * @summary Rotate PDP API Key\n   * @param {PolicyDecisionPointsApiRotatePdpApiKeyRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PolicyDecisionPointsApi\n   */\n  public rotatePdpApiKey(\n    requestParameters: PolicyDecisionPointsApiRotatePdpApiKeyRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return PolicyDecisionPointsApiFp(this.configuration)\n      .rotatePdpApiKey(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.pdpId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n// @ts-ignore\nimport { PolicyRepoCreate } from '../types';\n// @ts-ignore\nimport { PolicyRepoRead } from '../types';\n// @ts-ignore\nimport { ProjectRead } from '../types';\n/**\n * PolicyGitRepositoriesApi - axios parameter creator\n * @export\n */\nexport const PolicyGitRepositoriesApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     * Disable the currently active policy repo, this action means to turn off the gitops feature. If there is no active policy repo, this action will do nothing.\n     * @summary Activate Policy Repo\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} repoId Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    activatePolicyRepo: async (\n      projId: string,\n      repoId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('activatePolicyRepo', 'projId', projId);\n      // verify required parameter 'repoId' is not null or undefined\n      assertParamExists('activatePolicyRepo', 'repoId', repoId);\n      const localVarPath = `/v2/projects/{proj_id}/repos/{repo_id}/activate`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'repo_id'}}`, encodeURIComponent(String(repoId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Creates a new policy repository configuration under a given project. The given repository is created with status \\'pending\\', it will be changed and used as the \\'active\\' repository for the policy only after a successful attempt to use it. The repository main branch must be present in the remote.\n     * @summary Create Policy Repo\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {PolicyRepoCreate} policyRepoCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createPolicyRepo: async (\n      projId: string,\n      policyRepoCreate: PolicyRepoCreate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('createPolicyRepo', 'projId', projId);\n      // verify required parameter 'policyRepoCreate' is not null or undefined\n      assertParamExists('createPolicyRepo', 'policyRepoCreate', policyRepoCreate);\n      const localVarPath = `/v2/projects/{proj_id}/repos`.replace(\n        `{${'proj_id'}}`,\n        encodeURIComponent(String(projId)),\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        policyRepoCreate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Deletes an environment and all its related data.\n     * @summary Delete Policy Repo\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} repoId Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deletePolicyRepo: async (\n      projId: string,\n      repoId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('deletePolicyRepo', 'projId', projId);\n      // verify required parameter 'repoId' is not null or undefined\n      assertParamExists('deletePolicyRepo', 'repoId', repoId);\n      const localVarPath = `/v2/projects/{proj_id}/repos/{repo_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'repo_id'}}`, encodeURIComponent(String(repoId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Disable the currently active policy repo, this action means to turn off the gitops feature. If there is no active policy repo, this action will do nothing.\n     * @summary Disable Active Policy Repo\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    disableActivePolicyRepo: async (\n      projId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('disableActivePolicyRepo', 'projId', projId);\n      const localVarPath = `/v2/projects/{proj_id}/repos/disable`.replace(\n        `{${'proj_id'}}`,\n        encodeURIComponent(String(projId)),\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Gets the currently active repository, if such repository exists.\n     * @summary Get Active Policy Repo\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getActivePolicyRepo: async (\n      projId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getActivePolicyRepo', 'projId', projId);\n      const localVarPath = `/v2/projects/{proj_id}/repos/active`.replace(\n        `{${'proj_id'}}`,\n        encodeURIComponent(String(projId)),\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Gets a single repository matching the given repo_id, if such repository exists.\n     * @summary Get Policy Repo\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} repoId Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getPolicyRepo: async (\n      projId: string,\n      repoId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getPolicyRepo', 'projId', projId);\n      // verify required parameter 'repoId' is not null or undefined\n      assertParamExists('getPolicyRepo', 'repoId', repoId);\n      const localVarPath = `/v2/projects/{proj_id}/repos/{repo_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'repo_id'}}`, encodeURIComponent(String(repoId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Lists all the policy repositories under a given project.\n     * @summary List Policy Repos\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listPolicyRepos: async (\n      projId: string,\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('listPolicyRepos', 'projId', projId);\n      const localVarPath = `/v2/projects/{proj_id}/repos`.replace(\n        `{${'proj_id'}}`,\n        encodeURIComponent(String(projId)),\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * PolicyGitRepositoriesApi - functional programming interface\n * @export\n */\nexport const PolicyGitRepositoriesApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = PolicyGitRepositoriesApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * Disable the currently active policy repo, this action means to turn off the gitops feature. If there is no active policy repo, this action will do nothing.\n     * @summary Activate Policy Repo\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} repoId Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async activatePolicyRepo(\n      projId: string,\n      repoId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.activatePolicyRepo(\n        projId,\n        repoId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Creates a new policy repository configuration under a given project. The given repository is created with status \\'pending\\', it will be changed and used as the \\'active\\' repository for the policy only after a successful attempt to use it. The repository main branch must be present in the remote.\n     * @summary Create Policy Repo\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {PolicyRepoCreate} policyRepoCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async createPolicyRepo(\n      projId: string,\n      policyRepoCreate: PolicyRepoCreate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyRepoRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.createPolicyRepo(\n        projId,\n        policyRepoCreate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Deletes an environment and all its related data.\n     * @summary Delete Policy Repo\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} repoId Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async deletePolicyRepo(\n      projId: string,\n      repoId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.deletePolicyRepo(\n        projId,\n        repoId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Disable the currently active policy repo, this action means to turn off the gitops feature. If there is no active policy repo, this action will do nothing.\n     * @summary Disable Active Policy Repo\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async disableActivePolicyRepo(\n      projId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.disableActivePolicyRepo(\n        projId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Gets the currently active repository, if such repository exists.\n     * @summary Get Active Policy Repo\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getActivePolicyRepo(\n      projId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyRepoRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getActivePolicyRepo(\n        projId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Gets a single repository matching the given repo_id, if such repository exists.\n     * @summary Get Policy Repo\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} repoId Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getPolicyRepo(\n      projId: string,\n      repoId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyRepoRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getPolicyRepo(\n        projId,\n        repoId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Lists all the policy repositories under a given project.\n     * @summary List Policy Repos\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async listPolicyRepos(\n      projId: string,\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PolicyRepoRead>>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.listPolicyRepos(\n        projId,\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * PolicyGitRepositoriesApi - factory interface\n * @export\n */\nexport const PolicyGitRepositoriesApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = PolicyGitRepositoriesApiFp(configuration);\n  return {\n    /**\n     * Disable the currently active policy repo, this action means to turn off the gitops feature. If there is no active policy repo, this action will do nothing.\n     * @summary Activate Policy Repo\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} repoId Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    activatePolicyRepo(projId: string, repoId: string, options?: any): AxiosPromise<ProjectRead> {\n      return localVarFp\n        .activatePolicyRepo(projId, repoId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Creates a new policy repository configuration under a given project. The given repository is created with status \\'pending\\', it will be changed and used as the \\'active\\' repository for the policy only after a successful attempt to use it. The repository main branch must be present in the remote.\n     * @summary Create Policy Repo\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {PolicyRepoCreate} policyRepoCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createPolicyRepo(\n      projId: string,\n      policyRepoCreate: PolicyRepoCreate,\n      options?: any,\n    ): AxiosPromise<PolicyRepoRead> {\n      return localVarFp\n        .createPolicyRepo(projId, policyRepoCreate, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Deletes an environment and all its related data.\n     * @summary Delete Policy Repo\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} repoId Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deletePolicyRepo(projId: string, repoId: string, options?: any): AxiosPromise<void> {\n      return localVarFp\n        .deletePolicyRepo(projId, repoId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Disable the currently active policy repo, this action means to turn off the gitops feature. If there is no active policy repo, this action will do nothing.\n     * @summary Disable Active Policy Repo\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    disableActivePolicyRepo(projId: string, options?: any): AxiosPromise<ProjectRead> {\n      return localVarFp\n        .disableActivePolicyRepo(projId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Gets the currently active repository, if such repository exists.\n     * @summary Get Active Policy Repo\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getActivePolicyRepo(projId: string, options?: any): AxiosPromise<PolicyRepoRead> {\n      return localVarFp\n        .getActivePolicyRepo(projId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Gets a single repository matching the given repo_id, if such repository exists.\n     * @summary Get Policy Repo\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} repoId Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getPolicyRepo(projId: string, repoId: string, options?: any): AxiosPromise<PolicyRepoRead> {\n      return localVarFp\n        .getPolicyRepo(projId, repoId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Lists all the policy repositories under a given project.\n     * @summary List Policy Repos\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listPolicyRepos(\n      projId: string,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<Array<PolicyRepoRead>> {\n      return localVarFp\n        .listPolicyRepos(projId, page, perPage, options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for activatePolicyRepo operation in PolicyGitRepositoriesApi.\n * @export\n * @interface PolicyGitRepositoriesApiActivatePolicyRepoRequest\n */\nexport interface PolicyGitRepositoriesApiActivatePolicyRepoRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof PolicyGitRepositoriesApiActivatePolicyRepo\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof PolicyGitRepositoriesApiActivatePolicyRepo\n   */\n  readonly repoId: string;\n}\n\n/**\n * Request parameters for createPolicyRepo operation in PolicyGitRepositoriesApi.\n * @export\n * @interface PolicyGitRepositoriesApiCreatePolicyRepoRequest\n */\nexport interface PolicyGitRepositoriesApiCreatePolicyRepoRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof PolicyGitRepositoriesApiCreatePolicyRepo\n   */\n  readonly projId: string;\n\n  /**\n   *\n   * @type {PolicyRepoCreate}\n   * @memberof PolicyGitRepositoriesApiCreatePolicyRepo\n   */\n  readonly policyRepoCreate: PolicyRepoCreate;\n}\n\n/**\n * Request parameters for deletePolicyRepo operation in PolicyGitRepositoriesApi.\n * @export\n * @interface PolicyGitRepositoriesApiDeletePolicyRepoRequest\n */\nexport interface PolicyGitRepositoriesApiDeletePolicyRepoRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof PolicyGitRepositoriesApiDeletePolicyRepo\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof PolicyGitRepositoriesApiDeletePolicyRepo\n   */\n  readonly repoId: string;\n}\n\n/**\n * Request parameters for disableActivePolicyRepo operation in PolicyGitRepositoriesApi.\n * @export\n * @interface PolicyGitRepositoriesApiDisableActivePolicyRepoRequest\n */\nexport interface PolicyGitRepositoriesApiDisableActivePolicyRepoRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof PolicyGitRepositoriesApiDisableActivePolicyRepo\n   */\n  readonly projId: string;\n}\n\n/**\n * Request parameters for getActivePolicyRepo operation in PolicyGitRepositoriesApi.\n * @export\n * @interface PolicyGitRepositoriesApiGetActivePolicyRepoRequest\n */\nexport interface PolicyGitRepositoriesApiGetActivePolicyRepoRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof PolicyGitRepositoriesApiGetActivePolicyRepo\n   */\n  readonly projId: string;\n}\n\n/**\n * Request parameters for getPolicyRepo operation in PolicyGitRepositoriesApi.\n * @export\n * @interface PolicyGitRepositoriesApiGetPolicyRepoRequest\n */\nexport interface PolicyGitRepositoriesApiGetPolicyRepoRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof PolicyGitRepositoriesApiGetPolicyRepo\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof PolicyGitRepositoriesApiGetPolicyRepo\n   */\n  readonly repoId: string;\n}\n\n/**\n * Request parameters for listPolicyRepos operation in PolicyGitRepositoriesApi.\n * @export\n * @interface PolicyGitRepositoriesApiListPolicyReposRequest\n */\nexport interface PolicyGitRepositoriesApiListPolicyReposRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof PolicyGitRepositoriesApiListPolicyRepos\n   */\n  readonly projId: string;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof PolicyGitRepositoriesApiListPolicyRepos\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof PolicyGitRepositoriesApiListPolicyRepos\n   */\n  readonly perPage?: number;\n}\n\n/**\n * PolicyGitRepositoriesApi - object-oriented interface\n * @export\n * @class PolicyGitRepositoriesApi\n * @extends {BaseAPI}\n */\nexport class PolicyGitRepositoriesApi extends BaseAPI {\n  /**\n   * Disable the currently active policy repo, this action means to turn off the gitops feature. If there is no active policy repo, this action will do nothing.\n   * @summary Activate Policy Repo\n   * @param {PolicyGitRepositoriesApiActivatePolicyRepoRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PolicyGitRepositoriesApi\n   */\n  public activatePolicyRepo(\n    requestParameters: PolicyGitRepositoriesApiActivatePolicyRepoRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return PolicyGitRepositoriesApiFp(this.configuration)\n      .activatePolicyRepo(requestParameters.projId, requestParameters.repoId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Creates a new policy repository configuration under a given project. The given repository is created with status \\'pending\\', it will be changed and used as the \\'active\\' repository for the policy only after a successful attempt to use it. The repository main branch must be present in the remote.\n   * @summary Create Policy Repo\n   * @param {PolicyGitRepositoriesApiCreatePolicyRepoRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PolicyGitRepositoriesApi\n   */\n  public createPolicyRepo(\n    requestParameters: PolicyGitRepositoriesApiCreatePolicyRepoRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return PolicyGitRepositoriesApiFp(this.configuration)\n      .createPolicyRepo(requestParameters.projId, requestParameters.policyRepoCreate, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Deletes an environment and all its related data.\n   * @summary Delete Policy Repo\n   * @param {PolicyGitRepositoriesApiDeletePolicyRepoRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PolicyGitRepositoriesApi\n   */\n  public deletePolicyRepo(\n    requestParameters: PolicyGitRepositoriesApiDeletePolicyRepoRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return PolicyGitRepositoriesApiFp(this.configuration)\n      .deletePolicyRepo(requestParameters.projId, requestParameters.repoId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Disable the currently active policy repo, this action means to turn off the gitops feature. If there is no active policy repo, this action will do nothing.\n   * @summary Disable Active Policy Repo\n   * @param {PolicyGitRepositoriesApiDisableActivePolicyRepoRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PolicyGitRepositoriesApi\n   */\n  public disableActivePolicyRepo(\n    requestParameters: PolicyGitRepositoriesApiDisableActivePolicyRepoRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return PolicyGitRepositoriesApiFp(this.configuration)\n      .disableActivePolicyRepo(requestParameters.projId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Gets the currently active repository, if such repository exists.\n   * @summary Get Active Policy Repo\n   * @param {PolicyGitRepositoriesApiGetActivePolicyRepoRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PolicyGitRepositoriesApi\n   */\n  public getActivePolicyRepo(\n    requestParameters: PolicyGitRepositoriesApiGetActivePolicyRepoRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return PolicyGitRepositoriesApiFp(this.configuration)\n      .getActivePolicyRepo(requestParameters.projId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Gets a single repository matching the given repo_id, if such repository exists.\n   * @summary Get Policy Repo\n   * @param {PolicyGitRepositoriesApiGetPolicyRepoRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PolicyGitRepositoriesApi\n   */\n  public getPolicyRepo(\n    requestParameters: PolicyGitRepositoriesApiGetPolicyRepoRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return PolicyGitRepositoriesApiFp(this.configuration)\n      .getPolicyRepo(requestParameters.projId, requestParameters.repoId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Lists all the policy repositories under a given project.\n   * @summary List Policy Repos\n   * @param {PolicyGitRepositoriesApiListPolicyReposRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PolicyGitRepositoriesApi\n   */\n  public listPolicyRepos(\n    requestParameters: PolicyGitRepositoriesApiListPolicyReposRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return PolicyGitRepositoriesApiFp(this.configuration)\n      .listPolicyRepos(\n        requestParameters.projId,\n        requestParameters.page,\n        requestParameters.perPage,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n// @ts-ignore\nimport { ProjectCreate } from '../types';\n// @ts-ignore\nimport { ProjectRead } from '../types';\n// @ts-ignore\nimport { ProjectUpdate } from '../types';\n/**\n * ProjectsApi - axios parameter creator\n * @export\n */\nexport const ProjectsApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     * Creates a new project under the active organization.\n     * @summary Create Project\n     * @param {ProjectCreate} projectCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createProject: async (\n      projectCreate: ProjectCreate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projectCreate' is not null or undefined\n      assertParamExists('createProject', 'projectCreate', projectCreate);\n      const localVarPath = `/v2/projects`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        projectCreate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Deletes the project and all its related data.\n     * @summary Delete Project\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteProject: async (\n      projId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('deleteProject', 'projId', projId);\n      const localVarPath = `/v2/projects/{proj_id}`.replace(\n        `{${'proj_id'}}`,\n        encodeURIComponent(String(projId)),\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Gets a single project matching the given proj_id, if such project exists.\n     * @summary Get Project\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getProject: async (projId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getProject', 'projId', projId);\n      const localVarPath = `/v2/projects/{proj_id}`.replace(\n        `{${'proj_id'}}`,\n        encodeURIComponent(String(projId)),\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Lists all the projects under the active organization.\n     * @summary List Projects\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listProjects: async (\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/v2/projects`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Updates the project.\n     * @summary Update Project\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {ProjectUpdate} projectUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateProject: async (\n      projId: string,\n      projectUpdate: ProjectUpdate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('updateProject', 'projId', projId);\n      // verify required parameter 'projectUpdate' is not null or undefined\n      assertParamExists('updateProject', 'projectUpdate', projectUpdate);\n      const localVarPath = `/v2/projects/{proj_id}`.replace(\n        `{${'proj_id'}}`,\n        encodeURIComponent(String(projId)),\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        projectUpdate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * ProjectsApi - functional programming interface\n * @export\n */\nexport const ProjectsApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = ProjectsApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * Creates a new project under the active organization.\n     * @summary Create Project\n     * @param {ProjectCreate} projectCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async createProject(\n      projectCreate: ProjectCreate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.createProject(\n        projectCreate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Deletes the project and all its related data.\n     * @summary Delete Project\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async deleteProject(\n      projId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProject(projId, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Gets a single project matching the given proj_id, if such project exists.\n     * @summary Get Project\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getProject(\n      projId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getProject(projId, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Lists all the projects under the active organization.\n     * @summary List Projects\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async listProjects(\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProjectRead>>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.listProjects(\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Updates the project.\n     * @summary Update Project\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {ProjectUpdate} projectUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async updateProject(\n      projId: string,\n      projectUpdate: ProjectUpdate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.updateProject(\n        projId,\n        projectUpdate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * ProjectsApi - factory interface\n * @export\n */\nexport const ProjectsApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = ProjectsApiFp(configuration);\n  return {\n    /**\n     * Creates a new project under the active organization.\n     * @summary Create Project\n     * @param {ProjectCreate} projectCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createProject(projectCreate: ProjectCreate, options?: any): AxiosPromise<ProjectRead> {\n      return localVarFp\n        .createProject(projectCreate, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Deletes the project and all its related data.\n     * @summary Delete Project\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteProject(projId: string, options?: any): AxiosPromise<void> {\n      return localVarFp.deleteProject(projId, options).then((request) => request(axios, basePath));\n    },\n    /**\n     * Gets a single project matching the given proj_id, if such project exists.\n     * @summary Get Project\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getProject(projId: string, options?: any): AxiosPromise<ProjectRead> {\n      return localVarFp.getProject(projId, options).then((request) => request(axios, basePath));\n    },\n    /**\n     * Lists all the projects under the active organization.\n     * @summary List Projects\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listProjects(page?: number, perPage?: number, options?: any): AxiosPromise<Array<ProjectRead>> {\n      return localVarFp\n        .listProjects(page, perPage, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Updates the project.\n     * @summary Update Project\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {ProjectUpdate} projectUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateProject(\n      projId: string,\n      projectUpdate: ProjectUpdate,\n      options?: any,\n    ): AxiosPromise<ProjectRead> {\n      return localVarFp\n        .updateProject(projId, projectUpdate, options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for createProject operation in ProjectsApi.\n * @export\n * @interface ProjectsApiCreateProjectRequest\n */\nexport interface ProjectsApiCreateProjectRequest {\n  /**\n   *\n   * @type {ProjectCreate}\n   * @memberof ProjectsApiCreateProject\n   */\n  readonly projectCreate: ProjectCreate;\n}\n\n/**\n * Request parameters for deleteProject operation in ProjectsApi.\n * @export\n * @interface ProjectsApiDeleteProjectRequest\n */\nexport interface ProjectsApiDeleteProjectRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ProjectsApiDeleteProject\n   */\n  readonly projId: string;\n}\n\n/**\n * Request parameters for getProject operation in ProjectsApi.\n * @export\n * @interface ProjectsApiGetProjectRequest\n */\nexport interface ProjectsApiGetProjectRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ProjectsApiGetProject\n   */\n  readonly projId: string;\n}\n\n/**\n * Request parameters for listProjects operation in ProjectsApi.\n * @export\n * @interface ProjectsApiListProjectsRequest\n */\nexport interface ProjectsApiListProjectsRequest {\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof ProjectsApiListProjects\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof ProjectsApiListProjects\n   */\n  readonly perPage?: number;\n}\n\n/**\n * Request parameters for updateProject operation in ProjectsApi.\n * @export\n * @interface ProjectsApiUpdateProjectRequest\n */\nexport interface ProjectsApiUpdateProjectRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ProjectsApiUpdateProject\n   */\n  readonly projId: string;\n\n  /**\n   *\n   * @type {ProjectUpdate}\n   * @memberof ProjectsApiUpdateProject\n   */\n  readonly projectUpdate: ProjectUpdate;\n}\n\n/**\n * ProjectsApi - object-oriented interface\n * @export\n * @class ProjectsApi\n * @extends {BaseAPI}\n */\nexport class ProjectsApi extends BaseAPI {\n  /**\n   * Creates a new project under the active organization.\n   * @summary Create Project\n   * @param {ProjectsApiCreateProjectRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ProjectsApi\n   */\n  public createProject(\n    requestParameters: ProjectsApiCreateProjectRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ProjectsApiFp(this.configuration)\n      .createProject(requestParameters.projectCreate, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Deletes the project and all its related data.\n   * @summary Delete Project\n   * @param {ProjectsApiDeleteProjectRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ProjectsApi\n   */\n  public deleteProject(\n    requestParameters: ProjectsApiDeleteProjectRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ProjectsApiFp(this.configuration)\n      .deleteProject(requestParameters.projId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Gets a single project matching the given proj_id, if such project exists.\n   * @summary Get Project\n   * @param {ProjectsApiGetProjectRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ProjectsApi\n   */\n  public getProject(requestParameters: ProjectsApiGetProjectRequest, options?: AxiosRequestConfig) {\n    return ProjectsApiFp(this.configuration)\n      .getProject(requestParameters.projId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Lists all the projects under the active organization.\n   * @summary List Projects\n   * @param {ProjectsApiListProjectsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ProjectsApi\n   */\n  public listProjects(\n    requestParameters: ProjectsApiListProjectsRequest = {},\n    options?: AxiosRequestConfig,\n  ) {\n    return ProjectsApiFp(this.configuration)\n      .listProjects(requestParameters.page, requestParameters.perPage, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Updates the project.\n   * @summary Update Project\n   * @param {ProjectsApiUpdateProjectRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ProjectsApi\n   */\n  public updateProject(\n    requestParameters: ProjectsApiUpdateProjectRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ProjectsApiFp(this.configuration)\n      .updateProject(requestParameters.projId, requestParameters.projectUpdate, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n// @ts-ignore\nimport { ProxyConfigCreate } from '../types';\n// @ts-ignore\nimport { ProxyConfigRead } from '../types';\n// @ts-ignore\nimport { ProxyConfigUpdate } from '../types';\n/**\n * ProxyConfigApi - axios parameter creator\n * @export\n */\nexport const ProxyConfigApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     * Creates a new proxy config inside the Permit.io system.  If the proxy config is already created: will return 200 instead of 201, and will return the existing proxy config object in the response body.\n     * @summary Create Proxy Config\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ProxyConfigCreate} proxyConfigCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createProxyConfig: async (\n      projId: string,\n      envId: string,\n      proxyConfigCreate: ProxyConfigCreate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('createProxyConfig', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('createProxyConfig', 'envId', envId);\n      // verify required parameter 'proxyConfigCreate' is not null or undefined\n      assertParamExists('createProxyConfig', 'proxyConfigCreate', proxyConfigCreate);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/proxy_configs`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        proxyConfigCreate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Deletes the proxy config and all its related data.\n     * @summary Delete Proxy Config\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} proxyConfigId Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteProxyConfig: async (\n      projId: string,\n      envId: string,\n      proxyConfigId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('deleteProxyConfig', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('deleteProxyConfig', 'envId', envId);\n      // verify required parameter 'proxyConfigId' is not null or undefined\n      assertParamExists('deleteProxyConfig', 'proxyConfigId', proxyConfigId);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/proxy_configs/{proxy_config_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'proxy_config_id'}}`, encodeURIComponent(String(proxyConfigId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Gets a proxy config, if such proxy config exists. Otherwise returns 404.\n     * @summary Get Proxy Config\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} proxyConfigId Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getProxyConfig: async (\n      projId: string,\n      envId: string,\n      proxyConfigId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getProxyConfig', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getProxyConfig', 'envId', envId);\n      // verify required parameter 'proxyConfigId' is not null or undefined\n      assertParamExists('getProxyConfig', 'proxyConfigId', proxyConfigId);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/proxy_configs/{proxy_config_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'proxy_config_id'}}`, encodeURIComponent(String(proxyConfigId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Lists all the proxy configs defined within an environment.\n     * @summary List Proxy Configs\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listProxyConfigs: async (\n      projId: string,\n      envId: string,\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('listProxyConfigs', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('listProxyConfigs', 'envId', envId);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/proxy_configs`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Partially updates the proxy config definition. Fields that will be provided will be completely overwritten.\n     * @summary Update Proxy Config\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} proxyConfigId Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the \\&quot;slug\\&quot;).\n     * @param {ProxyConfigUpdate} proxyConfigUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateProxyConfig: async (\n      projId: string,\n      envId: string,\n      proxyConfigId: string,\n      proxyConfigUpdate: ProxyConfigUpdate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('updateProxyConfig', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('updateProxyConfig', 'envId', envId);\n      // verify required parameter 'proxyConfigId' is not null or undefined\n      assertParamExists('updateProxyConfig', 'proxyConfigId', proxyConfigId);\n      // verify required parameter 'proxyConfigUpdate' is not null or undefined\n      assertParamExists('updateProxyConfig', 'proxyConfigUpdate', proxyConfigUpdate);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/proxy_configs/{proxy_config_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'proxy_config_id'}}`, encodeURIComponent(String(proxyConfigId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        proxyConfigUpdate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * ProxyConfigApi - functional programming interface\n * @export\n */\nexport const ProxyConfigApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = ProxyConfigApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * Creates a new proxy config inside the Permit.io system.  If the proxy config is already created: will return 200 instead of 201, and will return the existing proxy config object in the response body.\n     * @summary Create Proxy Config\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ProxyConfigCreate} proxyConfigCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async createProxyConfig(\n      projId: string,\n      envId: string,\n      proxyConfigCreate: ProxyConfigCreate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProxyConfigRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.createProxyConfig(\n        projId,\n        envId,\n        proxyConfigCreate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Deletes the proxy config and all its related data.\n     * @summary Delete Proxy Config\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} proxyConfigId Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async deleteProxyConfig(\n      projId: string,\n      envId: string,\n      proxyConfigId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProxyConfig(\n        projId,\n        envId,\n        proxyConfigId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Gets a proxy config, if such proxy config exists. Otherwise returns 404.\n     * @summary Get Proxy Config\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} proxyConfigId Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getProxyConfig(\n      projId: string,\n      envId: string,\n      proxyConfigId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProxyConfigRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getProxyConfig(\n        projId,\n        envId,\n        proxyConfigId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Lists all the proxy configs defined within an environment.\n     * @summary List Proxy Configs\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async listProxyConfigs(\n      projId: string,\n      envId: string,\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProxyConfigRead>>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.listProxyConfigs(\n        projId,\n        envId,\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Partially updates the proxy config definition. Fields that will be provided will be completely overwritten.\n     * @summary Update Proxy Config\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} proxyConfigId Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the \\&quot;slug\\&quot;).\n     * @param {ProxyConfigUpdate} proxyConfigUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async updateProxyConfig(\n      projId: string,\n      envId: string,\n      proxyConfigId: string,\n      proxyConfigUpdate: ProxyConfigUpdate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProxyConfigRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.updateProxyConfig(\n        projId,\n        envId,\n        proxyConfigId,\n        proxyConfigUpdate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * ProxyConfigApi - factory interface\n * @export\n */\nexport const ProxyConfigApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = ProxyConfigApiFp(configuration);\n  return {\n    /**\n     * Creates a new proxy config inside the Permit.io system.  If the proxy config is already created: will return 200 instead of 201, and will return the existing proxy config object in the response body.\n     * @summary Create Proxy Config\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ProxyConfigCreate} proxyConfigCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createProxyConfig(\n      projId: string,\n      envId: string,\n      proxyConfigCreate: ProxyConfigCreate,\n      options?: any,\n    ): AxiosPromise<ProxyConfigRead> {\n      return localVarFp\n        .createProxyConfig(projId, envId, proxyConfigCreate, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Deletes the proxy config and all its related data.\n     * @summary Delete Proxy Config\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} proxyConfigId Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteProxyConfig(\n      projId: string,\n      envId: string,\n      proxyConfigId: string,\n      options?: any,\n    ): AxiosPromise<void> {\n      return localVarFp\n        .deleteProxyConfig(projId, envId, proxyConfigId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Gets a proxy config, if such proxy config exists. Otherwise returns 404.\n     * @summary Get Proxy Config\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} proxyConfigId Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getProxyConfig(\n      projId: string,\n      envId: string,\n      proxyConfigId: string,\n      options?: any,\n    ): AxiosPromise<ProxyConfigRead> {\n      return localVarFp\n        .getProxyConfig(projId, envId, proxyConfigId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Lists all the proxy configs defined within an environment.\n     * @summary List Proxy Configs\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listProxyConfigs(\n      projId: string,\n      envId: string,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<Array<ProxyConfigRead>> {\n      return localVarFp\n        .listProxyConfigs(projId, envId, page, perPage, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Partially updates the proxy config definition. Fields that will be provided will be completely overwritten.\n     * @summary Update Proxy Config\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} proxyConfigId Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the \\&quot;slug\\&quot;).\n     * @param {ProxyConfigUpdate} proxyConfigUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateProxyConfig(\n      projId: string,\n      envId: string,\n      proxyConfigId: string,\n      proxyConfigUpdate: ProxyConfigUpdate,\n      options?: any,\n    ): AxiosPromise<ProxyConfigRead> {\n      return localVarFp\n        .updateProxyConfig(projId, envId, proxyConfigId, proxyConfigUpdate, options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for createProxyConfig operation in ProxyConfigApi.\n * @export\n * @interface ProxyConfigApiCreateProxyConfigRequest\n */\nexport interface ProxyConfigApiCreateProxyConfigRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ProxyConfigApiCreateProxyConfig\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ProxyConfigApiCreateProxyConfig\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {ProxyConfigCreate}\n   * @memberof ProxyConfigApiCreateProxyConfig\n   */\n  readonly proxyConfigCreate: ProxyConfigCreate;\n}\n\n/**\n * Request parameters for deleteProxyConfig operation in ProxyConfigApi.\n * @export\n * @interface ProxyConfigApiDeleteProxyConfigRequest\n */\nexport interface ProxyConfigApiDeleteProxyConfigRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ProxyConfigApiDeleteProxyConfig\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ProxyConfigApiDeleteProxyConfig\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ProxyConfigApiDeleteProxyConfig\n   */\n  readonly proxyConfigId: string;\n}\n\n/**\n * Request parameters for getProxyConfig operation in ProxyConfigApi.\n * @export\n * @interface ProxyConfigApiGetProxyConfigRequest\n */\nexport interface ProxyConfigApiGetProxyConfigRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ProxyConfigApiGetProxyConfig\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ProxyConfigApiGetProxyConfig\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ProxyConfigApiGetProxyConfig\n   */\n  readonly proxyConfigId: string;\n}\n\n/**\n * Request parameters for listProxyConfigs operation in ProxyConfigApi.\n * @export\n * @interface ProxyConfigApiListProxyConfigsRequest\n */\nexport interface ProxyConfigApiListProxyConfigsRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ProxyConfigApiListProxyConfigs\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ProxyConfigApiListProxyConfigs\n   */\n  readonly envId: string;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof ProxyConfigApiListProxyConfigs\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof ProxyConfigApiListProxyConfigs\n   */\n  readonly perPage?: number;\n}\n\n/**\n * Request parameters for updateProxyConfig operation in ProxyConfigApi.\n * @export\n * @interface ProxyConfigApiUpdateProxyConfigRequest\n */\nexport interface ProxyConfigApiUpdateProxyConfigRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ProxyConfigApiUpdateProxyConfig\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ProxyConfigApiUpdateProxyConfig\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ProxyConfigApiUpdateProxyConfig\n   */\n  readonly proxyConfigId: string;\n\n  /**\n   *\n   * @type {ProxyConfigUpdate}\n   * @memberof ProxyConfigApiUpdateProxyConfig\n   */\n  readonly proxyConfigUpdate: ProxyConfigUpdate;\n}\n\n/**\n * ProxyConfigApi - object-oriented interface\n * @export\n * @class ProxyConfigApi\n * @extends {BaseAPI}\n */\nexport class ProxyConfigApi extends BaseAPI {\n  /**\n   * Creates a new proxy config inside the Permit.io system.  If the proxy config is already created: will return 200 instead of 201, and will return the existing proxy config object in the response body.\n   * @summary Create Proxy Config\n   * @param {ProxyConfigApiCreateProxyConfigRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ProxyConfigApi\n   */\n  public createProxyConfig(\n    requestParameters: ProxyConfigApiCreateProxyConfigRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ProxyConfigApiFp(this.configuration)\n      .createProxyConfig(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.proxyConfigCreate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Deletes the proxy config and all its related data.\n   * @summary Delete Proxy Config\n   * @param {ProxyConfigApiDeleteProxyConfigRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ProxyConfigApi\n   */\n  public deleteProxyConfig(\n    requestParameters: ProxyConfigApiDeleteProxyConfigRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ProxyConfigApiFp(this.configuration)\n      .deleteProxyConfig(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.proxyConfigId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Gets a proxy config, if such proxy config exists. Otherwise returns 404.\n   * @summary Get Proxy Config\n   * @param {ProxyConfigApiGetProxyConfigRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ProxyConfigApi\n   */\n  public getProxyConfig(\n    requestParameters: ProxyConfigApiGetProxyConfigRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ProxyConfigApiFp(this.configuration)\n      .getProxyConfig(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.proxyConfigId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Lists all the proxy configs defined within an environment.\n   * @summary List Proxy Configs\n   * @param {ProxyConfigApiListProxyConfigsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ProxyConfigApi\n   */\n  public listProxyConfigs(\n    requestParameters: ProxyConfigApiListProxyConfigsRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ProxyConfigApiFp(this.configuration)\n      .listProxyConfigs(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.page,\n        requestParameters.perPage,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Partially updates the proxy config definition. Fields that will be provided will be completely overwritten.\n   * @summary Update Proxy Config\n   * @param {ProxyConfigApiUpdateProxyConfigRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ProxyConfigApi\n   */\n  public updateProxyConfig(\n    requestParameters: ProxyConfigApiUpdateProxyConfigRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ProxyConfigApiFp(this.configuration)\n      .updateProxyConfig(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.proxyConfigId,\n        requestParameters.proxyConfigUpdate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n// @ts-ignore\nimport { RelationshipTupleCreate } from '../types';\n// @ts-ignore\nimport { RelationshipTupleCreateBulkOperation } from '../types';\n// @ts-ignore\nimport { RelationshipTupleDelete } from '../types';\n// @ts-ignore\nimport { RelationshipTupleDeleteBulkOperation } from '../types';\n// @ts-ignore\nimport { RelationshipTupleRead } from '../types';\n/**\n * RelationshipTuplesApi - axios parameter creator\n * @export\n */\nexport const RelationshipTuplesApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     *\n     * @summary Bulk create relationship tuples(EAP)\n     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {RelationshipTupleCreateBulkOperation} relationshipTupleCreateBulkOperation\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bulkCreateRelationshipTuples: async (\n      projId: any,\n      envId: any,\n      relationshipTupleCreateBulkOperation: RelationshipTupleCreateBulkOperation,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('bulkCreateRelationshipTuples', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('bulkCreateRelationshipTuples', 'envId', envId);\n      // verify required parameter 'relationshipTupleCreateBulkOperation' is not null or undefined\n      assertParamExists(\n        'bulkCreateRelationshipTuples',\n        'relationshipTupleCreateBulkOperation',\n        relationshipTupleCreateBulkOperation,\n      );\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/relationship_tuples/bulk`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        relationshipTupleCreateBulkOperation,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Bulk Delete Relationship Tuples\n     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {RelationshipTupleDeleteBulkOperation} relationshipTupleDeleteBulkOperation\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bulkDeleteRelationshipTuples: async (\n      projId: any,\n      envId: any,\n      relationshipTupleDeleteBulkOperation: RelationshipTupleDeleteBulkOperation,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('bulkDeleteRelationshipTuples', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('bulkDeleteRelationshipTuples', 'envId', envId);\n      // verify required parameter 'relationshipTupleDeleteBulkOperation' is not null or undefined\n      assertParamExists(\n        'bulkDeleteRelationshipTuples',\n        'relationshipTupleDeleteBulkOperation',\n        relationshipTupleDeleteBulkOperation,\n      );\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/relationship_tuples/bulk`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        relationshipTupleDeleteBulkOperation,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Create a relationship between two resource instances using a relation.\n     * @summary Create Relationship Tuple\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {RelationshipTupleCreate} relationshipTupleCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createRelationshipTuple: async (\n      projId: string,\n      envId: string,\n      relationshipTupleCreate: RelationshipTupleCreate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('createRelationshipTuple', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('createRelationshipTuple', 'envId', envId);\n      // verify required parameter 'relationshipTupleCreate' is not null or undefined\n      assertParamExists(\n        'createRelationshipTuple',\n        'relationshipTupleCreate',\n        relationshipTupleCreate,\n      );\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/relationship_tuples`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        relationshipTupleCreate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Delete a relationship between two resource instances.\n     * @summary Delete Relationship Tuple\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {RelationshipTupleDelete} relationshipTupleDelete\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteRelationshipTuple: async (\n      projId: string,\n      envId: string,\n      relationshipTupleDelete: RelationshipTupleDelete,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('deleteRelationshipTuple', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('deleteRelationshipTuple', 'envId', envId);\n      // verify required parameter 'relationshipTupleDelete' is not null or undefined\n      assertParamExists(\n        'deleteRelationshipTuple',\n        'relationshipTupleDelete',\n        relationshipTupleDelete,\n      );\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/relationship_tuples`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        relationshipTupleDelete,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Lists the relationship tuples defined within an environment.\n     * @summary List Relationship Tuples\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {string} [tenant] The tenant key or id to filter by\n     * @param {string} [subject] The subject to filter by, accepts either the resource instance id or resource_type:resource_instance\n     * @param {string} [relation] The relation id or key to filter by\n     * @param {string} [object] The object to filter by, accepts either the resource instance id or resource_type:resource_instance\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listRelationshipTuples: async (\n      projId: string,\n      envId: string,\n      detailed?: any,\n      page?: number,\n      perPage?: number,\n      tenant?: string,\n      subject?: string,\n      relation?: string,\n      object?: string,\n      objectType?: string,\n      subjectType?: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('listRelationshipTuples', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('listRelationshipTuples', 'envId', envId);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/relationship_tuples`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (detailed !== undefined) {\n        localVarQueryParameter['detailed'] = detailed;\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      if (tenant !== undefined) {\n        localVarQueryParameter['tenant'] = tenant;\n      }\n\n      if (subject !== undefined) {\n        localVarQueryParameter['subject'] = subject;\n      }\n\n      if (relation !== undefined) {\n        localVarQueryParameter['relation'] = relation;\n      }\n\n      if (object !== undefined) {\n        localVarQueryParameter['object'] = object;\n      }\n\n      if (objectType !== undefined) {\n        localVarQueryParameter['object_type'] = objectType;\n      }\n\n      if (subjectType !== undefined) {\n        localVarQueryParameter['subject_type'] = subjectType;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * RelationshipTuplesApi - functional programming interface\n * @export\n */\nexport const RelationshipTuplesApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = RelationshipTuplesApiAxiosParamCreator(configuration);\n  return {\n    /**\n     *\n     * @summary Bulk create relationship tuples(EAP)\n     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {RelationshipTupleCreateBulkOperation} relationshipTupleCreateBulkOperation\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async bulkCreateRelationshipTuples(\n      projId: any,\n      envId: any,\n      relationshipTupleCreateBulkOperation: RelationshipTupleCreateBulkOperation,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.bulkCreateRelationshipTuples(\n        projId,\n        envId,\n        relationshipTupleCreateBulkOperation,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Bulk Delete Relationship Tuples\n     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {RelationshipTupleDeleteBulkOperation} relationshipTupleDeleteBulkOperation\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async bulkDeleteRelationshipTuples(\n      projId: any,\n      envId: any,\n      relationshipTupleDeleteBulkOperation: RelationshipTupleDeleteBulkOperation,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.bulkDeleteRelationshipTuples(\n        projId,\n        envId,\n        relationshipTupleDeleteBulkOperation,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Create a relationship between two resource instances using a relation.\n     * @summary Create Relationship Tuple\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {RelationshipTupleCreate} relationshipTupleCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async createRelationshipTuple(\n      projId: string,\n      envId: string,\n      relationshipTupleCreate: RelationshipTupleCreate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RelationshipTupleRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.createRelationshipTuple(\n        projId,\n        envId,\n        relationshipTupleCreate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Delete a relationship between two resource instances.\n     * @summary Delete Relationship Tuple\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {RelationshipTupleDelete} relationshipTupleDelete\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async deleteRelationshipTuple(\n      projId: string,\n      envId: string,\n      relationshipTupleDelete: RelationshipTupleDelete,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRelationshipTuple(\n        projId,\n        envId,\n        relationshipTupleDelete,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Lists the relationship tuples defined within an environment.\n     * @summary List Relationship Tuples\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {string} [tenant] The tenant key or id to filter by\n     * @param {string} [subject] The subject to filter by, accepts either the resource instance id or resource_type:resource_instance\n     * @param {string} [relation] The relation id or key to filter by\n     * @param {string} [object] The object to filter by, accepts either the resource instance id or resource_type:resource_instance\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async listRelationshipTuples(\n      projId: string,\n      envId: string,\n      detailed?: any,\n      page?: number,\n      perPage?: number,\n      tenant?: string,\n      subject?: string,\n      relation?: string,\n      object?: string,\n      objectType?: string,\n      subjectType?: string,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RelationshipTupleRead>>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.listRelationshipTuples(\n        projId,\n        envId,\n        detailed,\n        page,\n        perPage,\n        tenant,\n        subject,\n        relation,\n        object,\n        objectType,\n        subjectType,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * RelationshipTuplesApi - factory interface\n * @export\n */\nexport const RelationshipTuplesApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = RelationshipTuplesApiFp(configuration);\n  return {\n    /**\n     *\n     * @summary Bulk create relationship tuples(EAP)\n     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {RelationshipTupleCreateBulkOperation} relationshipTupleCreateBulkOperation\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bulkCreateRelationshipTuples(\n      projId: any,\n      envId: any,\n      relationshipTupleCreateBulkOperation: RelationshipTupleCreateBulkOperation,\n      options?: any,\n    ): AxiosPromise<any> {\n      return localVarFp\n        .bulkCreateRelationshipTuples(projId, envId, relationshipTupleCreateBulkOperation, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Bulk Delete Relationship Tuples\n     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {RelationshipTupleDeleteBulkOperation} relationshipTupleDeleteBulkOperation\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bulkDeleteRelationshipTuples(\n      projId: any,\n      envId: any,\n      relationshipTupleDeleteBulkOperation: RelationshipTupleDeleteBulkOperation,\n      options?: any,\n    ): AxiosPromise<any> {\n      return localVarFp\n        .bulkDeleteRelationshipTuples(projId, envId, relationshipTupleDeleteBulkOperation, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Create a relationship between two resource instances using a relation.\n     * @summary Create Relationship Tuple\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {RelationshipTupleCreate} relationshipTupleCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createRelationshipTuple(\n      projId: string,\n      envId: string,\n      relationshipTupleCreate: RelationshipTupleCreate,\n      options?: any,\n    ): AxiosPromise<RelationshipTupleRead> {\n      return localVarFp\n        .createRelationshipTuple(projId, envId, relationshipTupleCreate, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Delete a relationship between two resource instances.\n     * @summary Delete Relationship Tuple\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {RelationshipTupleDelete} relationshipTupleDelete\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteRelationshipTuple(\n      projId: string,\n      envId: string,\n      relationshipTupleDelete: RelationshipTupleDelete,\n      options?: any,\n    ): AxiosPromise<void> {\n      return localVarFp\n        .deleteRelationshipTuple(projId, envId, relationshipTupleDelete, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Lists the relationship tuples defined within an environment.\n     * @summary List Relationship Tuples\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [detailed] If true, will return the full subject and object resource instances.\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {string} [tenant] The tenant key or id to filter by\n     * @param {string} [subject] The subject to filter by, accepts either the resource instance id or resource_type:resource_instance\n     * @param {string} [relation] The relation id or key to filter by\n     * @param {string} [object] The object to filter by, accepts either the resource instance id or resource_type:resource_instance\n     * @param {string} [objectType] The object type to filter by, accepts resource type id or key\n     * @param {string} [subjectType] The subject type to filter by, accepts resource type id or key\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listRelationshipTuples(\n      projId: string,\n      envId: string,\n      detailed?: any,\n      page?: number,\n      perPage?: number,\n      tenant?: string,\n      subject?: string,\n      relation?: string,\n      object?: string,\n      objectType?: string,\n      subjectType?: string,\n      options?: any,\n    ): AxiosPromise<Array<RelationshipTupleRead>> {\n      return localVarFp\n        .listRelationshipTuples(\n          projId,\n          envId,\n          detailed,\n          page,\n          perPage,\n          tenant,\n          subject,\n          relation,\n          object,\n          objectType,\n          subjectType,\n          options,\n        )\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for bulkCreateRelationshipTuples operation in RelationshipTuplesApi.\n * @export\n * @interface RelationshipTuplesApiBulkCreateRelationshipTuplesRequest\n */\nexport interface RelationshipTuplesApiBulkCreateRelationshipTuplesRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {any}\n   * @memberof RelationshipTuplesApiBulkCreateRelationshipTuples\n   */\n  readonly projId: any;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {any}\n   * @memberof RelationshipTuplesApiBulkCreateRelationshipTuples\n   */\n  readonly envId: any;\n\n  /**\n   *\n   * @type {RelationshipTupleCreateBulkOperation}\n   * @memberof RelationshipTuplesApiBulkCreateRelationshipTuples\n   */\n  readonly relationshipTupleCreateBulkOperation: RelationshipTupleCreateBulkOperation;\n}\n\n/**\n * Request parameters for bulkDeleteRelationshipTuples operation in RelationshipTuplesApi.\n * @export\n * @interface RelationshipTuplesApiBulkDeleteRelationshipTuplesRequest\n */\nexport interface RelationshipTuplesApiBulkDeleteRelationshipTuplesRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {any}\n   * @memberof RelationshipTuplesApiBulkDeleteRelationshipTuples\n   */\n  readonly projId: any;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {any}\n   * @memberof RelationshipTuplesApiBulkDeleteRelationshipTuples\n   */\n  readonly envId: any;\n\n  /**\n   *\n   * @type {RelationshipTupleDeleteBulkOperation}\n   * @memberof RelationshipTuplesApiBulkDeleteRelationshipTuples\n   */\n  readonly relationshipTupleDeleteBulkOperation: RelationshipTupleDeleteBulkOperation;\n}\n\n/**\n * Request parameters for createRelationshipTuple operation in RelationshipTuplesApi.\n * @export\n * @interface RelationshipTuplesApiCreateRelationshipTupleRequest\n */\nexport interface RelationshipTuplesApiCreateRelationshipTupleRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RelationshipTuplesApiCreateRelationshipTuple\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RelationshipTuplesApiCreateRelationshipTuple\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {RelationshipTupleCreate}\n   * @memberof RelationshipTuplesApiCreateRelationshipTuple\n   */\n  readonly relationshipTupleCreate: RelationshipTupleCreate;\n}\n\n/**\n * Request parameters for deleteRelationshipTuple operation in RelationshipTuplesApi.\n * @export\n * @interface RelationshipTuplesApiDeleteRelationshipTupleRequest\n */\nexport interface RelationshipTuplesApiDeleteRelationshipTupleRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RelationshipTuplesApiDeleteRelationshipTuple\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RelationshipTuplesApiDeleteRelationshipTuple\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {RelationshipTupleDelete}\n   * @memberof RelationshipTuplesApiDeleteRelationshipTuple\n   */\n  readonly relationshipTupleDelete: RelationshipTupleDelete;\n}\n\n/**\n * Request parameters for listRelationshipTuples operation in RelationshipTuplesApi.\n * @export\n * @interface RelationshipTuplesApiListRelationshipTuplesRequest\n */\nexport interface RelationshipTuplesApiListRelationshipTuplesRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RelationshipTuplesApiListRelationshipTuples\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RelationshipTuplesApiListRelationshipTuples\n   */\n  readonly envId: string;\n\n  /**\n   * If true, will return the full subject and object resource instances.\n   * @type {any}\n   * @memberof RelationshipTuplesApiListRelationshipTuples\n   */\n  readonly detailed?: any;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof RelationshipTuplesApiListRelationshipTuples\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof RelationshipTuplesApiListRelationshipTuples\n   */\n  readonly perPage?: number;\n\n  /**\n   * The tenant key or id to filter by\n   * @type {string}\n   * @memberof RelationshipTuplesApiListRelationshipTuples\n   */\n  readonly tenant?: string;\n\n  /**\n   * The subject to filter by, accepts either the resource instance id or resource_type:resource_instance\n   * @type {string}\n   * @memberof RelationshipTuplesApiListRelationshipTuples\n   */\n  readonly subject?: string;\n\n  /**\n   * The relation id or key to filter by\n   * @type {string}\n   * @memberof RelationshipTuplesApiListRelationshipTuples\n   */\n  readonly relation?: string;\n\n  /**\n   * The object to filter by, accepts either the resource instance id or resource_type:resource_instance\n   * @type {string}\n   * @memberof RelationshipTuplesApiListRelationshipTuples\n   */\n  readonly object?: string;\n\n  /**\n   * The object type to filter by, accepts resource type id or key\n   * @type {string}\n   * @memberof RelationshipTuplesApiListRelationshipTuples\n   */\n  readonly objectType?: string;\n\n  /**\n   * The subject type to filter by, accepts resource type id or key\n   * @type {string}\n   * @memberof RelationshipTuplesApiListRelationshipTuples\n   */\n  readonly subjectType?: string;\n}\n\n/**\n * RelationshipTuplesApi - object-oriented interface\n * @export\n * @class RelationshipTuplesApi\n * @extends {BaseAPI}\n */\nexport class RelationshipTuplesApi extends BaseAPI {\n  /**\n   *\n   * @summary Bulk create relationship tuples(EAP)\n   * @param {RelationshipTuplesApiBulkCreateRelationshipTuplesRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RelationshipTuplesApi\n   */\n  public async bulkCreateRelationshipTuples(\n    requestParameters: RelationshipTuplesApiBulkCreateRelationshipTuplesRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    let request = await RelationshipTuplesApiFp(this.configuration).bulkCreateRelationshipTuples(\n      requestParameters.projId,\n      requestParameters.envId,\n      requestParameters.relationshipTupleCreateBulkOperation,\n      options,\n    );\n    return request(this.axios, this.basePath);\n  }\n\n  /**\n   *\n   * @summary Bulk Delete Relationship Tuples\n   * @param {RelationshipTuplesApiBulkDeleteRelationshipTuplesRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RelationshipTuplesApi\n   */\n  public async bulkDeleteRelationshipTuples(\n    requestParameters: RelationshipTuplesApiBulkDeleteRelationshipTuplesRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    let request = await RelationshipTuplesApiFp(this.configuration).bulkDeleteRelationshipTuples(\n      requestParameters.projId,\n      requestParameters.envId,\n      requestParameters.relationshipTupleDeleteBulkOperation,\n      options,\n    );\n    return request(this.axios, this.basePath);\n  }\n\n  /**\n   * Create a relationship between two resource instances using a relation.\n   * @summary Create Relationship Tuple\n   * @param {RelationshipTuplesApiCreateRelationshipTupleRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RelationshipTuplesApi\n   */\n  public createRelationshipTuple(\n    requestParameters: RelationshipTuplesApiCreateRelationshipTupleRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return RelationshipTuplesApiFp(this.configuration)\n      .createRelationshipTuple(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.relationshipTupleCreate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Delete a relationship between two resource instances.\n   * @summary Delete Relationship Tuple\n   * @param {RelationshipTuplesApiDeleteRelationshipTupleRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RelationshipTuplesApi\n   */\n  public deleteRelationshipTuple(\n    requestParameters: RelationshipTuplesApiDeleteRelationshipTupleRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return RelationshipTuplesApiFp(this.configuration)\n      .deleteRelationshipTuple(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.relationshipTupleDelete,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Lists the relationship tuples defined within an environment.\n   * @summary List Relationship Tuples\n   * @param {RelationshipTuplesApiListRelationshipTuplesRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RelationshipTuplesApi\n   */\n  public listRelationshipTuples(\n    requestParameters: RelationshipTuplesApiListRelationshipTuplesRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return RelationshipTuplesApiFp(this.configuration)\n      .listRelationshipTuples(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.detailed,\n        requestParameters.page,\n        requestParameters.perPage,\n        requestParameters.tenant,\n        requestParameters.subject,\n        requestParameters.relation,\n        requestParameters.object,\n        requestParameters.objectType,\n        requestParameters.subjectType,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n// @ts-ignore\nimport { ResourceActionGroupCreate } from '../types';\n// @ts-ignore\nimport { ResourceActionGroupRead } from '../types';\n// @ts-ignore\nimport { ResourceActionGroupUpdate } from '../types';\n/**\n * ResourceActionGroupsApi - axios parameter creator\n * @export\n */\nexport const ResourceActionGroupsApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     * Creates a new action group that can affect the resource.\n     * @summary Create Resource Action Group\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceActionGroupCreate} resourceActionGroupCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createResourceActionGroup: async (\n      projId: string,\n      envId: string,\n      resourceId: string,\n      resourceActionGroupCreate: ResourceActionGroupCreate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('createResourceActionGroup', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('createResourceActionGroup', 'envId', envId);\n      // verify required parameter 'resourceId' is not null or undefined\n      assertParamExists('createResourceActionGroup', 'resourceId', resourceId);\n      // verify required parameter 'resourceActionGroupCreate' is not null or undefined\n      assertParamExists(\n        'createResourceActionGroup',\n        'resourceActionGroupCreate',\n        resourceActionGroupCreate,\n      );\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/action_groups`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        resourceActionGroupCreate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Deletes the action and all its related data. This includes any permissions granted to perform the action.\n     * @summary Delete Resource Action Group\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} actionGroupId Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteResourceActionGroup: async (\n      projId: string,\n      envId: string,\n      resourceId: string,\n      actionGroupId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('deleteResourceActionGroup', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('deleteResourceActionGroup', 'envId', envId);\n      // verify required parameter 'resourceId' is not null or undefined\n      assertParamExists('deleteResourceActionGroup', 'resourceId', resourceId);\n      // verify required parameter 'actionGroupId' is not null or undefined\n      assertParamExists('deleteResourceActionGroup', 'actionGroupId', actionGroupId);\n      const localVarPath =\n        `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/action_groups/{action_group_id}`\n          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n          .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))\n          .replace(`{${'action_group_id'}}`, encodeURIComponent(String(actionGroupId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Gets a single action group defined on the resource, if such action exists.\n     * @summary Get Resource Action Group\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} actionGroupId Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getResourceActionGroup: async (\n      projId: string,\n      envId: string,\n      resourceId: string,\n      actionGroupId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getResourceActionGroup', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getResourceActionGroup', 'envId', envId);\n      // verify required parameter 'resourceId' is not null or undefined\n      assertParamExists('getResourceActionGroup', 'resourceId', resourceId);\n      // verify required parameter 'actionGroupId' is not null or undefined\n      assertParamExists('getResourceActionGroup', 'actionGroupId', actionGroupId);\n      const localVarPath =\n        `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/action_groups/{action_group_id}`\n          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n          .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))\n          .replace(`{${'action_group_id'}}`, encodeURIComponent(String(actionGroupId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Lists all the action groups defined on the resource.\n     * @summary List Resource Action Groups\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listResourceActionGroups: async (\n      projId: string,\n      envId: string,\n      resourceId: string,\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('listResourceActionGroups', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('listResourceActionGroups', 'envId', envId);\n      // verify required parameter 'resourceId' is not null or undefined\n      assertParamExists('listResourceActionGroups', 'resourceId', resourceId);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/action_groups`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Partially updates the action defined on a resource. Fields that will be provided will be completely overwritten.\n     * @summary Update Resource Action Group\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} actionGroupId Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceActionGroupUpdate} resourceActionGroupUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateResourceActionGroup: async (\n      resourceId: string,\n      actionGroupId: string,\n      projId: string,\n      envId: string,\n      resourceActionGroupUpdate: ResourceActionGroupUpdate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'resourceId' is not null or undefined\n      assertParamExists('updateResourceActionGroup', 'resourceId', resourceId);\n      // verify required parameter 'actionGroupId' is not null or undefined\n      assertParamExists('updateResourceActionGroup', 'actionGroupId', actionGroupId);\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('updateResourceActionGroup', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('updateResourceActionGroup', 'envId', envId);\n      // verify required parameter 'resourceActionGroupUpdate' is not null or undefined\n      assertParamExists(\n        'updateResourceActionGroup',\n        'resourceActionGroupUpdate',\n        resourceActionGroupUpdate,\n      );\n      const localVarPath =\n        `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/action_groups/{action_group_id}`\n          .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))\n          .replace(`{${'action_group_id'}}`, encodeURIComponent(String(actionGroupId)))\n          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        resourceActionGroupUpdate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * ResourceActionGroupsApi - functional programming interface\n * @export\n */\nexport const ResourceActionGroupsApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = ResourceActionGroupsApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * Creates a new action group that can affect the resource.\n     * @summary Create Resource Action Group\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceActionGroupCreate} resourceActionGroupCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async createResourceActionGroup(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      resourceActionGroupCreate: ResourceActionGroupCreate,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceActionGroupRead>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.createResourceActionGroup(\n        projId,\n        envId,\n        resourceId,\n        resourceActionGroupCreate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Deletes the action and all its related data. This includes any permissions granted to perform the action.\n     * @summary Delete Resource Action Group\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} actionGroupId Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async deleteResourceActionGroup(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      actionGroupId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteResourceActionGroup(\n        projId,\n        envId,\n        resourceId,\n        actionGroupId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Gets a single action group defined on the resource, if such action exists.\n     * @summary Get Resource Action Group\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} actionGroupId Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getResourceActionGroup(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      actionGroupId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceActionGroupRead>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getResourceActionGroup(\n        projId,\n        envId,\n        resourceId,\n        actionGroupId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Lists all the action groups defined on the resource.\n     * @summary List Resource Action Groups\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async listResourceActionGroups(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ResourceActionGroupRead>>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.listResourceActionGroups(\n        projId,\n        envId,\n        resourceId,\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Partially updates the action defined on a resource. Fields that will be provided will be completely overwritten.\n     * @summary Update Resource Action Group\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} actionGroupId Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceActionGroupUpdate} resourceActionGroupUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async updateResourceActionGroup(\n      resourceId: string,\n      actionGroupId: string,\n      projId: string,\n      envId: string,\n      resourceActionGroupUpdate: ResourceActionGroupUpdate,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceActionGroupRead>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.updateResourceActionGroup(\n        resourceId,\n        actionGroupId,\n        projId,\n        envId,\n        resourceActionGroupUpdate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * ResourceActionGroupsApi - factory interface\n * @export\n */\nexport const ResourceActionGroupsApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = ResourceActionGroupsApiFp(configuration);\n  return {\n    /**\n     * Creates a new action group that can affect the resource.\n     * @summary Create Resource Action Group\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceActionGroupCreate} resourceActionGroupCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createResourceActionGroup(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      resourceActionGroupCreate: ResourceActionGroupCreate,\n      options?: any,\n    ): AxiosPromise<ResourceActionGroupRead> {\n      return localVarFp\n        .createResourceActionGroup(projId, envId, resourceId, resourceActionGroupCreate, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Deletes the action and all its related data. This includes any permissions granted to perform the action.\n     * @summary Delete Resource Action Group\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} actionGroupId Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteResourceActionGroup(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      actionGroupId: string,\n      options?: any,\n    ): AxiosPromise<void> {\n      return localVarFp\n        .deleteResourceActionGroup(projId, envId, resourceId, actionGroupId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Gets a single action group defined on the resource, if such action exists.\n     * @summary Get Resource Action Group\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} actionGroupId Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getResourceActionGroup(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      actionGroupId: string,\n      options?: any,\n    ): AxiosPromise<ResourceActionGroupRead> {\n      return localVarFp\n        .getResourceActionGroup(projId, envId, resourceId, actionGroupId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Lists all the action groups defined on the resource.\n     * @summary List Resource Action Groups\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listResourceActionGroups(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<Array<ResourceActionGroupRead>> {\n      return localVarFp\n        .listResourceActionGroups(projId, envId, resourceId, page, perPage, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Partially updates the action defined on a resource. Fields that will be provided will be completely overwritten.\n     * @summary Update Resource Action Group\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} actionGroupId Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceActionGroupUpdate} resourceActionGroupUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateResourceActionGroup(\n      resourceId: string,\n      actionGroupId: string,\n      projId: string,\n      envId: string,\n      resourceActionGroupUpdate: ResourceActionGroupUpdate,\n      options?: any,\n    ): AxiosPromise<ResourceActionGroupRead> {\n      return localVarFp\n        .updateResourceActionGroup(\n          resourceId,\n          actionGroupId,\n          projId,\n          envId,\n          resourceActionGroupUpdate,\n          options,\n        )\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for createResourceActionGroup operation in ResourceActionGroupsApi.\n * @export\n * @interface ResourceActionGroupsApiCreateResourceActionGroupRequest\n */\nexport interface ResourceActionGroupsApiCreateResourceActionGroupRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceActionGroupsApiCreateResourceActionGroup\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceActionGroupsApiCreateResourceActionGroup\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceActionGroupsApiCreateResourceActionGroup\n   */\n  readonly resourceId: string;\n\n  /**\n   *\n   * @type {ResourceActionGroupCreate}\n   * @memberof ResourceActionGroupsApiCreateResourceActionGroup\n   */\n  readonly resourceActionGroupCreate: ResourceActionGroupCreate;\n}\n\n/**\n * Request parameters for deleteResourceActionGroup operation in ResourceActionGroupsApi.\n * @export\n * @interface ResourceActionGroupsApiDeleteResourceActionGroupRequest\n */\nexport interface ResourceActionGroupsApiDeleteResourceActionGroupRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceActionGroupsApiDeleteResourceActionGroup\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceActionGroupsApiDeleteResourceActionGroup\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceActionGroupsApiDeleteResourceActionGroup\n   */\n  readonly resourceId: string;\n\n  /**\n   * Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceActionGroupsApiDeleteResourceActionGroup\n   */\n  readonly actionGroupId: string;\n}\n\n/**\n * Request parameters for getResourceActionGroup operation in ResourceActionGroupsApi.\n * @export\n * @interface ResourceActionGroupsApiGetResourceActionGroupRequest\n */\nexport interface ResourceActionGroupsApiGetResourceActionGroupRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceActionGroupsApiGetResourceActionGroup\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceActionGroupsApiGetResourceActionGroup\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceActionGroupsApiGetResourceActionGroup\n   */\n  readonly resourceId: string;\n\n  /**\n   * Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceActionGroupsApiGetResourceActionGroup\n   */\n  readonly actionGroupId: string;\n}\n\n/**\n * Request parameters for listResourceActionGroups operation in ResourceActionGroupsApi.\n * @export\n * @interface ResourceActionGroupsApiListResourceActionGroupsRequest\n */\nexport interface ResourceActionGroupsApiListResourceActionGroupsRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceActionGroupsApiListResourceActionGroups\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceActionGroupsApiListResourceActionGroups\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceActionGroupsApiListResourceActionGroups\n   */\n  readonly resourceId: string;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof ResourceActionGroupsApiListResourceActionGroups\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof ResourceActionGroupsApiListResourceActionGroups\n   */\n  readonly perPage?: number;\n}\n\n/**\n * Request parameters for updateResourceActionGroup operation in ResourceActionGroupsApi.\n * @export\n * @interface ResourceActionGroupsApiUpdateResourceActionGroupRequest\n */\nexport interface ResourceActionGroupsApiUpdateResourceActionGroupRequest {\n  /**\n   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceActionGroupsApiUpdateResourceActionGroup\n   */\n  readonly resourceId: string;\n\n  /**\n   * Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceActionGroupsApiUpdateResourceActionGroup\n   */\n  readonly actionGroupId: string;\n\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceActionGroupsApiUpdateResourceActionGroup\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceActionGroupsApiUpdateResourceActionGroup\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {ResourceActionGroupUpdate}\n   * @memberof ResourceActionGroupsApiUpdateResourceActionGroup\n   */\n  readonly resourceActionGroupUpdate: ResourceActionGroupUpdate;\n}\n\n/**\n * ResourceActionGroupsApi - object-oriented interface\n * @export\n * @class ResourceActionGroupsApi\n * @extends {BaseAPI}\n */\nexport class ResourceActionGroupsApi extends BaseAPI {\n  /**\n   * Creates a new action group that can affect the resource.\n   * @summary Create Resource Action Group\n   * @param {ResourceActionGroupsApiCreateResourceActionGroupRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceActionGroupsApi\n   */\n  public createResourceActionGroup(\n    requestParameters: ResourceActionGroupsApiCreateResourceActionGroupRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ResourceActionGroupsApiFp(this.configuration)\n      .createResourceActionGroup(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.resourceId,\n        requestParameters.resourceActionGroupCreate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Deletes the action and all its related data. This includes any permissions granted to perform the action.\n   * @summary Delete Resource Action Group\n   * @param {ResourceActionGroupsApiDeleteResourceActionGroupRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceActionGroupsApi\n   */\n  public deleteResourceActionGroup(\n    requestParameters: ResourceActionGroupsApiDeleteResourceActionGroupRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ResourceActionGroupsApiFp(this.configuration)\n      .deleteResourceActionGroup(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.resourceId,\n        requestParameters.actionGroupId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Gets a single action group defined on the resource, if such action exists.\n   * @summary Get Resource Action Group\n   * @param {ResourceActionGroupsApiGetResourceActionGroupRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceActionGroupsApi\n   */\n  public getResourceActionGroup(\n    requestParameters: ResourceActionGroupsApiGetResourceActionGroupRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ResourceActionGroupsApiFp(this.configuration)\n      .getResourceActionGroup(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.resourceId,\n        requestParameters.actionGroupId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Lists all the action groups defined on the resource.\n   * @summary List Resource Action Groups\n   * @param {ResourceActionGroupsApiListResourceActionGroupsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceActionGroupsApi\n   */\n  public listResourceActionGroups(\n    requestParameters: ResourceActionGroupsApiListResourceActionGroupsRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ResourceActionGroupsApiFp(this.configuration)\n      .listResourceActionGroups(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.resourceId,\n        requestParameters.page,\n        requestParameters.perPage,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Partially updates the action defined on a resource. Fields that will be provided will be completely overwritten.\n   * @summary Update Resource Action Group\n   * @param {ResourceActionGroupsApiUpdateResourceActionGroupRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceActionGroupsApi\n   */\n  public updateResourceActionGroup(\n    requestParameters: ResourceActionGroupsApiUpdateResourceActionGroupRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ResourceActionGroupsApiFp(this.configuration)\n      .updateResourceActionGroup(\n        requestParameters.resourceId,\n        requestParameters.actionGroupId,\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.resourceActionGroupUpdate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n// @ts-ignore\nimport { ResourceActionCreate } from '../types';\n// @ts-ignore\nimport { ResourceActionRead } from '../types';\n// @ts-ignore\nimport { ResourceActionUpdate } from '../types';\n/**\n * ResourceActionsApi - axios parameter creator\n * @export\n */\nexport const ResourceActionsApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     * Creates a new action that can affect the resource.\n     * @summary Create Resource Action\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceActionCreate} resourceActionCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createResourceAction: async (\n      projId: string,\n      envId: string,\n      resourceId: string,\n      resourceActionCreate: ResourceActionCreate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('createResourceAction', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('createResourceAction', 'envId', envId);\n      // verify required parameter 'resourceId' is not null or undefined\n      assertParamExists('createResourceAction', 'resourceId', resourceId);\n      // verify required parameter 'resourceActionCreate' is not null or undefined\n      assertParamExists('createResourceAction', 'resourceActionCreate', resourceActionCreate);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/actions`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        resourceActionCreate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Deletes the action and all its related data. This includes any permissions granted to perform the action.\n     * @summary Delete Resource Action\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} actionId Either the unique id of the action, or the URL-friendly key of the action (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteResourceAction: async (\n      projId: string,\n      envId: string,\n      resourceId: string,\n      actionId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('deleteResourceAction', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('deleteResourceAction', 'envId', envId);\n      // verify required parameter 'resourceId' is not null or undefined\n      assertParamExists('deleteResourceAction', 'resourceId', resourceId);\n      // verify required parameter 'actionId' is not null or undefined\n      assertParamExists('deleteResourceAction', 'actionId', actionId);\n      const localVarPath =\n        `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/actions/{action_id}`\n          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n          .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))\n          .replace(`{${'action_id'}}`, encodeURIComponent(String(actionId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Gets a single action defined on the resource, if such action exists.\n     * @summary Get Resource Action\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} actionId Either the unique id of the action, or the URL-friendly key of the action (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getResourceAction: async (\n      projId: string,\n      envId: string,\n      resourceId: string,\n      actionId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getResourceAction', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getResourceAction', 'envId', envId);\n      // verify required parameter 'resourceId' is not null or undefined\n      assertParamExists('getResourceAction', 'resourceId', resourceId);\n      // verify required parameter 'actionId' is not null or undefined\n      assertParamExists('getResourceAction', 'actionId', actionId);\n      const localVarPath =\n        `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/actions/{action_id}`\n          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n          .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))\n          .replace(`{${'action_id'}}`, encodeURIComponent(String(actionId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Lists all the actions defined on the resource.\n     * @summary List Resource Actions\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listResourceActions: async (\n      projId: string,\n      envId: string,\n      resourceId: string,\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('listResourceActions', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('listResourceActions', 'envId', envId);\n      // verify required parameter 'resourceId' is not null or undefined\n      assertParamExists('listResourceActions', 'resourceId', resourceId);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/actions`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Partially updates the action defined on a resource. Fields that will be provided will be completely overwritten.\n     * @summary Update Resource Action\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} actionId Either the unique id of the action, or the URL-friendly key of the action (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceActionUpdate} resourceActionUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateResourceAction: async (\n      projId: string,\n      envId: string,\n      resourceId: string,\n      actionId: string,\n      resourceActionUpdate: ResourceActionUpdate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('updateResourceAction', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('updateResourceAction', 'envId', envId);\n      // verify required parameter 'resourceId' is not null or undefined\n      assertParamExists('updateResourceAction', 'resourceId', resourceId);\n      // verify required parameter 'actionId' is not null or undefined\n      assertParamExists('updateResourceAction', 'actionId', actionId);\n      // verify required parameter 'resourceActionUpdate' is not null or undefined\n      assertParamExists('updateResourceAction', 'resourceActionUpdate', resourceActionUpdate);\n      const localVarPath =\n        `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/actions/{action_id}`\n          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n          .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))\n          .replace(`{${'action_id'}}`, encodeURIComponent(String(actionId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        resourceActionUpdate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * ResourceActionsApi - functional programming interface\n * @export\n */\nexport const ResourceActionsApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = ResourceActionsApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * Creates a new action that can affect the resource.\n     * @summary Create Resource Action\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceActionCreate} resourceActionCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async createResourceAction(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      resourceActionCreate: ResourceActionCreate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceActionRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.createResourceAction(\n        projId,\n        envId,\n        resourceId,\n        resourceActionCreate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Deletes the action and all its related data. This includes any permissions granted to perform the action.\n     * @summary Delete Resource Action\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} actionId Either the unique id of the action, or the URL-friendly key of the action (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async deleteResourceAction(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      actionId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteResourceAction(\n        projId,\n        envId,\n        resourceId,\n        actionId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Gets a single action defined on the resource, if such action exists.\n     * @summary Get Resource Action\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} actionId Either the unique id of the action, or the URL-friendly key of the action (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getResourceAction(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      actionId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceActionRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getResourceAction(\n        projId,\n        envId,\n        resourceId,\n        actionId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Lists all the actions defined on the resource.\n     * @summary List Resource Actions\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async listResourceActions(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ResourceActionRead>>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.listResourceActions(\n        projId,\n        envId,\n        resourceId,\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Partially updates the action defined on a resource. Fields that will be provided will be completely overwritten.\n     * @summary Update Resource Action\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} actionId Either the unique id of the action, or the URL-friendly key of the action (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceActionUpdate} resourceActionUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async updateResourceAction(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      actionId: string,\n      resourceActionUpdate: ResourceActionUpdate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceActionRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.updateResourceAction(\n        projId,\n        envId,\n        resourceId,\n        actionId,\n        resourceActionUpdate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * ResourceActionsApi - factory interface\n * @export\n */\nexport const ResourceActionsApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = ResourceActionsApiFp(configuration);\n  return {\n    /**\n     * Creates a new action that can affect the resource.\n     * @summary Create Resource Action\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceActionCreate} resourceActionCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createResourceAction(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      resourceActionCreate: ResourceActionCreate,\n      options?: any,\n    ): AxiosPromise<ResourceActionRead> {\n      return localVarFp\n        .createResourceAction(projId, envId, resourceId, resourceActionCreate, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Deletes the action and all its related data. This includes any permissions granted to perform the action.\n     * @summary Delete Resource Action\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} actionId Either the unique id of the action, or the URL-friendly key of the action (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteResourceAction(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      actionId: string,\n      options?: any,\n    ): AxiosPromise<void> {\n      return localVarFp\n        .deleteResourceAction(projId, envId, resourceId, actionId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Gets a single action defined on the resource, if such action exists.\n     * @summary Get Resource Action\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} actionId Either the unique id of the action, or the URL-friendly key of the action (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getResourceAction(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      actionId: string,\n      options?: any,\n    ): AxiosPromise<ResourceActionRead> {\n      return localVarFp\n        .getResourceAction(projId, envId, resourceId, actionId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Lists all the actions defined on the resource.\n     * @summary List Resource Actions\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listResourceActions(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<Array<ResourceActionRead>> {\n      return localVarFp\n        .listResourceActions(projId, envId, resourceId, page, perPage, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Partially updates the action defined on a resource. Fields that will be provided will be completely overwritten.\n     * @summary Update Resource Action\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} actionId Either the unique id of the action, or the URL-friendly key of the action (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceActionUpdate} resourceActionUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateResourceAction(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      actionId: string,\n      resourceActionUpdate: ResourceActionUpdate,\n      options?: any,\n    ): AxiosPromise<ResourceActionRead> {\n      return localVarFp\n        .updateResourceAction(projId, envId, resourceId, actionId, resourceActionUpdate, options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for createResourceAction operation in ResourceActionsApi.\n * @export\n * @interface ResourceActionsApiCreateResourceActionRequest\n */\nexport interface ResourceActionsApiCreateResourceActionRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceActionsApiCreateResourceAction\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceActionsApiCreateResourceAction\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceActionsApiCreateResourceAction\n   */\n  readonly resourceId: string;\n\n  /**\n   *\n   * @type {ResourceActionCreate}\n   * @memberof ResourceActionsApiCreateResourceAction\n   */\n  readonly resourceActionCreate: ResourceActionCreate;\n}\n\n/**\n * Request parameters for deleteResourceAction operation in ResourceActionsApi.\n * @export\n * @interface ResourceActionsApiDeleteResourceActionRequest\n */\nexport interface ResourceActionsApiDeleteResourceActionRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceActionsApiDeleteResourceAction\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceActionsApiDeleteResourceAction\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceActionsApiDeleteResourceAction\n   */\n  readonly resourceId: string;\n\n  /**\n   * Either the unique id of the action, or the URL-friendly key of the action (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceActionsApiDeleteResourceAction\n   */\n  readonly actionId: string;\n}\n\n/**\n * Request parameters for getResourceAction operation in ResourceActionsApi.\n * @export\n * @interface ResourceActionsApiGetResourceActionRequest\n */\nexport interface ResourceActionsApiGetResourceActionRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceActionsApiGetResourceAction\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceActionsApiGetResourceAction\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceActionsApiGetResourceAction\n   */\n  readonly resourceId: string;\n\n  /**\n   * Either the unique id of the action, or the URL-friendly key of the action (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceActionsApiGetResourceAction\n   */\n  readonly actionId: string;\n}\n\n/**\n * Request parameters for listResourceActions operation in ResourceActionsApi.\n * @export\n * @interface ResourceActionsApiListResourceActionsRequest\n */\nexport interface ResourceActionsApiListResourceActionsRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceActionsApiListResourceActions\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceActionsApiListResourceActions\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceActionsApiListResourceActions\n   */\n  readonly resourceId: string;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof ResourceActionsApiListResourceActions\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof ResourceActionsApiListResourceActions\n   */\n  readonly perPage?: number;\n}\n\n/**\n * Request parameters for updateResourceAction operation in ResourceActionsApi.\n * @export\n * @interface ResourceActionsApiUpdateResourceActionRequest\n */\nexport interface ResourceActionsApiUpdateResourceActionRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceActionsApiUpdateResourceAction\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceActionsApiUpdateResourceAction\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceActionsApiUpdateResourceAction\n   */\n  readonly resourceId: string;\n\n  /**\n   * Either the unique id of the action, or the URL-friendly key of the action (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceActionsApiUpdateResourceAction\n   */\n  readonly actionId: string;\n\n  /**\n   *\n   * @type {ResourceActionUpdate}\n   * @memberof ResourceActionsApiUpdateResourceAction\n   */\n  readonly resourceActionUpdate: ResourceActionUpdate;\n}\n\n/**\n * ResourceActionsApi - object-oriented interface\n * @export\n * @class ResourceActionsApi\n * @extends {BaseAPI}\n */\nexport class ResourceActionsApi extends BaseAPI {\n  /**\n   * Creates a new action that can affect the resource.\n   * @summary Create Resource Action\n   * @param {ResourceActionsApiCreateResourceActionRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceActionsApi\n   */\n  public createResourceAction(\n    requestParameters: ResourceActionsApiCreateResourceActionRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ResourceActionsApiFp(this.configuration)\n      .createResourceAction(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.resourceId,\n        requestParameters.resourceActionCreate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Deletes the action and all its related data. This includes any permissions granted to perform the action.\n   * @summary Delete Resource Action\n   * @param {ResourceActionsApiDeleteResourceActionRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceActionsApi\n   */\n  public deleteResourceAction(\n    requestParameters: ResourceActionsApiDeleteResourceActionRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ResourceActionsApiFp(this.configuration)\n      .deleteResourceAction(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.resourceId,\n        requestParameters.actionId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Gets a single action defined on the resource, if such action exists.\n   * @summary Get Resource Action\n   * @param {ResourceActionsApiGetResourceActionRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceActionsApi\n   */\n  public getResourceAction(\n    requestParameters: ResourceActionsApiGetResourceActionRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ResourceActionsApiFp(this.configuration)\n      .getResourceAction(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.resourceId,\n        requestParameters.actionId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Lists all the actions defined on the resource.\n   * @summary List Resource Actions\n   * @param {ResourceActionsApiListResourceActionsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceActionsApi\n   */\n  public listResourceActions(\n    requestParameters: ResourceActionsApiListResourceActionsRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ResourceActionsApiFp(this.configuration)\n      .listResourceActions(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.resourceId,\n        requestParameters.page,\n        requestParameters.perPage,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Partially updates the action defined on a resource. Fields that will be provided will be completely overwritten.\n   * @summary Update Resource Action\n   * @param {ResourceActionsApiUpdateResourceActionRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceActionsApi\n   */\n  public updateResourceAction(\n    requestParameters: ResourceActionsApiUpdateResourceActionRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ResourceActionsApiFp(this.configuration)\n      .updateResourceAction(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.resourceId,\n        requestParameters.actionId,\n        requestParameters.resourceActionUpdate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n// @ts-ignore\nimport { ResourceAttributeCreate } from '../types';\n// @ts-ignore\nimport { ResourceAttributeRead } from '../types';\n// @ts-ignore\nimport { ResourceAttributeUpdate } from '../types';\n/**\n * ResourceAttributesApi - axios parameter creator\n * @export\n */\nexport const ResourceAttributesApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     * Creates a new attribute as part of the resource definition.\n     * @summary Create Resource Attribute\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceAttributeCreate} resourceAttributeCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createResourceAttribute: async (\n      projId: string,\n      envId: string,\n      resourceId: string,\n      resourceAttributeCreate: ResourceAttributeCreate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('createResourceAttribute', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('createResourceAttribute', 'envId', envId);\n      // verify required parameter 'resourceId' is not null or undefined\n      assertParamExists('createResourceAttribute', 'resourceId', resourceId);\n      // verify required parameter 'resourceAttributeCreate' is not null or undefined\n      assertParamExists(\n        'createResourceAttribute',\n        'resourceAttributeCreate',\n        resourceAttributeCreate,\n      );\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/attributes`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        resourceAttributeCreate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Deletes the attribute and all its related data.  Note: If the attribute is used by policies, removing it will cause the attribute to evaluate as `undefined`.\n     * @summary Delete Resource Attribute\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteResourceAttribute: async (\n      projId: string,\n      envId: string,\n      resourceId: string,\n      attributeId: string,\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('deleteResourceAttribute', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('deleteResourceAttribute', 'envId', envId);\n      // verify required parameter 'resourceId' is not null or undefined\n      assertParamExists('deleteResourceAttribute', 'resourceId', resourceId);\n      // verify required parameter 'attributeId' is not null or undefined\n      assertParamExists('deleteResourceAttribute', 'attributeId', attributeId);\n      const localVarPath =\n        `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/attributes/{attribute_id}`\n          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n          .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))\n          .replace(`{${'attribute_id'}}`, encodeURIComponent(String(attributeId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Gets a single attribute defined on the resource, if such attribute exists.\n     * @summary Get Resource Attribute\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getResourceAttribute: async (\n      projId: string,\n      envId: string,\n      resourceId: string,\n      attributeId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getResourceAttribute', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getResourceAttribute', 'envId', envId);\n      // verify required parameter 'resourceId' is not null or undefined\n      assertParamExists('getResourceAttribute', 'resourceId', resourceId);\n      // verify required parameter 'attributeId' is not null or undefined\n      assertParamExists('getResourceAttribute', 'attributeId', attributeId);\n      const localVarPath =\n        `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/attributes/{attribute_id}`\n          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n          .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))\n          .replace(`{${'attribute_id'}}`, encodeURIComponent(String(attributeId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Lists all the attributes defined on the resource.\n     * @summary List Resource Attributes\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listResourceAttributes: async (\n      projId: string,\n      envId: string,\n      resourceId: string,\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('listResourceAttributes', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('listResourceAttributes', 'envId', envId);\n      // verify required parameter 'resourceId' is not null or undefined\n      assertParamExists('listResourceAttributes', 'resourceId', resourceId);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/attributes`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Partially updates the attribute defined on a resource. Fields that will be provided will be completely overwritten.\n     * @summary Update Resource Attribute\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceAttributeUpdate} resourceAttributeUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateResourceAttribute: async (\n      projId: string,\n      envId: string,\n      resourceId: string,\n      attributeId: string,\n      resourceAttributeUpdate: ResourceAttributeUpdate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('updateResourceAttribute', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('updateResourceAttribute', 'envId', envId);\n      // verify required parameter 'resourceId' is not null or undefined\n      assertParamExists('updateResourceAttribute', 'resourceId', resourceId);\n      // verify required parameter 'attributeId' is not null or undefined\n      assertParamExists('updateResourceAttribute', 'attributeId', attributeId);\n      // verify required parameter 'resourceAttributeUpdate' is not null or undefined\n      assertParamExists(\n        'updateResourceAttribute',\n        'resourceAttributeUpdate',\n        resourceAttributeUpdate,\n      );\n      const localVarPath =\n        `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/attributes/{attribute_id}`\n          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n          .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))\n          .replace(`{${'attribute_id'}}`, encodeURIComponent(String(attributeId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        resourceAttributeUpdate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * ResourceAttributesApi - functional programming interface\n * @export\n */\nexport const ResourceAttributesApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = ResourceAttributesApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * Creates a new attribute as part of the resource definition.\n     * @summary Create Resource Attribute\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceAttributeCreate} resourceAttributeCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async createResourceAttribute(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      resourceAttributeCreate: ResourceAttributeCreate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceAttributeRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.createResourceAttribute(\n        projId,\n        envId,\n        resourceId,\n        resourceAttributeCreate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Deletes the attribute and all its related data.  Note: If the attribute is used by policies, removing it will cause the attribute to evaluate as `undefined`.\n     * @summary Delete Resource Attribute\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async deleteResourceAttribute(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      attributeId: string,\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteResourceAttribute(\n        projId,\n        envId,\n        resourceId,\n        attributeId,\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Gets a single attribute defined on the resource, if such attribute exists.\n     * @summary Get Resource Attribute\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getResourceAttribute(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      attributeId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceAttributeRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getResourceAttribute(\n        projId,\n        envId,\n        resourceId,\n        attributeId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Lists all the attributes defined on the resource.\n     * @summary List Resource Attributes\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async listResourceAttributes(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ResourceAttributeRead>>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.listResourceAttributes(\n        projId,\n        envId,\n        resourceId,\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Partially updates the attribute defined on a resource. Fields that will be provided will be completely overwritten.\n     * @summary Update Resource Attribute\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceAttributeUpdate} resourceAttributeUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async updateResourceAttribute(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      attributeId: string,\n      resourceAttributeUpdate: ResourceAttributeUpdate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceAttributeRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.updateResourceAttribute(\n        projId,\n        envId,\n        resourceId,\n        attributeId,\n        resourceAttributeUpdate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * ResourceAttributesApi - factory interface\n * @export\n */\nexport const ResourceAttributesApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = ResourceAttributesApiFp(configuration);\n  return {\n    /**\n     * Creates a new attribute as part of the resource definition.\n     * @summary Create Resource Attribute\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceAttributeCreate} resourceAttributeCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createResourceAttribute(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      resourceAttributeCreate: ResourceAttributeCreate,\n      options?: any,\n    ): AxiosPromise<ResourceAttributeRead> {\n      return localVarFp\n        .createResourceAttribute(projId, envId, resourceId, resourceAttributeCreate, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Deletes the attribute and all its related data.  Note: If the attribute is used by policies, removing it will cause the attribute to evaluate as `undefined`.\n     * @summary Delete Resource Attribute\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteResourceAttribute(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      attributeId: string,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<void> {\n      return localVarFp\n        .deleteResourceAttribute(projId, envId, resourceId, attributeId, page, perPage, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Gets a single attribute defined on the resource, if such attribute exists.\n     * @summary Get Resource Attribute\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getResourceAttribute(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      attributeId: string,\n      options?: any,\n    ): AxiosPromise<ResourceAttributeRead> {\n      return localVarFp\n        .getResourceAttribute(projId, envId, resourceId, attributeId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Lists all the attributes defined on the resource.\n     * @summary List Resource Attributes\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listResourceAttributes(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<Array<ResourceAttributeRead>> {\n      return localVarFp\n        .listResourceAttributes(projId, envId, resourceId, page, perPage, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Partially updates the attribute defined on a resource. Fields that will be provided will be completely overwritten.\n     * @summary Update Resource Attribute\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceAttributeUpdate} resourceAttributeUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateResourceAttribute(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      attributeId: string,\n      resourceAttributeUpdate: ResourceAttributeUpdate,\n      options?: any,\n    ): AxiosPromise<ResourceAttributeRead> {\n      return localVarFp\n        .updateResourceAttribute(\n          projId,\n          envId,\n          resourceId,\n          attributeId,\n          resourceAttributeUpdate,\n          options,\n        )\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for createResourceAttribute operation in ResourceAttributesApi.\n * @export\n * @interface ResourceAttributesApiCreateResourceAttributeRequest\n */\nexport interface ResourceAttributesApiCreateResourceAttributeRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceAttributesApiCreateResourceAttribute\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceAttributesApiCreateResourceAttribute\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceAttributesApiCreateResourceAttribute\n   */\n  readonly resourceId: string;\n\n  /**\n   *\n   * @type {ResourceAttributeCreate}\n   * @memberof ResourceAttributesApiCreateResourceAttribute\n   */\n  readonly resourceAttributeCreate: ResourceAttributeCreate;\n}\n\n/**\n * Request parameters for deleteResourceAttribute operation in ResourceAttributesApi.\n * @export\n * @interface ResourceAttributesApiDeleteResourceAttributeRequest\n */\nexport interface ResourceAttributesApiDeleteResourceAttributeRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceAttributesApiDeleteResourceAttribute\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceAttributesApiDeleteResourceAttribute\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceAttributesApiDeleteResourceAttribute\n   */\n  readonly resourceId: string;\n\n  /**\n   * Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceAttributesApiDeleteResourceAttribute\n   */\n  readonly attributeId: string;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof ResourceAttributesApiDeleteResourceAttribute\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof ResourceAttributesApiDeleteResourceAttribute\n   */\n  readonly perPage?: number;\n}\n\n/**\n * Request parameters for getResourceAttribute operation in ResourceAttributesApi.\n * @export\n * @interface ResourceAttributesApiGetResourceAttributeRequest\n */\nexport interface ResourceAttributesApiGetResourceAttributeRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceAttributesApiGetResourceAttribute\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceAttributesApiGetResourceAttribute\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceAttributesApiGetResourceAttribute\n   */\n  readonly resourceId: string;\n\n  /**\n   * Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceAttributesApiGetResourceAttribute\n   */\n  readonly attributeId: string;\n}\n\n/**\n * Request parameters for listResourceAttributes operation in ResourceAttributesApi.\n * @export\n * @interface ResourceAttributesApiListResourceAttributesRequest\n */\nexport interface ResourceAttributesApiListResourceAttributesRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceAttributesApiListResourceAttributes\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceAttributesApiListResourceAttributes\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceAttributesApiListResourceAttributes\n   */\n  readonly resourceId: string;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof ResourceAttributesApiListResourceAttributes\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof ResourceAttributesApiListResourceAttributes\n   */\n  readonly perPage?: number;\n}\n\n/**\n * Request parameters for updateResourceAttribute operation in ResourceAttributesApi.\n * @export\n * @interface ResourceAttributesApiUpdateResourceAttributeRequest\n */\nexport interface ResourceAttributesApiUpdateResourceAttributeRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceAttributesApiUpdateResourceAttribute\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceAttributesApiUpdateResourceAttribute\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceAttributesApiUpdateResourceAttribute\n   */\n  readonly resourceId: string;\n\n  /**\n   * Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceAttributesApiUpdateResourceAttribute\n   */\n  readonly attributeId: string;\n\n  /**\n   *\n   * @type {ResourceAttributeUpdate}\n   * @memberof ResourceAttributesApiUpdateResourceAttribute\n   */\n  readonly resourceAttributeUpdate: ResourceAttributeUpdate;\n}\n\n/**\n * ResourceAttributesApi - object-oriented interface\n * @export\n * @class ResourceAttributesApi\n * @extends {BaseAPI}\n */\nexport class ResourceAttributesApi extends BaseAPI {\n  /**\n   * Creates a new attribute as part of the resource definition.\n   * @summary Create Resource Attribute\n   * @param {ResourceAttributesApiCreateResourceAttributeRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceAttributesApi\n   */\n  public createResourceAttribute(\n    requestParameters: ResourceAttributesApiCreateResourceAttributeRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ResourceAttributesApiFp(this.configuration)\n      .createResourceAttribute(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.resourceId,\n        requestParameters.resourceAttributeCreate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Deletes the attribute and all its related data.  Note: If the attribute is used by policies, removing it will cause the attribute to evaluate as `undefined`.\n   * @summary Delete Resource Attribute\n   * @param {ResourceAttributesApiDeleteResourceAttributeRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceAttributesApi\n   */\n  public deleteResourceAttribute(\n    requestParameters: ResourceAttributesApiDeleteResourceAttributeRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ResourceAttributesApiFp(this.configuration)\n      .deleteResourceAttribute(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.resourceId,\n        requestParameters.attributeId,\n        requestParameters.page,\n        requestParameters.perPage,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Gets a single attribute defined on the resource, if such attribute exists.\n   * @summary Get Resource Attribute\n   * @param {ResourceAttributesApiGetResourceAttributeRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceAttributesApi\n   */\n  public getResourceAttribute(\n    requestParameters: ResourceAttributesApiGetResourceAttributeRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ResourceAttributesApiFp(this.configuration)\n      .getResourceAttribute(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.resourceId,\n        requestParameters.attributeId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Lists all the attributes defined on the resource.\n   * @summary List Resource Attributes\n   * @param {ResourceAttributesApiListResourceAttributesRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceAttributesApi\n   */\n  public listResourceAttributes(\n    requestParameters: ResourceAttributesApiListResourceAttributesRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ResourceAttributesApiFp(this.configuration)\n      .listResourceAttributes(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.resourceId,\n        requestParameters.page,\n        requestParameters.perPage,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Partially updates the attribute defined on a resource. Fields that will be provided will be completely overwritten.\n   * @summary Update Resource Attribute\n   * @param {ResourceAttributesApiUpdateResourceAttributeRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceAttributesApi\n   */\n  public updateResourceAttribute(\n    requestParameters: ResourceAttributesApiUpdateResourceAttributeRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ResourceAttributesApiFp(this.configuration)\n      .updateResourceAttribute(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.resourceId,\n        requestParameters.attributeId,\n        requestParameters.resourceAttributeUpdate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n// @ts-ignore\nimport { ResourceInstanceCreate } from '../types';\n// @ts-ignore\nimport { ResourceInstanceRead } from '../types';\n// @ts-ignore\nimport { ResourceInstanceUpdate } from '../types';\n/**\n * ResourceInstancesApi - axios parameter creator\n * @export\n */\nexport const ResourceInstancesApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     * Creates a new instance inside the Permit.io system.  If the instance is already created: will return 200 instead of 201, and will return the existing instance object in the response body.\n     * @summary Create Resource Instance\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceInstanceCreate} resourceInstanceCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createResourceInstance: async (\n      projId: string,\n      envId: string,\n      resourceInstanceCreate: ResourceInstanceCreate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('createResourceInstance', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('createResourceInstance', 'envId', envId);\n      // verify required parameter 'resourceInstanceCreate' is not null or undefined\n      assertParamExists('createResourceInstance', 'resourceInstanceCreate', resourceInstanceCreate);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/resource_instances`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        resourceInstanceCreate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Deletes the instance and all its related data.\n     * @summary Delete Resource Instance\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} instanceId Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteResourceInstance: async (\n      projId: string,\n      envId: string,\n      instanceId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('deleteResourceInstance', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('deleteResourceInstance', 'envId', envId);\n      // verify required parameter 'instanceId' is not null or undefined\n      assertParamExists('deleteResourceInstance', 'instanceId', instanceId);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/resource_instances/{instance_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'instance_id'}}`, encodeURIComponent(String(instanceId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Gets a instance, if such instance exists. Otherwise returns 404.\n     * @summary Get Resource Instance\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} instanceId Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getResourceInstance: async (\n      projId: string,\n      envId: string,\n      instanceId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getResourceInstance', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getResourceInstance', 'envId', envId);\n      // verify required parameter 'instanceId' is not null or undefined\n      assertParamExists('getResourceInstance', 'instanceId', instanceId);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/resource_instances/{instance_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'instance_id'}}`, encodeURIComponent(String(instanceId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Lists all the resource instances defined within an environment.\n     * @summary List Resource Instances\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [tenant] The tenant key or id to filter by\n     * @param {string} [resource] The resource key or id to filter by\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listResourceInstances: async (\n      projId: string,\n      envId: string,\n      tenant?: string,\n      resource?: string,\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('listResourceInstances', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('listResourceInstances', 'envId', envId);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/resource_instances`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (tenant !== undefined) {\n        localVarQueryParameter['tenant'] = tenant;\n      }\n\n      if (resource !== undefined) {\n        localVarQueryParameter['resource'] = resource;\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Partially updates the instance definition. Fields that will be provided will be completely overwritten.\n     * @summary Update Resource Instance\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} instanceId Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceInstanceUpdate} resourceInstanceUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateResourceInstance: async (\n      projId: string,\n      envId: string,\n      instanceId: string,\n      resourceInstanceUpdate: ResourceInstanceUpdate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('updateResourceInstance', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('updateResourceInstance', 'envId', envId);\n      // verify required parameter 'instanceId' is not null or undefined\n      assertParamExists('updateResourceInstance', 'instanceId', instanceId);\n      // verify required parameter 'resourceInstanceUpdate' is not null or undefined\n      assertParamExists('updateResourceInstance', 'resourceInstanceUpdate', resourceInstanceUpdate);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/resource_instances/{instance_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'instance_id'}}`, encodeURIComponent(String(instanceId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        resourceInstanceUpdate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * ResourceInstancesApi - functional programming interface\n * @export\n */\nexport const ResourceInstancesApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = ResourceInstancesApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * Creates a new instance inside the Permit.io system.  If the instance is already created: will return 200 instead of 201, and will return the existing instance object in the response body.\n     * @summary Create Resource Instance\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceInstanceCreate} resourceInstanceCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async createResourceInstance(\n      projId: string,\n      envId: string,\n      resourceInstanceCreate: ResourceInstanceCreate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceInstanceRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.createResourceInstance(\n        projId,\n        envId,\n        resourceInstanceCreate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Deletes the instance and all its related data.\n     * @summary Delete Resource Instance\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} instanceId Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async deleteResourceInstance(\n      projId: string,\n      envId: string,\n      instanceId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteResourceInstance(\n        projId,\n        envId,\n        instanceId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Gets a instance, if such instance exists. Otherwise returns 404.\n     * @summary Get Resource Instance\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} instanceId Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getResourceInstance(\n      projId: string,\n      envId: string,\n      instanceId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceInstanceRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getResourceInstance(\n        projId,\n        envId,\n        instanceId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Lists all the resource instances defined within an environment.\n     * @summary List Resource Instances\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [tenant] The tenant key or id to filter by\n     * @param {string} [resource] The resource key or id to filter by\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async listResourceInstances(\n      projId: string,\n      envId: string,\n      tenant?: string,\n      resource?: string,\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ResourceInstanceRead>>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.listResourceInstances(\n        projId,\n        envId,\n        tenant,\n        resource,\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Partially updates the instance definition. Fields that will be provided will be completely overwritten.\n     * @summary Update Resource Instance\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} instanceId Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceInstanceUpdate} resourceInstanceUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async updateResourceInstance(\n      projId: string,\n      envId: string,\n      instanceId: string,\n      resourceInstanceUpdate: ResourceInstanceUpdate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceInstanceRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.updateResourceInstance(\n        projId,\n        envId,\n        instanceId,\n        resourceInstanceUpdate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * ResourceInstancesApi - factory interface\n * @export\n */\nexport const ResourceInstancesApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = ResourceInstancesApiFp(configuration);\n  return {\n    /**\n     * Creates a new instance inside the Permit.io system.  If the instance is already created: will return 200 instead of 201, and will return the existing instance object in the response body.\n     * @summary Create Resource Instance\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceInstanceCreate} resourceInstanceCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createResourceInstance(\n      projId: string,\n      envId: string,\n      resourceInstanceCreate: ResourceInstanceCreate,\n      options?: any,\n    ): AxiosPromise<ResourceInstanceRead> {\n      return localVarFp\n        .createResourceInstance(projId, envId, resourceInstanceCreate, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Deletes the instance and all its related data.\n     * @summary Delete Resource Instance\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} instanceId Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteResourceInstance(\n      projId: string,\n      envId: string,\n      instanceId: string,\n      options?: any,\n    ): AxiosPromise<void> {\n      return localVarFp\n        .deleteResourceInstance(projId, envId, instanceId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Gets a instance, if such instance exists. Otherwise returns 404.\n     * @summary Get Resource Instance\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} instanceId Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getResourceInstance(\n      projId: string,\n      envId: string,\n      instanceId: string,\n      options?: any,\n    ): AxiosPromise<ResourceInstanceRead> {\n      return localVarFp\n        .getResourceInstance(projId, envId, instanceId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Lists all the resource instances defined within an environment.\n     * @summary List Resource Instances\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [tenant] The tenant key or id to filter by\n     * @param {string} [resource] The resource key or id to filter by\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listResourceInstances(\n      projId: string,\n      envId: string,\n      tenant?: string,\n      resource?: string,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<Array<ResourceInstanceRead>> {\n      return localVarFp\n        .listResourceInstances(projId, envId, tenant, resource, page, perPage, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Partially updates the instance definition. Fields that will be provided will be completely overwritten.\n     * @summary Update Resource Instance\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} instanceId Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceInstanceUpdate} resourceInstanceUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateResourceInstance(\n      projId: string,\n      envId: string,\n      instanceId: string,\n      resourceInstanceUpdate: ResourceInstanceUpdate,\n      options?: any,\n    ): AxiosPromise<ResourceInstanceRead> {\n      return localVarFp\n        .updateResourceInstance(projId, envId, instanceId, resourceInstanceUpdate, options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for createResourceInstance operation in ResourceInstancesApi.\n * @export\n * @interface ResourceInstancesApiCreateResourceInstanceRequest\n */\nexport interface ResourceInstancesApiCreateResourceInstanceRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceInstancesApiCreateResourceInstance\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceInstancesApiCreateResourceInstance\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {ResourceInstanceCreate}\n   * @memberof ResourceInstancesApiCreateResourceInstance\n   */\n  readonly resourceInstanceCreate: ResourceInstanceCreate;\n}\n\n/**\n * Request parameters for deleteResourceInstance operation in ResourceInstancesApi.\n * @export\n * @interface ResourceInstancesApiDeleteResourceInstanceRequest\n */\nexport interface ResourceInstancesApiDeleteResourceInstanceRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceInstancesApiDeleteResourceInstance\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceInstancesApiDeleteResourceInstance\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceInstancesApiDeleteResourceInstance\n   */\n  readonly instanceId: string;\n}\n\n/**\n * Request parameters for getResourceInstance operation in ResourceInstancesApi.\n * @export\n * @interface ResourceInstancesApiGetResourceInstanceRequest\n */\nexport interface ResourceInstancesApiGetResourceInstanceRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceInstancesApiGetResourceInstance\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceInstancesApiGetResourceInstance\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceInstancesApiGetResourceInstance\n   */\n  readonly instanceId: string;\n}\n\n/**\n * Request parameters for listResourceInstances operation in ResourceInstancesApi.\n * @export\n * @interface ResourceInstancesApiListResourceInstancesRequest\n */\nexport interface ResourceInstancesApiListResourceInstancesRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceInstancesApiListResourceInstances\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceInstancesApiListResourceInstances\n   */\n  readonly envId: string;\n\n  /**\n   * The tenant key or id to filter by\n   * @type {string}\n   * @memberof ResourceInstancesApiListResourceInstances\n   */\n  readonly tenant?: string;\n\n  /**\n   * The resource key or id to filter by\n   * @type {string}\n   * @memberof ResourceInstancesApiListResourceInstances\n   */\n  readonly resource?: string;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof ResourceInstancesApiListResourceInstances\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof ResourceInstancesApiListResourceInstances\n   */\n  readonly perPage?: number;\n}\n\n/**\n * Request parameters for updateResourceInstance operation in ResourceInstancesApi.\n * @export\n * @interface ResourceInstancesApiUpdateResourceInstanceRequest\n */\nexport interface ResourceInstancesApiUpdateResourceInstanceRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceInstancesApiUpdateResourceInstance\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceInstancesApiUpdateResourceInstance\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceInstancesApiUpdateResourceInstance\n   */\n  readonly instanceId: string;\n\n  /**\n   *\n   * @type {ResourceInstanceUpdate}\n   * @memberof ResourceInstancesApiUpdateResourceInstance\n   */\n  readonly resourceInstanceUpdate: ResourceInstanceUpdate;\n}\n\n/**\n * ResourceInstancesApi - object-oriented interface\n * @export\n * @class ResourceInstancesApi\n * @extends {BaseAPI}\n */\nexport class ResourceInstancesApi extends BaseAPI {\n  /**\n   * Creates a new instance inside the Permit.io system.  If the instance is already created: will return 200 instead of 201, and will return the existing instance object in the response body.\n   * @summary Create Resource Instance\n   * @param {ResourceInstancesApiCreateResourceInstanceRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceInstancesApi\n   */\n  public createResourceInstance(\n    requestParameters: ResourceInstancesApiCreateResourceInstanceRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ResourceInstancesApiFp(this.configuration)\n      .createResourceInstance(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.resourceInstanceCreate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Deletes the instance and all its related data.\n   * @summary Delete Resource Instance\n   * @param {ResourceInstancesApiDeleteResourceInstanceRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceInstancesApi\n   */\n  public deleteResourceInstance(\n    requestParameters: ResourceInstancesApiDeleteResourceInstanceRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ResourceInstancesApiFp(this.configuration)\n      .deleteResourceInstance(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.instanceId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Gets a instance, if such instance exists. Otherwise returns 404.\n   * @summary Get Resource Instance\n   * @param {ResourceInstancesApiGetResourceInstanceRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceInstancesApi\n   */\n  public getResourceInstance(\n    requestParameters: ResourceInstancesApiGetResourceInstanceRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ResourceInstancesApiFp(this.configuration)\n      .getResourceInstance(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.instanceId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Lists all the resource instances defined within an environment.\n   * @summary List Resource Instances\n   * @param {ResourceInstancesApiListResourceInstancesRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceInstancesApi\n   */\n  public listResourceInstances(\n    requestParameters: ResourceInstancesApiListResourceInstancesRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ResourceInstancesApiFp(this.configuration)\n      .listResourceInstances(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.tenant,\n        requestParameters.resource,\n        requestParameters.page,\n        requestParameters.perPage,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Partially updates the instance definition. Fields that will be provided will be completely overwritten.\n   * @summary Update Resource Instance\n   * @param {ResourceInstancesApiUpdateResourceInstanceRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceInstancesApi\n   */\n  public updateResourceInstance(\n    requestParameters: ResourceInstancesApiUpdateResourceInstanceRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ResourceInstancesApiFp(this.configuration)\n      .updateResourceInstance(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.instanceId,\n        requestParameters.resourceInstanceUpdate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n// @ts-ignore\nimport { RelationCreate } from '../types';\n// @ts-ignore\nimport { RelationRead } from '../types';\n/**\n * ResourceRelationsApi - axios parameter creator\n * @export\n */\nexport const ResourceRelationsApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     * Creates a resource relation to another resource\n     * @summary Create Resource Relation\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {RelationCreate} relationCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createResourceRelation: async (\n      projId: string,\n      envId: string,\n      resourceId: string,\n      relationCreate: RelationCreate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('createResourceRelation', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('createResourceRelation', 'envId', envId);\n      // verify required parameter 'resourceId' is not null or undefined\n      assertParamExists('createResourceRelation', 'resourceId', resourceId);\n      // verify required parameter 'relationCreate' is not null or undefined\n      assertParamExists('createResourceRelation', 'relationCreate', relationCreate);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/relations`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        relationCreate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Deletes a resource relation\n     * @summary Delete Resource Relation\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} relationId Either the unique id of the relation, or the URL-friendly key of the relation (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteResourceRelation: async (\n      projId: string,\n      envId: string,\n      resourceId: string,\n      relationId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('deleteResourceRelation', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('deleteResourceRelation', 'envId', envId);\n      // verify required parameter 'resourceId' is not null or undefined\n      assertParamExists('deleteResourceRelation', 'resourceId', resourceId);\n      // verify required parameter 'relationId' is not null or undefined\n      assertParamExists('deleteResourceRelation', 'relationId', relationId);\n      const localVarPath =\n        `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/relations/{relation_id}`\n          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n          .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))\n          .replace(`{${'relation_id'}}`, encodeURIComponent(String(relationId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Get a resource relation\n     * @summary Get Resource Relation\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} relationId Either the unique id of the relation, or the URL-friendly key of the relation (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getResourceRelation: async (\n      projId: string,\n      envId: string,\n      resourceId: string,\n      relationId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getResourceRelation', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getResourceRelation', 'envId', envId);\n      // verify required parameter 'resourceId' is not null or undefined\n      assertParamExists('getResourceRelation', 'resourceId', resourceId);\n      // verify required parameter 'relationId' is not null or undefined\n      assertParamExists('getResourceRelation', 'relationId', relationId);\n      const localVarPath =\n        `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/relations/{relation_id}`\n          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n          .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))\n          .replace(`{${'relation_id'}}`, encodeURIComponent(String(relationId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Creates a resource relation to another resource\n     * @summary List Resource Relations\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listResourceRelations: async (\n      projId: string,\n      envId: string,\n      resourceId: string,\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('listResourceRelations', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('listResourceRelations', 'envId', envId);\n      // verify required parameter 'resourceId' is not null or undefined\n      assertParamExists('listResourceRelations', 'resourceId', resourceId);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/relations`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * ResourceRelationsApi - functional programming interface\n * @export\n */\nexport const ResourceRelationsApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = ResourceRelationsApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * Creates a resource relation to another resource\n     * @summary Create Resource Relation\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {RelationCreate} relationCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async createResourceRelation(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      relationCreate: RelationCreate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RelationRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.createResourceRelation(\n        projId,\n        envId,\n        resourceId,\n        relationCreate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Deletes a resource relation\n     * @summary Delete Resource Relation\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} relationId Either the unique id of the relation, or the URL-friendly key of the relation (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async deleteResourceRelation(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      relationId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteResourceRelation(\n        projId,\n        envId,\n        resourceId,\n        relationId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Get a resource relation\n     * @summary Get Resource Relation\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} relationId Either the unique id of the relation, or the URL-friendly key of the relation (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getResourceRelation(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      relationId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RelationRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getResourceRelation(\n        projId,\n        envId,\n        resourceId,\n        relationId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Creates a resource relation to another resource\n     * @summary List Resource Relations\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async listResourceRelations(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RelationRead>>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.listResourceRelations(\n        projId,\n        envId,\n        resourceId,\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * ResourceRelationsApi - factory interface\n * @export\n */\nexport const ResourceRelationsApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = ResourceRelationsApiFp(configuration);\n  return {\n    /**\n     * Creates a resource relation to another resource\n     * @summary Create Resource Relation\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {RelationCreate} relationCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createResourceRelation(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      relationCreate: RelationCreate,\n      options?: any,\n    ): AxiosPromise<RelationRead> {\n      return localVarFp\n        .createResourceRelation(projId, envId, resourceId, relationCreate, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Deletes a resource relation\n     * @summary Delete Resource Relation\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} relationId Either the unique id of the relation, or the URL-friendly key of the relation (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteResourceRelation(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      relationId: string,\n      options?: any,\n    ): AxiosPromise<void> {\n      return localVarFp\n        .deleteResourceRelation(projId, envId, resourceId, relationId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Get a resource relation\n     * @summary Get Resource Relation\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} relationId Either the unique id of the relation, or the URL-friendly key of the relation (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getResourceRelation(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      relationId: string,\n      options?: any,\n    ): AxiosPromise<RelationRead> {\n      return localVarFp\n        .getResourceRelation(projId, envId, resourceId, relationId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Creates a resource relation to another resource\n     * @summary List Resource Relations\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listResourceRelations(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<Array<RelationRead>> {\n      return localVarFp\n        .listResourceRelations(projId, envId, resourceId, page, perPage, options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for createResourceRelation operation in ResourceRelationsApi.\n * @export\n * @interface ResourceRelationsApiCreateResourceRelationRequest\n */\nexport interface ResourceRelationsApiCreateResourceRelationRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceRelationsApiCreateResourceRelation\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceRelationsApiCreateResourceRelation\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceRelationsApiCreateResourceRelation\n   */\n  readonly resourceId: string;\n\n  /**\n   *\n   * @type {RelationCreate}\n   * @memberof ResourceRelationsApiCreateResourceRelation\n   */\n  readonly relationCreate: RelationCreate;\n}\n\n/**\n * Request parameters for deleteResourceRelation operation in ResourceRelationsApi.\n * @export\n * @interface ResourceRelationsApiDeleteResourceRelationRequest\n */\nexport interface ResourceRelationsApiDeleteResourceRelationRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceRelationsApiDeleteResourceRelation\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceRelationsApiDeleteResourceRelation\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceRelationsApiDeleteResourceRelation\n   */\n  readonly resourceId: string;\n\n  /**\n   * Either the unique id of the relation, or the URL-friendly key of the relation (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceRelationsApiDeleteResourceRelation\n   */\n  readonly relationId: string;\n}\n\n/**\n * Request parameters for getResourceRelation operation in ResourceRelationsApi.\n * @export\n * @interface ResourceRelationsApiGetResourceRelationRequest\n */\nexport interface ResourceRelationsApiGetResourceRelationRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceRelationsApiGetResourceRelation\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceRelationsApiGetResourceRelation\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceRelationsApiGetResourceRelation\n   */\n  readonly resourceId: string;\n\n  /**\n   * Either the unique id of the relation, or the URL-friendly key of the relation (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceRelationsApiGetResourceRelation\n   */\n  readonly relationId: string;\n}\n\n/**\n * Request parameters for listResourceRelations operation in ResourceRelationsApi.\n * @export\n * @interface ResourceRelationsApiListResourceRelationsRequest\n */\nexport interface ResourceRelationsApiListResourceRelationsRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceRelationsApiListResourceRelations\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceRelationsApiListResourceRelations\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceRelationsApiListResourceRelations\n   */\n  readonly resourceId: string;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof ResourceRelationsApiListResourceRelations\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof ResourceRelationsApiListResourceRelations\n   */\n  readonly perPage?: number;\n}\n\n/**\n * ResourceRelationsApi - object-oriented interface\n * @export\n * @class ResourceRelationsApi\n * @extends {BaseAPI}\n */\nexport class ResourceRelationsApi extends BaseAPI {\n  /**\n   * Creates a resource relation to another resource\n   * @summary Create Resource Relation\n   * @param {ResourceRelationsApiCreateResourceRelationRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceRelationsApi\n   */\n  public createResourceRelation(\n    requestParameters: ResourceRelationsApiCreateResourceRelationRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ResourceRelationsApiFp(this.configuration)\n      .createResourceRelation(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.resourceId,\n        requestParameters.relationCreate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Deletes a resource relation\n   * @summary Delete Resource Relation\n   * @param {ResourceRelationsApiDeleteResourceRelationRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceRelationsApi\n   */\n  public deleteResourceRelation(\n    requestParameters: ResourceRelationsApiDeleteResourceRelationRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ResourceRelationsApiFp(this.configuration)\n      .deleteResourceRelation(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.resourceId,\n        requestParameters.relationId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Get a resource relation\n   * @summary Get Resource Relation\n   * @param {ResourceRelationsApiGetResourceRelationRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceRelationsApi\n   */\n  public getResourceRelation(\n    requestParameters: ResourceRelationsApiGetResourceRelationRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ResourceRelationsApiFp(this.configuration)\n      .getResourceRelation(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.resourceId,\n        requestParameters.relationId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Creates a resource relation to another resource\n   * @summary List Resource Relations\n   * @param {ResourceRelationsApiListResourceRelationsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceRelationsApi\n   */\n  public listResourceRelations(\n    requestParameters: ResourceRelationsApiListResourceRelationsRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ResourceRelationsApiFp(this.configuration)\n      .listResourceRelations(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.resourceId,\n        requestParameters.page,\n        requestParameters.perPage,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { AddRolePermissions } from '../types';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n// @ts-ignore\nimport { RemoveRolePermissions } from '../types';\n// @ts-ignore\nimport { ResourceRoleCreate } from '../types';\n// @ts-ignore\nimport { ResourceRoleRead } from '../types';\n// @ts-ignore\nimport { ResourceRoleUpdate } from '../types';\n/**\n * ResourceRolesApi - axios parameter creator\n * @export\n */\nexport const ResourceRolesApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     * Assign permissions to role.  If some of the permissions specified are already assigned, will skip them.\n     * @summary Assign Permissions to Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {AddRolePermissions} addRolePermissions\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    assignPermissionsToResourceRole: async (\n      projId: string,\n      envId: string,\n      resourceId: string,\n      roleId: string,\n      addRolePermissions: AddRolePermissions,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('assignPermissionsToResourceRole', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('assignPermissionsToResourceRole', 'envId', envId);\n      // verify required parameter 'resourceId' is not null or undefined\n      assertParamExists('assignPermissionsToResourceRole', 'resourceId', resourceId);\n      // verify required parameter 'roleId' is not null or undefined\n      assertParamExists('assignPermissionsToResourceRole', 'roleId', roleId);\n      // verify required parameter 'addRolePermissions' is not null or undefined\n      assertParamExists(\n        'assignPermissionsToResourceRole',\n        'addRolePermissions',\n        addRolePermissions,\n      );\n      const localVarPath =\n        `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/permissions`\n          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n          .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))\n          .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        addRolePermissions,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Creates a new role associated with the resource.\n     * @summary Create Resource Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceRoleCreate} resourceRoleCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createResourceRole: async (\n      projId: string,\n      envId: string,\n      resourceId: string,\n      resourceRoleCreate: ResourceRoleCreate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('createResourceRole', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('createResourceRole', 'envId', envId);\n      // verify required parameter 'resourceId' is not null or undefined\n      assertParamExists('createResourceRole', 'resourceId', resourceId);\n      // verify required parameter 'resourceRoleCreate' is not null or undefined\n      assertParamExists('createResourceRole', 'resourceRoleCreate', resourceRoleCreate);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        resourceRoleCreate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Deletes the role and all its related data. This includes any permissions granted to said role.\n     * @summary Delete Resource Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteResourceRole: async (\n      projId: string,\n      envId: string,\n      resourceId: string,\n      roleId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('deleteResourceRole', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('deleteResourceRole', 'envId', envId);\n      // verify required parameter 'resourceId' is not null or undefined\n      assertParamExists('deleteResourceRole', 'resourceId', resourceId);\n      // verify required parameter 'roleId' is not null or undefined\n      assertParamExists('deleteResourceRole', 'roleId', roleId);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))\n        .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Gets a single role defined on the resource, if such role exists.\n     * @summary Get Resource Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getResourceRole: async (\n      projId: string,\n      envId: string,\n      resourceId: string,\n      roleId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getResourceRole', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getResourceRole', 'envId', envId);\n      // verify required parameter 'resourceId' is not null or undefined\n      assertParamExists('getResourceRole', 'resourceId', resourceId);\n      // verify required parameter 'roleId' is not null or undefined\n      assertParamExists('getResourceRole', 'roleId', roleId);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))\n        .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Lists all the roles defined on the resource.\n     * @summary List Resource Roles\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listResourceRoles: async (\n      projId: string,\n      envId: string,\n      resourceId: string,\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('listResourceRoles', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('listResourceRoles', 'envId', envId);\n      // verify required parameter 'resourceId' is not null or undefined\n      assertParamExists('listResourceRoles', 'resourceId', resourceId);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Remove permissions from role.  If some of the permissions specified are already unassigned, will skip them.\n     * @summary Remove Permissions from Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {RemoveRolePermissions} removeRolePermissions\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    removePermissionsFromResourceRole: async (\n      projId: string,\n      envId: string,\n      resourceId: string,\n      roleId: string,\n      removeRolePermissions: RemoveRolePermissions,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('removePermissionsFromResourceRole', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('removePermissionsFromResourceRole', 'envId', envId);\n      // verify required parameter 'resourceId' is not null or undefined\n      assertParamExists('removePermissionsFromResourceRole', 'resourceId', resourceId);\n      // verify required parameter 'roleId' is not null or undefined\n      assertParamExists('removePermissionsFromResourceRole', 'roleId', roleId);\n      // verify required parameter 'removeRolePermissions' is not null or undefined\n      assertParamExists(\n        'removePermissionsFromResourceRole',\n        'removeRolePermissions',\n        removeRolePermissions,\n      );\n      const localVarPath =\n        `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/permissions`\n          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n          .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))\n          .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        removeRolePermissions,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Partially updates the role defined on a resource. Fields that will be provided will be completely overwritten.\n     * @summary Update Resource Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceRoleUpdate} resourceRoleUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateResourceRole: async (\n      projId: string,\n      envId: string,\n      resourceId: string,\n      roleId: string,\n      resourceRoleUpdate: ResourceRoleUpdate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('updateResourceRole', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('updateResourceRole', 'envId', envId);\n      // verify required parameter 'resourceId' is not null or undefined\n      assertParamExists('updateResourceRole', 'resourceId', resourceId);\n      // verify required parameter 'roleId' is not null or undefined\n      assertParamExists('updateResourceRole', 'roleId', roleId);\n      // verify required parameter 'resourceRoleUpdate' is not null or undefined\n      assertParamExists('updateResourceRole', 'resourceRoleUpdate', resourceRoleUpdate);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))\n        .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        resourceRoleUpdate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * ResourceRolesApi - functional programming interface\n * @export\n */\nexport const ResourceRolesApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = ResourceRolesApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * Assign permissions to role.  If some of the permissions specified are already assigned, will skip them.\n     * @summary Assign Permissions to Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {AddRolePermissions} addRolePermissions\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async assignPermissionsToResourceRole(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      roleId: string,\n      addRolePermissions: AddRolePermissions,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceRoleRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.assignPermissionsToResourceRole(\n        projId,\n        envId,\n        resourceId,\n        roleId,\n        addRolePermissions,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Creates a new role associated with the resource.\n     * @summary Create Resource Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceRoleCreate} resourceRoleCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async createResourceRole(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      resourceRoleCreate: ResourceRoleCreate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceRoleRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.createResourceRole(\n        projId,\n        envId,\n        resourceId,\n        resourceRoleCreate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Deletes the role and all its related data. This includes any permissions granted to said role.\n     * @summary Delete Resource Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async deleteResourceRole(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      roleId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteResourceRole(\n        projId,\n        envId,\n        resourceId,\n        roleId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Gets a single role defined on the resource, if such role exists.\n     * @summary Get Resource Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getResourceRole(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      roleId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceRoleRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getResourceRole(\n        projId,\n        envId,\n        resourceId,\n        roleId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Lists all the roles defined on the resource.\n     * @summary List Resource Roles\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async listResourceRoles(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ResourceRoleRead>>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.listResourceRoles(\n        projId,\n        envId,\n        resourceId,\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Remove permissions from role.  If some of the permissions specified are already unassigned, will skip them.\n     * @summary Remove Permissions from Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {RemoveRolePermissions} removeRolePermissions\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async removePermissionsFromResourceRole(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      roleId: string,\n      removeRolePermissions: RemoveRolePermissions,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceRoleRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.removePermissionsFromResourceRole(\n        projId,\n        envId,\n        resourceId,\n        roleId,\n        removeRolePermissions,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Partially updates the role defined on a resource. Fields that will be provided will be completely overwritten.\n     * @summary Update Resource Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceRoleUpdate} resourceRoleUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async updateResourceRole(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      roleId: string,\n      resourceRoleUpdate: ResourceRoleUpdate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceRoleRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.updateResourceRole(\n        projId,\n        envId,\n        resourceId,\n        roleId,\n        resourceRoleUpdate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * ResourceRolesApi - factory interface\n * @export\n */\nexport const ResourceRolesApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = ResourceRolesApiFp(configuration);\n  return {\n    /**\n     * Assign permissions to role.  If some of the permissions specified are already assigned, will skip them.\n     * @summary Assign Permissions to Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {AddRolePermissions} addRolePermissions\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    assignPermissionsToResourceRole(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      roleId: string,\n      addRolePermissions: AddRolePermissions,\n      options?: any,\n    ): AxiosPromise<ResourceRoleRead> {\n      return localVarFp\n        .assignPermissionsToResourceRole(\n          projId,\n          envId,\n          resourceId,\n          roleId,\n          addRolePermissions,\n          options,\n        )\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Creates a new role associated with the resource.\n     * @summary Create Resource Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceRoleCreate} resourceRoleCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createResourceRole(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      resourceRoleCreate: ResourceRoleCreate,\n      options?: any,\n    ): AxiosPromise<ResourceRoleRead> {\n      return localVarFp\n        .createResourceRole(projId, envId, resourceId, resourceRoleCreate, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Deletes the role and all its related data. This includes any permissions granted to said role.\n     * @summary Delete Resource Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteResourceRole(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      roleId: string,\n      options?: any,\n    ): AxiosPromise<void> {\n      return localVarFp\n        .deleteResourceRole(projId, envId, resourceId, roleId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Gets a single role defined on the resource, if such role exists.\n     * @summary Get Resource Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getResourceRole(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      roleId: string,\n      options?: any,\n    ): AxiosPromise<ResourceRoleRead> {\n      return localVarFp\n        .getResourceRole(projId, envId, resourceId, roleId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Lists all the roles defined on the resource.\n     * @summary List Resource Roles\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listResourceRoles(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<Array<ResourceRoleRead>> {\n      return localVarFp\n        .listResourceRoles(projId, envId, resourceId, page, perPage, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Remove permissions from role.  If some of the permissions specified are already unassigned, will skip them.\n     * @summary Remove Permissions from Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {RemoveRolePermissions} removeRolePermissions\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    removePermissionsFromResourceRole(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      roleId: string,\n      removeRolePermissions: RemoveRolePermissions,\n      options?: any,\n    ): AxiosPromise<ResourceRoleRead> {\n      return localVarFp\n        .removePermissionsFromResourceRole(\n          projId,\n          envId,\n          resourceId,\n          roleId,\n          removeRolePermissions,\n          options,\n        )\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Partially updates the role defined on a resource. Fields that will be provided will be completely overwritten.\n     * @summary Update Resource Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceRoleUpdate} resourceRoleUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateResourceRole(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      roleId: string,\n      resourceRoleUpdate: ResourceRoleUpdate,\n      options?: any,\n    ): AxiosPromise<ResourceRoleRead> {\n      return localVarFp\n        .updateResourceRole(projId, envId, resourceId, roleId, resourceRoleUpdate, options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for assignPermissionsToResourceRole operation in ResourceRolesApi.\n * @export\n * @interface ResourceRolesApiAssignPermissionsToResourceRoleRequest\n */\nexport interface ResourceRolesApiAssignPermissionsToResourceRoleRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceRolesApiAssignPermissionsToResourceRole\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceRolesApiAssignPermissionsToResourceRole\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceRolesApiAssignPermissionsToResourceRole\n   */\n  readonly resourceId: string;\n\n  /**\n   * Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceRolesApiAssignPermissionsToResourceRole\n   */\n  readonly roleId: string;\n\n  /**\n   *\n   * @type {AddRolePermissions}\n   * @memberof ResourceRolesApiAssignPermissionsToResourceRole\n   */\n  readonly addRolePermissions: AddRolePermissions;\n}\n\n/**\n * Request parameters for createResourceRole operation in ResourceRolesApi.\n * @export\n * @interface ResourceRolesApiCreateResourceRoleRequest\n */\nexport interface ResourceRolesApiCreateResourceRoleRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceRolesApiCreateResourceRole\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceRolesApiCreateResourceRole\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceRolesApiCreateResourceRole\n   */\n  readonly resourceId: string;\n\n  /**\n   *\n   * @type {ResourceRoleCreate}\n   * @memberof ResourceRolesApiCreateResourceRole\n   */\n  readonly resourceRoleCreate: ResourceRoleCreate;\n}\n\n/**\n * Request parameters for deleteResourceRole operation in ResourceRolesApi.\n * @export\n * @interface ResourceRolesApiDeleteResourceRoleRequest\n */\nexport interface ResourceRolesApiDeleteResourceRoleRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceRolesApiDeleteResourceRole\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceRolesApiDeleteResourceRole\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceRolesApiDeleteResourceRole\n   */\n  readonly resourceId: string;\n\n  /**\n   * Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceRolesApiDeleteResourceRole\n   */\n  readonly roleId: string;\n}\n\n/**\n * Request parameters for getResourceRole operation in ResourceRolesApi.\n * @export\n * @interface ResourceRolesApiGetResourceRoleRequest\n */\nexport interface ResourceRolesApiGetResourceRoleRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceRolesApiGetResourceRole\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceRolesApiGetResourceRole\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceRolesApiGetResourceRole\n   */\n  readonly resourceId: string;\n\n  /**\n   * Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceRolesApiGetResourceRole\n   */\n  readonly roleId: string;\n}\n\n/**\n * Request parameters for listResourceRoles operation in ResourceRolesApi.\n * @export\n * @interface ResourceRolesApiListResourceRolesRequest\n */\nexport interface ResourceRolesApiListResourceRolesRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceRolesApiListResourceRoles\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceRolesApiListResourceRoles\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceRolesApiListResourceRoles\n   */\n  readonly resourceId: string;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof ResourceRolesApiListResourceRoles\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof ResourceRolesApiListResourceRoles\n   */\n  readonly perPage?: number;\n}\n\n/**\n * Request parameters for removePermissionsFromResourceRole operation in ResourceRolesApi.\n * @export\n * @interface ResourceRolesApiRemovePermissionsFromResourceRoleRequest\n */\nexport interface ResourceRolesApiRemovePermissionsFromResourceRoleRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceRolesApiRemovePermissionsFromResourceRole\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceRolesApiRemovePermissionsFromResourceRole\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceRolesApiRemovePermissionsFromResourceRole\n   */\n  readonly resourceId: string;\n\n  /**\n   * Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceRolesApiRemovePermissionsFromResourceRole\n   */\n  readonly roleId: string;\n\n  /**\n   *\n   * @type {RemoveRolePermissions}\n   * @memberof ResourceRolesApiRemovePermissionsFromResourceRole\n   */\n  readonly removeRolePermissions: RemoveRolePermissions;\n}\n\n/**\n * Request parameters for updateResourceRole operation in ResourceRolesApi.\n * @export\n * @interface ResourceRolesApiUpdateResourceRoleRequest\n */\nexport interface ResourceRolesApiUpdateResourceRoleRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceRolesApiUpdateResourceRole\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceRolesApiUpdateResourceRole\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceRolesApiUpdateResourceRole\n   */\n  readonly resourceId: string;\n\n  /**\n   * Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourceRolesApiUpdateResourceRole\n   */\n  readonly roleId: string;\n\n  /**\n   *\n   * @type {ResourceRoleUpdate}\n   * @memberof ResourceRolesApiUpdateResourceRole\n   */\n  readonly resourceRoleUpdate: ResourceRoleUpdate;\n}\n\n/**\n * ResourceRolesApi - object-oriented interface\n * @export\n * @class ResourceRolesApi\n * @extends {BaseAPI}\n */\nexport class ResourceRolesApi extends BaseAPI {\n  /**\n   * Assign permissions to role.  If some of the permissions specified are already assigned, will skip them.\n   * @summary Assign Permissions to Role\n   * @param {ResourceRolesApiAssignPermissionsToResourceRoleRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceRolesApi\n   */\n  public assignPermissionsToResourceRole(\n    requestParameters: ResourceRolesApiAssignPermissionsToResourceRoleRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ResourceRolesApiFp(this.configuration)\n      .assignPermissionsToResourceRole(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.resourceId,\n        requestParameters.roleId,\n        requestParameters.addRolePermissions,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Creates a new role associated with the resource.\n   * @summary Create Resource Role\n   * @param {ResourceRolesApiCreateResourceRoleRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceRolesApi\n   */\n  public createResourceRole(\n    requestParameters: ResourceRolesApiCreateResourceRoleRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ResourceRolesApiFp(this.configuration)\n      .createResourceRole(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.resourceId,\n        requestParameters.resourceRoleCreate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Deletes the role and all its related data. This includes any permissions granted to said role.\n   * @summary Delete Resource Role\n   * @param {ResourceRolesApiDeleteResourceRoleRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceRolesApi\n   */\n  public deleteResourceRole(\n    requestParameters: ResourceRolesApiDeleteResourceRoleRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ResourceRolesApiFp(this.configuration)\n      .deleteResourceRole(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.resourceId,\n        requestParameters.roleId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Gets a single role defined on the resource, if such role exists.\n   * @summary Get Resource Role\n   * @param {ResourceRolesApiGetResourceRoleRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceRolesApi\n   */\n  public getResourceRole(\n    requestParameters: ResourceRolesApiGetResourceRoleRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ResourceRolesApiFp(this.configuration)\n      .getResourceRole(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.resourceId,\n        requestParameters.roleId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Lists all the roles defined on the resource.\n   * @summary List Resource Roles\n   * @param {ResourceRolesApiListResourceRolesRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceRolesApi\n   */\n  public listResourceRoles(\n    requestParameters: ResourceRolesApiListResourceRolesRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ResourceRolesApiFp(this.configuration)\n      .listResourceRoles(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.resourceId,\n        requestParameters.page,\n        requestParameters.perPage,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Remove permissions from role.  If some of the permissions specified are already unassigned, will skip them.\n   * @summary Remove Permissions from Role\n   * @param {ResourceRolesApiRemovePermissionsFromResourceRoleRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceRolesApi\n   */\n  public removePermissionsFromResourceRole(\n    requestParameters: ResourceRolesApiRemovePermissionsFromResourceRoleRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ResourceRolesApiFp(this.configuration)\n      .removePermissionsFromResourceRole(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.resourceId,\n        requestParameters.roleId,\n        requestParameters.removeRolePermissions,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Partially updates the role defined on a resource. Fields that will be provided will be completely overwritten.\n   * @summary Update Resource Role\n   * @param {ResourceRolesApiUpdateResourceRoleRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourceRolesApi\n   */\n  public updateResourceRole(\n    requestParameters: ResourceRolesApiUpdateResourceRoleRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ResourceRolesApiFp(this.configuration)\n      .updateResourceRole(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.resourceId,\n        requestParameters.roleId,\n        requestParameters.resourceRoleUpdate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { HTTPValidationError, PaginatedResultResourceRead } from '../types';\n// @ts-ignore\nimport { ResourceCreate } from '../types';\n// @ts-ignore\nimport { ResourceRead } from '../types';\n// @ts-ignore\nimport { ResourceReplace } from '../types';\n// @ts-ignore\nimport { ResourceUpdate } from '../types';\n/**\n * ResourcesApi - axios parameter creator\n * @export\n */\nexport const ResourcesApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     * Creates a new resource (a type of object you may protect with permissions).\n     * @summary Create Resource\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceCreate} resourceCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createResource: async (\n      projId: string,\n      envId: string,\n      resourceCreate: ResourceCreate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('createResource', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('createResource', 'envId', envId);\n      // verify required parameter 'resourceCreate' is not null or undefined\n      assertParamExists('createResource', 'resourceCreate', resourceCreate);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        resourceCreate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Deletes the resource and all its related data.\n     * @summary Delete Resource\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteResource: async (\n      projId: string,\n      envId: string,\n      resourceId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('deleteResource', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('deleteResource', 'envId', envId);\n      // verify required parameter 'resourceId' is not null or undefined\n      assertParamExists('deleteResource', 'resourceId', resourceId);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Gets a single resource, if such resource exists.\n     * @summary Get Resource\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getResource: async (\n      projId: string,\n      envId: string,\n      resourceId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getResource', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getResource', 'envId', envId);\n      // verify required parameter 'resourceId' is not null or undefined\n      assertParamExists('getResource', 'resourceId', resourceId);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Lists all the resources defined in your schema.\n     * @summary List Resources\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {boolean} [includeBuiltIn] Whether to include or exclude built-in resources, default is False\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {includeTotalCount} [includeTotalCount] Include the total count of resources in the response, default is False\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listResources: async (\n      projId: string,\n      envId: string,\n      includeBuiltIn?: boolean,\n      page?: number,\n      perPage?: number,\n      includeTotalCount?: boolean,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('listResources', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('listResources', 'envId', envId);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (includeBuiltIn !== undefined) {\n        localVarQueryParameter['include_built_in'] = includeBuiltIn;\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      if (includeTotalCount !== undefined) {\n        localVarQueryParameter['include_total_count'] = includeTotalCount;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Completely replaces the resource definition.  - If the resource key is changed, all role and permissions assignments for the the resource will be revoked. - If the resource key is unchanged, but some actions are removed or renamed from the resource definition, role and permissions assignments for these actions will be revoked.  TODO: we need to decide if we are auto-revoking, or if we are rejecting the PUT completely while there are permissions that can be affected.\n     * @summary Replace Resource\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceReplace} resourceReplace\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    replaceResource: async (\n      projId: string,\n      envId: string,\n      resourceId: string,\n      resourceReplace: ResourceReplace,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('replaceResource', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('replaceResource', 'envId', envId);\n      // verify required parameter 'resourceId' is not null or undefined\n      assertParamExists('replaceResource', 'resourceId', resourceId);\n      // verify required parameter 'resourceReplace' is not null or undefined\n      assertParamExists('replaceResource', 'resourceReplace', resourceReplace);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        resourceReplace,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Partially updates the resource definition. Fields that will be provided will be completely overwritten.\n     * @summary Update Resource\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceUpdate} resourceUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateResource: async (\n      projId: string,\n      envId: string,\n      resourceId: string,\n      resourceUpdate: ResourceUpdate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('updateResource', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('updateResource', 'envId', envId);\n      // verify required parameter 'resourceId' is not null or undefined\n      assertParamExists('updateResource', 'resourceId', resourceId);\n      // verify required parameter 'resourceUpdate' is not null or undefined\n      assertParamExists('updateResource', 'resourceUpdate', resourceUpdate);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        resourceUpdate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * ResourcesApi - functional programming interface\n * @export\n */\nexport const ResourcesApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = ResourcesApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * Creates a new resource (a type of object you may protect with permissions).\n     * @summary Create Resource\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceCreate} resourceCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async createResource(\n      projId: string,\n      envId: string,\n      resourceCreate: ResourceCreate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.createResource(\n        projId,\n        envId,\n        resourceCreate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Deletes the resource and all its related data.\n     * @summary Delete Resource\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async deleteResource(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteResource(\n        projId,\n        envId,\n        resourceId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Gets a single resource, if such resource exists.\n     * @summary Get Resource\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getResource(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getResource(\n        projId,\n        envId,\n        resourceId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Lists all the resources defined in your schema.\n     * @summary List Resources\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {boolean} [includeBuiltIn] Whether to include or exclude built-in resources, default is False\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {includeTotalCount} [includeTotalCount] Include the total count of resources in the response, default is False\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async listResources(\n      projId: string,\n      envId: string,\n      includeBuiltIn?: boolean,\n      page?: number,\n      perPage?: number,\n      includeTotalCount?: boolean,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (\n        axios?: AxiosInstance,\n        basePath?: string,\n      ) => AxiosPromise<Array<ResourceRead> | PaginatedResultResourceRead>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.listResources(\n        projId,\n        envId,\n        includeBuiltIn,\n        page,\n        perPage,\n        includeTotalCount,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Completely replaces the resource definition.  - If the resource key is changed, all role and permissions assignments for the the resource will be revoked. - If the resource key is unchanged, but some actions are removed or renamed from the resource definition, role and permissions assignments for these actions will be revoked.  TODO: we need to decide if we are auto-revoking, or if we are rejecting the PUT completely while there are permissions that can be affected.\n     * @summary Replace Resource\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceReplace} resourceReplace\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async replaceResource(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      resourceReplace: ResourceReplace,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.replaceResource(\n        projId,\n        envId,\n        resourceId,\n        resourceReplace,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Partially updates the resource definition. Fields that will be provided will be completely overwritten.\n     * @summary Update Resource\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceUpdate} resourceUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async updateResource(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      resourceUpdate: ResourceUpdate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.updateResource(\n        projId,\n        envId,\n        resourceId,\n        resourceUpdate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * ResourcesApi - factory interface\n * @export\n */\nexport const ResourcesApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = ResourcesApiFp(configuration);\n  return {\n    /**\n     * Creates a new resource (a type of object you may protect with permissions).\n     * @summary Create Resource\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceCreate} resourceCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createResource(\n      projId: string,\n      envId: string,\n      resourceCreate: ResourceCreate,\n      options?: any,\n    ): AxiosPromise<ResourceRead> {\n      return localVarFp\n        .createResource(projId, envId, resourceCreate, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Deletes the resource and all its related data.\n     * @summary Delete Resource\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteResource(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      options?: any,\n    ): AxiosPromise<void> {\n      return localVarFp\n        .deleteResource(projId, envId, resourceId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Gets a single resource, if such resource exists.\n     * @summary Get Resource\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getResource(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      options?: any,\n    ): AxiosPromise<ResourceRead> {\n      return localVarFp\n        .getResource(projId, envId, resourceId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Lists all the resources defined in your schema.\n     * @summary List Resources\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {boolean} [includeBuiltIn] Whether to include or exclude built-in resources, default is False\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {includeTotalCount} [includeTotalCount] Include the total count of resources in the response, default is False\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listResources(\n      projId: string,\n      envId: string,\n      includeBuiltIn?: boolean,\n      page?: number,\n      perPage?: number,\n      includeTotalCount?: boolean,\n      options?: any,\n    ): AxiosPromise<Array<ResourceRead> | PaginatedResultResourceRead> {\n      return localVarFp\n        .listResources(projId, envId, includeBuiltIn, page, perPage, includeTotalCount, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Completely replaces the resource definition.  - If the resource key is changed, all role and permissions assignments for the the resource will be revoked. - If the resource key is unchanged, but some actions are removed or renamed from the resource definition, role and permissions assignments for these actions will be revoked.  TODO: we need to decide if we are auto-revoking, or if we are rejecting the PUT completely while there are permissions that can be affected.\n     * @summary Replace Resource\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceReplace} resourceReplace\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    replaceResource(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      resourceReplace: ResourceReplace,\n      options?: any,\n    ): AxiosPromise<ResourceRead> {\n      return localVarFp\n        .replaceResource(projId, envId, resourceId, resourceReplace, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Partially updates the resource definition. Fields that will be provided will be completely overwritten.\n     * @summary Update Resource\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceUpdate} resourceUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateResource(\n      projId: string,\n      envId: string,\n      resourceId: string,\n      resourceUpdate: ResourceUpdate,\n      options?: any,\n    ): AxiosPromise<ResourceRead> {\n      return localVarFp\n        .updateResource(projId, envId, resourceId, resourceUpdate, options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for createResource operation in ResourcesApi.\n * @export\n * @interface ResourcesApiCreateResourceRequest\n */\nexport interface ResourcesApiCreateResourceRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourcesApiCreateResource\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourcesApiCreateResource\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {ResourceCreate}\n   * @memberof ResourcesApiCreateResource\n   */\n  readonly resourceCreate: ResourceCreate;\n}\n\n/**\n * Request parameters for deleteResource operation in ResourcesApi.\n * @export\n * @interface ResourcesApiDeleteResourceRequest\n */\nexport interface ResourcesApiDeleteResourceRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourcesApiDeleteResource\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourcesApiDeleteResource\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourcesApiDeleteResource\n   */\n  readonly resourceId: string;\n}\n\n/**\n * Request parameters for getResource operation in ResourcesApi.\n * @export\n * @interface ResourcesApiGetResourceRequest\n */\nexport interface ResourcesApiGetResourceRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourcesApiGetResource\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourcesApiGetResource\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourcesApiGetResource\n   */\n  readonly resourceId: string;\n}\n\n/**\n * Request parameters for listResources operation in ResourcesApi.\n * @export\n * @interface ResourcesApiListResourcesRequest\n */\nexport interface ResourcesApiListResourcesRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourcesApiListResources\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourcesApiListResources\n   */\n  readonly envId: string;\n\n  /**\n   * Whether to include or exclude built-in resources, default is False\n   * @type {boolean}\n   * @memberof ResourcesApiListResources\n   */\n  readonly includeBuiltIn?: boolean;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof ResourcesApiListResources\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof ResourcesApiListResources\n   */\n  readonly perPage?: number;\n\n  /**\n   * Include total count in response\n   * @type {boolean}\n   * @memberof RolesApiListRoles\n   * @default false\n   */\n  readonly includeTotalCount?: boolean;\n}\n\n/**\n * Request parameters for replaceResource operation in ResourcesApi.\n * @export\n * @interface ResourcesApiReplaceResourceRequest\n */\nexport interface ResourcesApiReplaceResourceRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourcesApiReplaceResource\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourcesApiReplaceResource\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourcesApiReplaceResource\n   */\n  readonly resourceId: string;\n\n  /**\n   *\n   * @type {ResourceReplace}\n   * @memberof ResourcesApiReplaceResource\n   */\n  readonly resourceReplace: ResourceReplace;\n}\n\n/**\n * Request parameters for updateResource operation in ResourcesApi.\n * @export\n * @interface ResourcesApiUpdateResourceRequest\n */\nexport interface ResourcesApiUpdateResourceRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourcesApiUpdateResource\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourcesApiUpdateResource\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ResourcesApiUpdateResource\n   */\n  readonly resourceId: string;\n\n  /**\n   *\n   * @type {ResourceUpdate}\n   * @memberof ResourcesApiUpdateResource\n   */\n  readonly resourceUpdate: ResourceUpdate;\n}\n\n/**\n * ResourcesApi - object-oriented interface\n * @export\n * @class ResourcesApi\n * @extends {BaseAPI}\n */\nexport class ResourcesApi extends BaseAPI {\n  /**\n   * Creates a new resource (a type of object you may protect with permissions).\n   * @summary Create Resource\n   * @param {ResourcesApiCreateResourceRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourcesApi\n   */\n  public createResource(\n    requestParameters: ResourcesApiCreateResourceRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ResourcesApiFp(this.configuration)\n      .createResource(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.resourceCreate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Deletes the resource and all its related data.\n   * @summary Delete Resource\n   * @param {ResourcesApiDeleteResourceRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourcesApi\n   */\n  public deleteResource(\n    requestParameters: ResourcesApiDeleteResourceRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ResourcesApiFp(this.configuration)\n      .deleteResource(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.resourceId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Gets a single resource, if such resource exists.\n   * @summary Get Resource\n   * @param {ResourcesApiGetResourceRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourcesApi\n   */\n  public getResource(\n    requestParameters: ResourcesApiGetResourceRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ResourcesApiFp(this.configuration)\n      .getResource(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.resourceId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Lists all the resources defined in your schema.\n   * @summary List Resources\n   * @param {ResourcesApiListResourcesRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourcesApi\n   */\n  public listResources(\n    requestParameters: ResourcesApiListResourcesRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ResourcesApiFp(this.configuration)\n      .listResources(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.includeBuiltIn,\n        requestParameters.page,\n        requestParameters.perPage,\n        requestParameters.includeTotalCount,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Completely replaces the resource definition.  - If the resource key is changed, all role and permissions assignments for the the resource will be revoked. - If the resource key is unchanged, but some actions are removed or renamed from the resource definition, role and permissions assignments for these actions will be revoked.  TODO: we need to decide if we are auto-revoking, or if we are rejecting the PUT completely while there are permissions that can be affected.\n   * @summary Replace Resource\n   * @param {ResourcesApiReplaceResourceRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourcesApi\n   */\n  public replaceResource(\n    requestParameters: ResourcesApiReplaceResourceRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ResourcesApiFp(this.configuration)\n      .replaceResource(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.resourceId,\n        requestParameters.resourceReplace,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Partially updates the resource definition. Fields that will be provided will be completely overwritten.\n   * @summary Update Resource\n   * @param {ResourcesApiUpdateResourceRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ResourcesApi\n   */\n  public updateResource(\n    requestParameters: ResourcesApiUpdateResourceRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ResourcesApiFp(this.configuration)\n      .updateResource(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.resourceId,\n        requestParameters.resourceUpdate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { BulkRoleAssignmentReport } from '../types';\n// @ts-ignore\nimport { BulkRoleUnAssignmentReport } from '../types';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n// @ts-ignore\nimport { RoleAssignmentCreate } from '../types';\n// @ts-ignore\nimport { RoleAssignmentRead } from '../types';\n// @ts-ignore\nimport { RoleAssignmentDetailedRead } from '../types';\n// @ts-ignore\nimport { RoleAssignmentRemove } from '../types';\n// @ts-ignore\nimport { PaginatedResultRoleAssignmentRead } from '../types';\n// @ts-ignore\nimport { PaginatedResultRoleAssignmentDetailedRead } from '../types';\n/**\n * RoleAssignmentsApi - axios parameter creator\n * @export\n */\nexport const RoleAssignmentsApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     * Assigns a role to a user within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.\n     * @summary Assign Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {RoleAssignmentCreate} roleAssignmentCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    assignRole: async (\n      projId: string,\n      envId: string,\n      roleAssignmentCreate: RoleAssignmentCreate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('assignRole', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('assignRole', 'envId', envId);\n      // verify required parameter 'roleAssignmentCreate' is not null or undefined\n      assertParamExists('assignRole', 'roleAssignmentCreate', roleAssignmentCreate);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/role_assignments`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        roleAssignmentCreate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Bulk Assign Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {Array<RoleAssignmentCreate>} roleAssignmentCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bulkAssignRole: async (\n      projId: string,\n      envId: string,\n      roleAssignmentCreate: Array<RoleAssignmentCreate>,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('bulkAssignRole', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('bulkAssignRole', 'envId', envId);\n      // verify required parameter 'roleAssignmentCreate' is not null or undefined\n      assertParamExists('bulkAssignRole', 'roleAssignmentCreate', roleAssignmentCreate);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/role_assignments/bulk`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        roleAssignmentCreate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Bulk Unassign Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {Array<RoleAssignmentRemove>} roleAssignmentRemove\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bulkUnassignRole: async (\n      projId: string,\n      envId: string,\n      roleAssignmentRemove: Array<RoleAssignmentRemove>,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('bulkUnassignRole', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('bulkUnassignRole', 'envId', envId);\n      // verify required parameter 'roleAssignmentRemove' is not null or undefined\n      assertParamExists('bulkUnassignRole', 'roleAssignmentRemove', roleAssignmentRemove);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/role_assignments/bulk`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        roleAssignmentRemove,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Lists the role assignments defined within an environment.  - If the `user` filter is present, will only return the role assignments of that user (supports multiple). - If the `tenant` filter is present, will only return the role assignments in that tenant (supports multiple). - If the `role` filter is present, will only return role assignments that are granting that role (supports multiple). - If the `resource` filter is present, will only return role assignments for resource instances of that resource type. - If the `resource_instance` filter is present, will only return role assignments for that resource instance.  Providing both `tenant` and `resource_instance` filters will only return role assignments if the resource instance is in that tenant. If multiple tenants are received, the last tenant will be compared with the resource instance.\n     * @summary List Role Assignments\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [user] optional user(s) filter, will only return role assignments granted to this user(s).\n     * @param {string} [role] optional role(s) filter, will only return role assignments granting this role(s).\n     * @param {string} [tenant] optional tenant(s) filter, will only return role assignments granted in that tenant(s).\n     * @param {string} [resource] optional resource **type** filter, will only return role assignments granted on that resource type.\n     * @param {string} [resourceInstance] optional resource instance filter, will only return role assignments granted on that resource instance.\n     * @param {boolean} [detailed] Whether to return full details about the user, tenant and role\n     * @param {boolean} [includeTotalCount] If true, returns the list of role assignments and the total count.\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listRoleAssignments: async (\n      projId: string,\n      envId: string,\n      user?: string,\n      role?: string,\n      tenant?: string,\n      resource?: string,\n      resourceInstance?: string,\n      detailed?: boolean,\n      includeTotalCount?: boolean,\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('listRoleAssignments', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('listRoleAssignments', 'envId', envId);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/role_assignments`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (user !== undefined) {\n        localVarQueryParameter['user'] = user;\n      }\n\n      if (role !== undefined) {\n        localVarQueryParameter['role'] = role;\n      }\n\n      if (tenant !== undefined) {\n        localVarQueryParameter['tenant'] = tenant;\n      }\n\n      if (resource !== undefined) {\n        localVarQueryParameter['resource'] = resource;\n      }\n\n      if (resourceInstance !== undefined) {\n        localVarQueryParameter['resource_instance'] = resourceInstance;\n      }\n\n      if (detailed !== undefined) {\n        localVarQueryParameter['detailed'] = detailed;\n      }\n\n      if (includeTotalCount !== undefined) {\n        localVarQueryParameter['include_total_count'] = includeTotalCount;\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Unassigns a user role within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.\n     * @summary Unassign Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {RoleAssignmentRemove} roleAssignmentRemove\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    unassignRole: async (\n      projId: string,\n      envId: string,\n      roleAssignmentRemove: RoleAssignmentRemove,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('unassignRole', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('unassignRole', 'envId', envId);\n      // verify required parameter 'roleAssignmentRemove' is not null or undefined\n      assertParamExists('unassignRole', 'roleAssignmentRemove', roleAssignmentRemove);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/role_assignments`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        roleAssignmentRemove,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * RoleAssignmentsApi - functional programming interface\n * @export\n */\nexport const RoleAssignmentsApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = RoleAssignmentsApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * Assigns a role to a user within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.\n     * @summary Assign Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {RoleAssignmentCreate} roleAssignmentCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async assignRole(\n      projId: string,\n      envId: string,\n      roleAssignmentCreate: RoleAssignmentCreate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleAssignmentRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.assignRole(\n        projId,\n        envId,\n        roleAssignmentCreate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Bulk Assign Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {Array<RoleAssignmentCreate>} roleAssignmentCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async bulkAssignRole(\n      projId: string,\n      envId: string,\n      roleAssignmentCreate: Array<RoleAssignmentCreate>,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BulkRoleAssignmentReport>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.bulkAssignRole(\n        projId,\n        envId,\n        roleAssignmentCreate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Bulk Unassign Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {Array<RoleAssignmentRemove>} roleAssignmentRemove\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async bulkUnassignRole(\n      projId: string,\n      envId: string,\n      roleAssignmentRemove: Array<RoleAssignmentRemove>,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BulkRoleUnAssignmentReport>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.bulkUnassignRole(\n        projId,\n        envId,\n        roleAssignmentRemove,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Lists the role assignments defined within an environment.  - If the `user` filter is present, will only return the role assignments of that user (supports multiple). - If the `tenant` filter is present, will only return the role assignments in that tenant (supports multiple). - If the `role` filter is present, will only return role assignments that are granting that role (supports multiple). - If the `resource` filter is present, will only return role assignments for resource instances of that resource type. - If the `resource_instance` filter is present, will only return role assignments for that resource instance.  Providing both `tenant` and `resource_instance` filters will only return role assignments if the resource instance is in that tenant. If multiple tenants are received, the last tenant will be compared with the resource instance.\n     * @summary List Role Assignments\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [user] optional user(s) filter, will only return role assignments granted to this user(s).\n     * @param {string} [role] optional role(s) filter, will only return role assignments granting this role(s).\n     * @param {string} [tenant] optional tenant(s) filter, will only return role assignments granted in that tenant(s).\n     * @param {string} [resource] optional resource **type** filter, will only return role assignments granted on that resource type.\n     * @param {string} [resourceInstance] optional resource instance filter, will only return role assignments granted on that resource instance.\n     * @param {boolean} [detailed] Whether to return full details about the user, tenant and role\n     * @param {boolean} [includeTotalCount] If true, returns the list of role assignments and the total count.\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async listRoleAssignments(\n      projId: string,\n      envId: string,\n      user?: string,\n      role?: string,\n      tenant?: string,\n      resource?: string,\n      resourceInstance?: string,\n      detailed?: boolean,\n      includeTotalCount?: boolean,\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (\n        axios?: AxiosInstance,\n        basePath?: string,\n      ) => AxiosPromise<\n        | Array<RoleAssignmentRead>\n        | Array<RoleAssignmentDetailedRead>\n        | PaginatedResultRoleAssignmentRead\n        | PaginatedResultRoleAssignmentDetailedRead\n      >\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.listRoleAssignments(\n        projId,\n        envId,\n        user,\n        role,\n        tenant,\n        resource,\n        resourceInstance,\n        detailed,\n        includeTotalCount,\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Unassigns a user role within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.\n     * @summary Unassign Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {RoleAssignmentRemove} roleAssignmentRemove\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async unassignRole(\n      projId: string,\n      envId: string,\n      roleAssignmentRemove: RoleAssignmentRemove,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.unassignRole(\n        projId,\n        envId,\n        roleAssignmentRemove,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * RoleAssignmentsApi - factory interface\n * @export\n */\nexport const RoleAssignmentsApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = RoleAssignmentsApiFp(configuration);\n  return {\n    /**\n     * Assigns a role to a user within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.\n     * @summary Assign Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {RoleAssignmentCreate} roleAssignmentCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    assignRole(\n      projId: string,\n      envId: string,\n      roleAssignmentCreate: RoleAssignmentCreate,\n      options?: any,\n    ): AxiosPromise<RoleAssignmentRead> {\n      return localVarFp\n        .assignRole(projId, envId, roleAssignmentCreate, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Bulk Assign Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {Array<RoleAssignmentCreate>} roleAssignmentCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bulkAssignRole(\n      projId: string,\n      envId: string,\n      roleAssignmentCreate: Array<RoleAssignmentCreate>,\n      options?: any,\n    ): AxiosPromise<BulkRoleAssignmentReport> {\n      return localVarFp\n        .bulkAssignRole(projId, envId, roleAssignmentCreate, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Bulk Unassign Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {Array<RoleAssignmentRemove>} roleAssignmentRemove\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bulkUnassignRole(\n      projId: string,\n      envId: string,\n      roleAssignmentRemove: Array<RoleAssignmentRemove>,\n      options?: any,\n    ): AxiosPromise<BulkRoleUnAssignmentReport> {\n      return localVarFp\n        .bulkUnassignRole(projId, envId, roleAssignmentRemove, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Lists the role assignments defined within an environment.  - If the `user` filter is present, will only return the role assignments of that user (supports multiple). - If the `tenant` filter is present, will only return the role assignments in that tenant (supports multiple). - If the `role` filter is present, will only return role assignments that are granting that role (supports multiple). - If the `resource` filter is present, will only return role assignments for resource instances of that resource type. - If the `resource_instance` filter is present, will only return role assignments for that resource instance.  Providing both `tenant` and `resource_instance` filters will only return role assignments if the resource instance is in that tenant. If multiple tenants are received, the last tenant will be compared with the resource instance.\n     * @summary List Role Assignments\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [user] optional user(s) filter, will only return role assignments granted to this user(s).\n     * @param {string} [role] optional role(s) filter, will only return role assignments granting this role(s).\n     * @param {string} [tenant] optional tenant(s) filter, will only return role assignments granted in that tenant(s).\n     * @param {string} [resource] optional resource **type** filter, will only return role assignments granted on that resource type.\n     * @param {string} [resourceInstance] optional resource instance filter, will only return role assignments granted on that resource instance.\n     * @param {boolean} [detailed] Whether to return full details about the user, tenant and role\n     * @param {boolean} [includeTotalCount] If true, returns the list of role assignments and the total count.\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listRoleAssignments(\n      projId: string,\n      envId: string,\n      user?: string,\n      role?: string,\n      tenant?: string,\n      resource?: string,\n      resourceInstance?: string,\n      detailed?: boolean,\n      includeTotalCount?: boolean,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<\n      | Array<RoleAssignmentRead>\n      | Array<RoleAssignmentDetailedRead>\n      | PaginatedResultRoleAssignmentRead\n      | PaginatedResultRoleAssignmentDetailedRead\n    > {\n      return localVarFp\n        .listRoleAssignments(\n          projId,\n          envId,\n          user,\n          role,\n          tenant,\n          resource,\n          resourceInstance,\n          detailed,\n          includeTotalCount,\n          page,\n          perPage,\n          options,\n        )\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Unassigns a user role within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.\n     * @summary Unassign Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {RoleAssignmentRemove} roleAssignmentRemove\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    unassignRole(\n      projId: string,\n      envId: string,\n      roleAssignmentRemove: RoleAssignmentRemove,\n      options?: any,\n    ): AxiosPromise<void> {\n      return localVarFp\n        .unassignRole(projId, envId, roleAssignmentRemove, options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for assignRole operation in RoleAssignmentsApi.\n * @export\n * @interface RoleAssignmentsApiAssignRoleRequest\n */\nexport interface RoleAssignmentsApiAssignRoleRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RoleAssignmentsApiAssignRole\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RoleAssignmentsApiAssignRole\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {RoleAssignmentCreate}\n   * @memberof RoleAssignmentsApiAssignRole\n   */\n  readonly roleAssignmentCreate: RoleAssignmentCreate;\n}\n\n/**\n * Request parameters for bulkAssignRole operation in RoleAssignmentsApi.\n * @export\n * @interface RoleAssignmentsApiBulkAssignRoleRequest\n */\nexport interface RoleAssignmentsApiBulkAssignRoleRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RoleAssignmentsApiBulkAssignRole\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RoleAssignmentsApiBulkAssignRole\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {Array<RoleAssignmentCreate>}\n   * @memberof RoleAssignmentsApiBulkAssignRole\n   */\n  readonly roleAssignmentCreate: Array<RoleAssignmentCreate>;\n}\n\n/**\n * Request parameters for bulkUnassignRole operation in RoleAssignmentsApi.\n * @export\n * @interface RoleAssignmentsApiBulkUnassignRoleRequest\n */\nexport interface RoleAssignmentsApiBulkUnassignRoleRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RoleAssignmentsApiBulkUnassignRole\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RoleAssignmentsApiBulkUnassignRole\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {Array<RoleAssignmentRemove>}\n   * @memberof RoleAssignmentsApiBulkUnassignRole\n   */\n  readonly roleAssignmentRemove: Array<RoleAssignmentRemove>;\n}\n\n/**\n * Request parameters for listRoleAssignments operation in RoleAssignmentsApi.\n * @export\n * @interface RoleAssignmentsApiListRoleAssignmentsRequest\n */\nexport interface RoleAssignmentsApiListRoleAssignmentsRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RoleAssignmentsApiListRoleAssignments\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RoleAssignmentsApiListRoleAssignments\n   */\n  readonly envId: string;\n\n  /**\n   * optional user(s) filter, will only return role assignments granted to this user(s).\n   * @type {string}\n   * @memberof RoleAssignmentsApiListRoleAssignments\n   */\n  readonly user?: string;\n\n  /**\n   * optional role(s) filter, will only return role assignments granting this role(s).\n   * @type {string}\n   * @memberof RoleAssignmentsApiListRoleAssignments\n   */\n  readonly role?: string;\n\n  /**\n   * optional tenant(s) filter, will only return role assignments granted in that tenant(s).\n   * @type {string}\n   * @memberof RoleAssignmentsApiListRoleAssignments\n   */\n  readonly tenant?: string;\n\n  /**\n   * optional resource **type** filter, will only return role assignments granted on that resource type.\n   * @type {string}\n   * @memberof RoleAssignmentsApiListRoleAssignments\n   */\n  readonly resource?: string;\n\n  /**\n   * optional resource instance filter, will only return role assignments granted on that resource instance.\n   * @type {string}\n   * @memberof RoleAssignmentsApiListRoleAssignments\n   */\n  readonly resourceInstance?: string;\n\n  /**\n   * Whether to return full details about the user, tenant and role\n   * @type {boolean}\n   * @memberof RoleAssignmentsApiListRoleAssignments\n   */\n  readonly detailed?: boolean;\n\n  /**\n   * If true, returns the list of role assignments and the total count.\n   * @type {boolean}\n   * @memberof RoleAssignmentsApiListRoleAssignments\n   */\n  readonly includeTotalCount?: boolean;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof RoleAssignmentsApiListRoleAssignments\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof RoleAssignmentsApiListRoleAssignments\n   */\n  readonly perPage?: number;\n}\n\n/**\n * Request parameters for unassignRole operation in RoleAssignmentsApi.\n * @export\n * @interface RoleAssignmentsApiUnassignRoleRequest\n */\nexport interface RoleAssignmentsApiUnassignRoleRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RoleAssignmentsApiUnassignRole\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RoleAssignmentsApiUnassignRole\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {RoleAssignmentRemove}\n   * @memberof RoleAssignmentsApiUnassignRole\n   */\n  readonly roleAssignmentRemove: RoleAssignmentRemove;\n}\n\n/**\n * RoleAssignmentsApi - object-oriented interface\n * @export\n * @class RoleAssignmentsApi\n * @extends {BaseAPI}\n */\nexport class RoleAssignmentsApi extends BaseAPI {\n  /**\n   * Assigns a role to a user within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.\n   * @summary Assign Role\n   * @param {RoleAssignmentsApiAssignRoleRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RoleAssignmentsApi\n   */\n  public assignRole(\n    requestParameters: RoleAssignmentsApiAssignRoleRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return RoleAssignmentsApiFp(this.configuration)\n      .assignRole(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.roleAssignmentCreate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Bulk Assign Role\n   * @param {RoleAssignmentsApiBulkAssignRoleRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RoleAssignmentsApi\n   */\n  public bulkAssignRole(\n    requestParameters: RoleAssignmentsApiBulkAssignRoleRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return RoleAssignmentsApiFp(this.configuration)\n      .bulkAssignRole(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.roleAssignmentCreate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Bulk Unassign Role\n   * @param {RoleAssignmentsApiBulkUnassignRoleRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RoleAssignmentsApi\n   */\n  public bulkUnassignRole(\n    requestParameters: RoleAssignmentsApiBulkUnassignRoleRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return RoleAssignmentsApiFp(this.configuration)\n      .bulkUnassignRole(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.roleAssignmentRemove,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Lists the role assignments defined within an environment.  - If the `user` filter is present, will only return the role assignments of that user (supports multiple). - If the `tenant` filter is present, will only return the role assignments in that tenant (supports multiple). - If the `role` filter is present, will only return role assignments that are granting that role (supports multiple). - If the `resource` filter is present, will only return role assignments for resource instances of that resource type. - If the `resource_instance` filter is present, will only return role assignments for that resource instance.  Providing both `tenant` and `resource_instance` filters will only return role assignments if the resource instance is in that tenant. If multiple tenants are received, the last tenant will be compared with the resource instance.\n   * @summary List Role Assignments\n   * @param {RoleAssignmentsApiListRoleAssignmentsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RoleAssignmentsApi\n   */\n  public listRoleAssignments(\n    requestParameters: RoleAssignmentsApiListRoleAssignmentsRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return RoleAssignmentsApiFp(this.configuration)\n      .listRoleAssignments(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.user,\n        requestParameters.role,\n        requestParameters.tenant,\n        requestParameters.resource,\n        requestParameters.resourceInstance,\n        requestParameters.detailed,\n        requestParameters.includeTotalCount,\n        requestParameters.page,\n        requestParameters.perPage,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Unassigns a user role within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.\n   * @summary Unassign Role\n   * @param {RoleAssignmentsApiUnassignRoleRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RoleAssignmentsApi\n   */\n  public unassignRole(\n    requestParameters: RoleAssignmentsApiUnassignRoleRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return RoleAssignmentsApiFp(this.configuration)\n      .unassignRole(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.roleAssignmentRemove,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { AddRolePermissions, PaginatedResultRoleRead } from '../types';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n// @ts-ignore\nimport { RemoveRolePermissions } from '../types';\n// @ts-ignore\nimport { RoleCreate } from '../types';\n// @ts-ignore\nimport { RoleRead } from '../types';\n// @ts-ignore\nimport { RoleUpdate } from '../types';\n/**\n * RolesApi - axios parameter creator\n * @export\n */\nexport const RolesApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     * This endpoint is part of the role hierarchy feature.  Makes role with id `role_id` extend the role with id `parent_role_id`. In other words, `role_id` will automatically be assigned any permissions that are granted to `parent_role_id`.  We can say the `role_id` **extends** `parent_role_id` or **inherits** from `parent_role_id`.  If `role_id` is already an ancestor of `parent_role_id`, the request will fail with HTTP 400 to prevent a cycle in the role hierarchy.\n     * @summary Add Parent Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} parentRoleId Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    addParentRole: async (\n      projId: string,\n      envId: string,\n      roleId: string,\n      parentRoleId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('addParentRole', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('addParentRole', 'envId', envId);\n      // verify required parameter 'roleId' is not null or undefined\n      assertParamExists('addParentRole', 'roleId', roleId);\n      // verify required parameter 'parentRoleId' is not null or undefined\n      assertParamExists('addParentRole', 'parentRoleId', parentRoleId);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/roles/{role_id}/parents/{parent_role_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)))\n        .replace(`{${'parent_role_id'}}`, encodeURIComponent(String(parentRoleId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Assign permissions to role.  If some of the permissions specified are already assigned, will skip them.\n     * @summary Assign Permissions To Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {AddRolePermissions} addRolePermissions\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    assignPermissionsToRole: async (\n      projId: string,\n      envId: string,\n      roleId: string,\n      addRolePermissions: AddRolePermissions,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('assignPermissionsToRole', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('assignPermissionsToRole', 'envId', envId);\n      // verify required parameter 'roleId' is not null or undefined\n      assertParamExists('assignPermissionsToRole', 'roleId', roleId);\n      // verify required parameter 'addRolePermissions' is not null or undefined\n      assertParamExists('assignPermissionsToRole', 'addRolePermissions', addRolePermissions);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/roles/{role_id}/permissions`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        addRolePermissions,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Creates a new tenant role.\n     * @summary Create Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {RoleCreate} roleCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createRole: async (\n      projId: string,\n      envId: string,\n      roleCreate: RoleCreate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('createRole', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('createRole', 'envId', envId);\n      // verify required parameter 'roleCreate' is not null or undefined\n      assertParamExists('createRole', 'roleCreate', roleCreate);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/roles`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        roleCreate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Deletes a tenant role and all its related data. This includes any permissions granted to said role.\n     * @summary Delete Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteRole: async (\n      projId: string,\n      envId: string,\n      roleId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('deleteRole', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('deleteRole', 'envId', envId);\n      // verify required parameter 'roleId' is not null or undefined\n      assertParamExists('deleteRole', 'roleId', roleId);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/roles/{role_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Gets a single tenant role, if such role exists.\n     * @summary Get Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getRole: async (\n      projId: string,\n      envId: string,\n      roleId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getRole', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getRole', 'envId', envId);\n      // verify required parameter 'roleId' is not null or undefined\n      assertParamExists('getRole', 'roleId', roleId);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/roles/{role_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Lists all tenant roles.\n     * @summary List Roles\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {boolean} [includeTotalCount] Include total count in response (default to false)\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listRoles: async (\n      projId: string,\n      envId: string,\n      page?: number,\n      perPage?: number,\n      includeTotalCount?: boolean,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('listRoles', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('listRoles', 'envId', envId);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/roles`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions: Record<string, unknown> = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter: Record<string, unknown> = {};\n      const localVarQueryParameter: Record<string, unknown> = {};\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      if (includeTotalCount !== undefined) {\n        localVarQueryParameter['include_total_count'] = includeTotalCount;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * This endpoint is part of the role hierarchy feature.  Removes `parent_role_id` from the list of parent roles of role with id `role_id`. In other words, `role_id` will no longer be automatically assigned permissions that are granted to `parent_role_id`.  We can say the `role_id` **not longer extends** `parent_role_id` or **no longer inherits** from `parent_role_id`.\n     * @summary Remove Parent Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} parentRoleId Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    removeParentRole: async (\n      projId: string,\n      envId: string,\n      roleId: string,\n      parentRoleId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('removeParentRole', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('removeParentRole', 'envId', envId);\n      // verify required parameter 'roleId' is not null or undefined\n      assertParamExists('removeParentRole', 'roleId', roleId);\n      // verify required parameter 'parentRoleId' is not null or undefined\n      assertParamExists('removeParentRole', 'parentRoleId', parentRoleId);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/roles/{role_id}/parents/{parent_role_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)))\n        .replace(`{${'parent_role_id'}}`, encodeURIComponent(String(parentRoleId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Remove permissions from role.  If some of the permissions specified are already unassigned, will skip them.\n     * @summary Remove Permissions From Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {RemoveRolePermissions} removeRolePermissions\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    removePermissionsFromRole: async (\n      projId: string,\n      envId: string,\n      roleId: string,\n      removeRolePermissions: RemoveRolePermissions,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('removePermissionsFromRole', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('removePermissionsFromRole', 'envId', envId);\n      // verify required parameter 'roleId' is not null or undefined\n      assertParamExists('removePermissionsFromRole', 'roleId', roleId);\n      // verify required parameter 'removeRolePermissions' is not null or undefined\n      assertParamExists(\n        'removePermissionsFromRole',\n        'removeRolePermissions',\n        removeRolePermissions,\n      );\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/roles/{role_id}/permissions`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        removeRolePermissions,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Partially updates a tenant role. Fields that will be provided will be completely overwritten.\n     * @summary Update Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {RoleUpdate} roleUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateRole: async (\n      projId: string,\n      envId: string,\n      roleId: string,\n      roleUpdate: RoleUpdate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('updateRole', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('updateRole', 'envId', envId);\n      // verify required parameter 'roleId' is not null or undefined\n      assertParamExists('updateRole', 'roleId', roleId);\n      // verify required parameter 'roleUpdate' is not null or undefined\n      assertParamExists('updateRole', 'roleUpdate', roleUpdate);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/roles/{role_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        roleUpdate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * RolesApi - functional programming interface\n * @export\n */\nexport const RolesApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = RolesApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * This endpoint is part of the role hierarchy feature.  Makes role with id `role_id` extend the role with id `parent_role_id`. In other words, `role_id` will automatically be assigned any permissions that are granted to `parent_role_id`.  We can say the `role_id` **extends** `parent_role_id` or **inherits** from `parent_role_id`.  If `role_id` is already an ancestor of `parent_role_id`, the request will fail with HTTP 400 to prevent a cycle in the role hierarchy.\n     * @summary Add Parent Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} parentRoleId Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async addParentRole(\n      projId: string,\n      envId: string,\n      roleId: string,\n      parentRoleId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.addParentRole(\n        projId,\n        envId,\n        roleId,\n        parentRoleId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Assign permissions to role.  If some of the permissions specified are already assigned, will skip them.\n     * @summary Assign Permissions To Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {AddRolePermissions} addRolePermissions\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async assignPermissionsToRole(\n      projId: string,\n      envId: string,\n      roleId: string,\n      addRolePermissions: AddRolePermissions,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.assignPermissionsToRole(\n        projId,\n        envId,\n        roleId,\n        addRolePermissions,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Creates a new tenant role.\n     * @summary Create Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {RoleCreate} roleCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async createRole(\n      projId: string,\n      envId: string,\n      roleCreate: RoleCreate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.createRole(\n        projId,\n        envId,\n        roleCreate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Deletes a tenant role and all its related data. This includes any permissions granted to said role.\n     * @summary Delete Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async deleteRole(\n      projId: string,\n      envId: string,\n      roleId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRole(\n        projId,\n        envId,\n        roleId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Gets a single tenant role, if such role exists.\n     * @summary Get Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getRole(\n      projId: string,\n      envId: string,\n      roleId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getRole(\n        projId,\n        envId,\n        roleId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Lists all tenant roles.\n     * @summary List Roles\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {boolean} [includeTotalCount] Include total count in response (default to false)\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async listRoles(\n      projId: string,\n      envId: string,\n      page?: number,\n      perPage?: number,\n      includeTotalCount?: boolean,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (\n        axios?: AxiosInstance,\n        basePath?: string,\n      ) => AxiosPromise<Array<RoleRead> | PaginatedResultRoleRead>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.listRoles(\n        projId,\n        envId,\n        page,\n        perPage,\n        includeTotalCount,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * This endpoint is part of the role hierarchy feature.  Removes `parent_role_id` from the list of parent roles of role with id `role_id`. In other words, `role_id` will no longer be automatically assigned permissions that are granted to `parent_role_id`.  We can say the `role_id` **not longer extends** `parent_role_id` or **no longer inherits** from `parent_role_id`.\n     * @summary Remove Parent Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} parentRoleId Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async removeParentRole(\n      projId: string,\n      envId: string,\n      roleId: string,\n      parentRoleId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.removeParentRole(\n        projId,\n        envId,\n        roleId,\n        parentRoleId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Remove permissions from role.  If some of the permissions specified are already unassigned, will skip them.\n     * @summary Remove Permissions From Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {RemoveRolePermissions} removeRolePermissions\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async removePermissionsFromRole(\n      projId: string,\n      envId: string,\n      roleId: string,\n      removeRolePermissions: RemoveRolePermissions,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.removePermissionsFromRole(\n        projId,\n        envId,\n        roleId,\n        removeRolePermissions,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Partially updates a tenant role. Fields that will be provided will be completely overwritten.\n     * @summary Update Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {RoleUpdate} roleUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async updateRole(\n      projId: string,\n      envId: string,\n      roleId: string,\n      roleUpdate: RoleUpdate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.updateRole(\n        projId,\n        envId,\n        roleId,\n        roleUpdate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * RolesApi - factory interface\n * @export\n */\nexport const RolesApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = RolesApiFp(configuration);\n  return {\n    /**\n     * This endpoint is part of the role hierarchy feature.  Makes role with id `role_id` extend the role with id `parent_role_id`. In other words, `role_id` will automatically be assigned any permissions that are granted to `parent_role_id`.  We can say the `role_id` **extends** `parent_role_id` or **inherits** from `parent_role_id`.  If `role_id` is already an ancestor of `parent_role_id`, the request will fail with HTTP 400 to prevent a cycle in the role hierarchy.\n     * @summary Add Parent Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} parentRoleId Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    addParentRole(\n      projId: string,\n      envId: string,\n      roleId: string,\n      parentRoleId: string,\n      options?: any,\n    ): AxiosPromise<RoleRead> {\n      return localVarFp\n        .addParentRole(projId, envId, roleId, parentRoleId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Assign permissions to role.  If some of the permissions specified are already assigned, will skip them.\n     * @summary Assign Permissions To Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {AddRolePermissions} addRolePermissions\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    assignPermissionsToRole(\n      projId: string,\n      envId: string,\n      roleId: string,\n      addRolePermissions: AddRolePermissions,\n      options?: any,\n    ): AxiosPromise<RoleRead> {\n      return localVarFp\n        .assignPermissionsToRole(projId, envId, roleId, addRolePermissions, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Creates a new tenant role.\n     * @summary Create Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {RoleCreate} roleCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createRole(\n      projId: string,\n      envId: string,\n      roleCreate: RoleCreate,\n      options?: any,\n    ): AxiosPromise<RoleRead> {\n      return localVarFp\n        .createRole(projId, envId, roleCreate, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Deletes a tenant role and all its related data. This includes any permissions granted to said role.\n     * @summary Delete Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteRole(projId: string, envId: string, roleId: string, options?: any): AxiosPromise<void> {\n      return localVarFp\n        .deleteRole(projId, envId, roleId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Gets a single tenant role, if such role exists.\n     * @summary Get Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getRole(projId: string, envId: string, roleId: string, options?: any): AxiosPromise<RoleRead> {\n      return localVarFp\n        .getRole(projId, envId, roleId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Lists all tenant roles.\n     * @summary List Roles\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listRoles(\n      projId: string,\n      envId: string,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<Array<RoleRead> | PaginatedResultRoleRead> {\n      return localVarFp\n        .listRoles(projId, envId, page, perPage, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * This endpoint is part of the role hierarchy feature.  Removes `parent_role_id` from the list of parent roles of role with id `role_id`. In other words, `role_id` will no longer be automatically assigned permissions that are granted to `parent_role_id`.  We can say the `role_id` **not longer extends** `parent_role_id` or **no longer inherits** from `parent_role_id`.\n     * @summary Remove Parent Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} parentRoleId Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    removeParentRole(\n      projId: string,\n      envId: string,\n      roleId: string,\n      parentRoleId: string,\n      options?: any,\n    ): AxiosPromise<RoleRead> {\n      return localVarFp\n        .removeParentRole(projId, envId, roleId, parentRoleId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Remove permissions from role.  If some of the permissions specified are already unassigned, will skip them.\n     * @summary Remove Permissions From Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {RemoveRolePermissions} removeRolePermissions\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    removePermissionsFromRole(\n      projId: string,\n      envId: string,\n      roleId: string,\n      removeRolePermissions: RemoveRolePermissions,\n      options?: any,\n    ): AxiosPromise<RoleRead> {\n      return localVarFp\n        .removePermissionsFromRole(projId, envId, roleId, removeRolePermissions, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Partially updates a tenant role. Fields that will be provided will be completely overwritten.\n     * @summary Update Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {RoleUpdate} roleUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateRole(\n      projId: string,\n      envId: string,\n      roleId: string,\n      roleUpdate: RoleUpdate,\n      options?: any,\n    ): AxiosPromise<RoleRead> {\n      return localVarFp\n        .updateRole(projId, envId, roleId, roleUpdate, options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for addParentRole operation in RolesApi.\n * @export\n * @interface RolesApiAddParentRoleRequest\n */\nexport interface RolesApiAddParentRoleRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiAddParentRole\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiAddParentRole\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiAddParentRole\n   */\n  readonly roleId: string;\n\n  /**\n   * Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiAddParentRole\n   */\n  readonly parentRoleId: string;\n}\n\n/**\n * Request parameters for assignPermissionsToRole operation in RolesApi.\n * @export\n * @interface RolesApiAssignPermissionsToRoleRequest\n */\nexport interface RolesApiAssignPermissionsToRoleRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiAssignPermissionsToRole\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiAssignPermissionsToRole\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiAssignPermissionsToRole\n   */\n  readonly roleId: string;\n\n  /**\n   *\n   * @type {AddRolePermissions}\n   * @memberof RolesApiAssignPermissionsToRole\n   */\n  readonly addRolePermissions: AddRolePermissions;\n}\n\n/**\n * Request parameters for createRole operation in RolesApi.\n * @export\n * @interface RolesApiCreateRoleRequest\n */\nexport interface RolesApiCreateRoleRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiCreateRole\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiCreateRole\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {RoleCreate}\n   * @memberof RolesApiCreateRole\n   */\n  readonly roleCreate: RoleCreate;\n}\n\n/**\n * Request parameters for deleteRole operation in RolesApi.\n * @export\n * @interface RolesApiDeleteRoleRequest\n */\nexport interface RolesApiDeleteRoleRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiDeleteRole\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiDeleteRole\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiDeleteRole\n   */\n  readonly roleId: string;\n}\n\n/**\n * Request parameters for getRole operation in RolesApi.\n * @export\n * @interface RolesApiGetRoleRequest\n */\nexport interface RolesApiGetRoleRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiGetRole\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiGetRole\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiGetRole\n   */\n  readonly roleId: string;\n}\n\n/**\n * Request parameters for listRoles operation in RolesApi.\n * @export\n * @interface RolesApiListRolesRequest\n */\nexport interface RolesApiListRolesRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiListRoles\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiListRoles\n   */\n  readonly envId: string;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof RolesApiListRoles\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof RolesApiListRoles\n   */\n  readonly perPage?: number;\n\n  /**\n   * Include total count in response\n   * @type {boolean}\n   * @memberof RolesApiListRoles\n   * @default false\n   */\n  readonly includeTotalCount?: boolean;\n}\n\n/**\n * Request parameters for removeParentRole operation in RolesApi.\n * @export\n * @interface RolesApiRemoveParentRoleRequest\n */\nexport interface RolesApiRemoveParentRoleRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiRemoveParentRole\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiRemoveParentRole\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiRemoveParentRole\n   */\n  readonly roleId: string;\n\n  /**\n   * Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiRemoveParentRole\n   */\n  readonly parentRoleId: string;\n}\n\n/**\n * Request parameters for removePermissionsFromRole operation in RolesApi.\n * @export\n * @interface RolesApiRemovePermissionsFromRoleRequest\n */\nexport interface RolesApiRemovePermissionsFromRoleRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiRemovePermissionsFromRole\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiRemovePermissionsFromRole\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiRemovePermissionsFromRole\n   */\n  readonly roleId: string;\n\n  /**\n   *\n   * @type {RemoveRolePermissions}\n   * @memberof RolesApiRemovePermissionsFromRole\n   */\n  readonly removeRolePermissions: RemoveRolePermissions;\n}\n\n/**\n * Request parameters for updateRole operation in RolesApi.\n * @export\n * @interface RolesApiUpdateRoleRequest\n */\nexport interface RolesApiUpdateRoleRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiUpdateRole\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiUpdateRole\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiUpdateRole\n   */\n  readonly roleId: string;\n\n  /**\n   *\n   * @type {RoleUpdate}\n   * @memberof RolesApiUpdateRole\n   */\n  readonly roleUpdate: RoleUpdate;\n}\n\n/**\n * RolesApi - object-oriented interface\n * @export\n * @class RolesApi\n * @extends {BaseAPI}\n */\nexport class RolesApi extends BaseAPI {\n  /**\n   * This endpoint is part of the role hierarchy feature.  Makes role with id `role_id` extend the role with id `parent_role_id`. In other words, `role_id` will automatically be assigned any permissions that are granted to `parent_role_id`.  We can say the `role_id` **extends** `parent_role_id` or **inherits** from `parent_role_id`.  If `role_id` is already an ancestor of `parent_role_id`, the request will fail with HTTP 400 to prevent a cycle in the role hierarchy.\n   * @summary Add Parent Role\n   * @param {RolesApiAddParentRoleRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RolesApi\n   */\n  public addParentRole(\n    requestParameters: RolesApiAddParentRoleRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return RolesApiFp(this.configuration)\n      .addParentRole(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.roleId,\n        requestParameters.parentRoleId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Assign permissions to role.  If some of the permissions specified are already assigned, will skip them.\n   * @summary Assign Permissions To Role\n   * @param {RolesApiAssignPermissionsToRoleRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RolesApi\n   */\n  public assignPermissionsToRole(\n    requestParameters: RolesApiAssignPermissionsToRoleRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return RolesApiFp(this.configuration)\n      .assignPermissionsToRole(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.roleId,\n        requestParameters.addRolePermissions,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Creates a new tenant role.\n   * @summary Create Role\n   * @param {RolesApiCreateRoleRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RolesApi\n   */\n  public createRole(requestParameters: RolesApiCreateRoleRequest, options?: AxiosRequestConfig) {\n    return RolesApiFp(this.configuration)\n      .createRole(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.roleCreate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Deletes a tenant role and all its related data. This includes any permissions granted to said role.\n   * @summary Delete Role\n   * @param {RolesApiDeleteRoleRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RolesApi\n   */\n  public deleteRole(requestParameters: RolesApiDeleteRoleRequest, options?: AxiosRequestConfig) {\n    return RolesApiFp(this.configuration)\n      .deleteRole(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.roleId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Gets a single tenant role, if such role exists.\n   * @summary Get Role\n   * @param {RolesApiGetRoleRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RolesApi\n   */\n  public getRole(requestParameters: RolesApiGetRoleRequest, options?: AxiosRequestConfig) {\n    return RolesApiFp(this.configuration)\n      .getRole(requestParameters.projId, requestParameters.envId, requestParameters.roleId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Lists all tenant roles.\n   * @summary List Roles\n   * @param {RolesApiListRolesRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RolesApi\n   */\n  public listRoles(requestParameters: RolesApiListRolesRequest, options?: AxiosRequestConfig) {\n    return RolesApiFp(this.configuration)\n      .listRoles(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.page,\n        requestParameters.perPage,\n        requestParameters.includeTotalCount,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * This endpoint is part of the role hierarchy feature.  Removes `parent_role_id` from the list of parent roles of role with id `role_id`. In other words, `role_id` will no longer be automatically assigned permissions that are granted to `parent_role_id`.  We can say the `role_id` **not longer extends** `parent_role_id` or **no longer inherits** from `parent_role_id`.\n   * @summary Remove Parent Role\n   * @param {RolesApiRemoveParentRoleRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RolesApi\n   */\n  public removeParentRole(\n    requestParameters: RolesApiRemoveParentRoleRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return RolesApiFp(this.configuration)\n      .removeParentRole(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.roleId,\n        requestParameters.parentRoleId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Remove permissions from role.  If some of the permissions specified are already unassigned, will skip them.\n   * @summary Remove Permissions From Role\n   * @param {RolesApiRemovePermissionsFromRoleRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RolesApi\n   */\n  public removePermissionsFromRole(\n    requestParameters: RolesApiRemovePermissionsFromRoleRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return RolesApiFp(this.configuration)\n      .removePermissionsFromRole(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.roleId,\n        requestParameters.removeRolePermissions,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Partially updates a tenant role. Fields that will be provided will be completely overwritten.\n   * @summary Update Role\n   * @param {RolesApiUpdateRoleRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RolesApi\n   */\n  public updateRole(requestParameters: RolesApiUpdateRoleRequest, options?: AxiosRequestConfig) {\n    return RolesApiFp(this.configuration)\n      .updateRole(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.roleId,\n        requestParameters.roleUpdate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n// @ts-ignore\nimport { PaginatedResultUserRead } from '../types';\n// @ts-ignore\nimport { TenantCreate } from '../types';\n// @ts-ignore\nimport { TenantRead } from '../types';\n// @ts-ignore\nimport { TenantUpdate } from '../types';\n/**\n * TenantsApi - axios parameter creator\n * @export\n */\nexport const TenantsApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     * Creates a new tenant inside the Permit.io system.  If the tenant is already created: will return 200 instead of 201, and will return the existing tenant object in the response body.\n     * @summary Create Tenant\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {TenantCreate} tenantCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createTenant: async (\n      projId: string,\n      envId: string,\n      tenantCreate: TenantCreate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('createTenant', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('createTenant', 'envId', envId);\n      // verify required parameter 'tenantCreate' is not null or undefined\n      assertParamExists('createTenant', 'tenantCreate', tenantCreate);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/tenants`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        tenantCreate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Deletes the tenant and all its related data.\n     * @summary Delete Tenant\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} tenantId Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteTenant: async (\n      projId: string,\n      envId: string,\n      tenantId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('deleteTenant', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('deleteTenant', 'envId', envId);\n      // verify required parameter 'tenantId' is not null or undefined\n      assertParamExists('deleteTenant', 'tenantId', tenantId);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/tenants/{tenant_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'tenant_id'}}`, encodeURIComponent(String(tenantId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Deletes a user under a tenant.\n     * @summary Delete Tenant User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} tenantId Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteTenantUser: async (\n      projId: string,\n      envId: string,\n      tenantId: string,\n      userId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('deleteTenantUser', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('deleteTenantUser', 'envId', envId);\n      // verify required parameter 'tenantId' is not null or undefined\n      assertParamExists('deleteTenantUser', 'tenantId', tenantId);\n      // verify required parameter 'userId' is not null or undefined\n      assertParamExists('deleteTenantUser', 'userId', userId);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/tenants/{tenant_id}/users/{user_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'tenant_id'}}`, encodeURIComponent(String(tenantId)))\n        .replace(`{${'user_id'}}`, encodeURIComponent(String(userId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Gets a tenant, if such tenant exists. Otherwise returns 404.\n     * @summary Get Tenant\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} tenantId Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getTenant: async (\n      projId: string,\n      envId: string,\n      tenantId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getTenant', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getTenant', 'envId', envId);\n      // verify required parameter 'tenantId' is not null or undefined\n      assertParamExists('getTenant', 'tenantId', tenantId);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/tenants/{tenant_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'tenant_id'}}`, encodeURIComponent(String(tenantId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary List Tenant Users\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} tenantId Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [search] Text search for the email field\n     * @param {string} [role] Match users with a specific role\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listTenantUsers: async (\n      projId: string,\n      tenantId: string,\n      envId: string,\n      search?: string,\n      role?: string,\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('listTenantUsers', 'projId', projId);\n      // verify required parameter 'tenantId' is not null or undefined\n      assertParamExists('listTenantUsers', 'tenantId', tenantId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('listTenantUsers', 'envId', envId);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/tenants/{tenant_id}/users`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'tenant_id'}}`, encodeURIComponent(String(tenantId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (role !== undefined) {\n        localVarQueryParameter['role'] = role;\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Lists all the tenants defined within an environment.\n     * @summary List Tenants\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [search] Text search for the tenant name or key\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listTenants: async (\n      projId: string,\n      envId: string,\n      search?: string,\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('listTenants', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('listTenants', 'envId', envId);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/tenants`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Partially updates the tenant definition. Fields that will be provided will be completely overwritten.\n     * @summary Update Tenant\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} tenantId Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the \\&quot;slug\\&quot;).\n     * @param {TenantUpdate} tenantUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateTenant: async (\n      projId: string,\n      envId: string,\n      tenantId: string,\n      tenantUpdate: TenantUpdate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('updateTenant', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('updateTenant', 'envId', envId);\n      // verify required parameter 'tenantId' is not null or undefined\n      assertParamExists('updateTenant', 'tenantId', tenantId);\n      // verify required parameter 'tenantUpdate' is not null or undefined\n      assertParamExists('updateTenant', 'tenantUpdate', tenantUpdate);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/tenants/{tenant_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'tenant_id'}}`, encodeURIComponent(String(tenantId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        tenantUpdate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * TenantsApi - functional programming interface\n * @export\n */\nexport const TenantsApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = TenantsApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * Creates a new tenant inside the Permit.io system.  If the tenant is already created: will return 200 instead of 201, and will return the existing tenant object in the response body.\n     * @summary Create Tenant\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {TenantCreate} tenantCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async createTenant(\n      projId: string,\n      envId: string,\n      tenantCreate: TenantCreate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.createTenant(\n        projId,\n        envId,\n        tenantCreate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Deletes the tenant and all its related data.\n     * @summary Delete Tenant\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} tenantId Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async deleteTenant(\n      projId: string,\n      envId: string,\n      tenantId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTenant(\n        projId,\n        envId,\n        tenantId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Deletes a user under a tenant.\n     * @summary Delete Tenant User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} tenantId Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async deleteTenantUser(\n      projId: string,\n      envId: string,\n      tenantId: string,\n      userId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTenantUser(\n        projId,\n        envId,\n        tenantId,\n        userId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Gets a tenant, if such tenant exists. Otherwise returns 404.\n     * @summary Get Tenant\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} tenantId Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getTenant(\n      projId: string,\n      envId: string,\n      tenantId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getTenant(\n        projId,\n        envId,\n        tenantId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary List Tenant Users\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} tenantId Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [search] Text search for the email field\n     * @param {string} [role] Match users with a specific role\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async listTenantUsers(\n      projId: string,\n      tenantId: string,\n      envId: string,\n      search?: string,\n      role?: string,\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResultUserRead>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.listTenantUsers(\n        projId,\n        tenantId,\n        envId,\n        search,\n        role,\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Lists all the tenants defined within an environment.\n     * @summary List Tenants\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [search] Text search for the tenant name or key\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async listTenants(\n      projId: string,\n      envId: string,\n      search?: string,\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TenantRead>>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.listTenants(\n        projId,\n        envId,\n        search,\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Partially updates the tenant definition. Fields that will be provided will be completely overwritten.\n     * @summary Update Tenant\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} tenantId Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the \\&quot;slug\\&quot;).\n     * @param {TenantUpdate} tenantUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async updateTenant(\n      projId: string,\n      envId: string,\n      tenantId: string,\n      tenantUpdate: TenantUpdate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.updateTenant(\n        projId,\n        envId,\n        tenantId,\n        tenantUpdate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * TenantsApi - factory interface\n * @export\n */\nexport const TenantsApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = TenantsApiFp(configuration);\n  return {\n    /**\n     * Creates a new tenant inside the Permit.io system.  If the tenant is already created: will return 200 instead of 201, and will return the existing tenant object in the response body.\n     * @summary Create Tenant\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {TenantCreate} tenantCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createTenant(\n      projId: string,\n      envId: string,\n      tenantCreate: TenantCreate,\n      options?: any,\n    ): AxiosPromise<TenantRead> {\n      return localVarFp\n        .createTenant(projId, envId, tenantCreate, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Deletes the tenant and all its related data.\n     * @summary Delete Tenant\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} tenantId Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteTenant(\n      projId: string,\n      envId: string,\n      tenantId: string,\n      options?: any,\n    ): AxiosPromise<void> {\n      return localVarFp\n        .deleteTenant(projId, envId, tenantId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Deletes a user under a tenant.\n     * @summary Delete Tenant User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} tenantId Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteTenantUser(\n      projId: string,\n      envId: string,\n      tenantId: string,\n      userId: string,\n      options?: any,\n    ): AxiosPromise<void> {\n      return localVarFp\n        .deleteTenantUser(projId, envId, tenantId, userId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Gets a tenant, if such tenant exists. Otherwise returns 404.\n     * @summary Get Tenant\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} tenantId Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getTenant(\n      projId: string,\n      envId: string,\n      tenantId: string,\n      options?: any,\n    ): AxiosPromise<TenantRead> {\n      return localVarFp\n        .getTenant(projId, envId, tenantId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary List Tenant Users\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} tenantId Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [search] Text search for the email field\n     * @param {string} [role] Match users with a specific role\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listTenantUsers(\n      projId: string,\n      tenantId: string,\n      envId: string,\n      search?: string,\n      role?: string,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<PaginatedResultUserRead> {\n      return localVarFp\n        .listTenantUsers(projId, tenantId, envId, search, role, page, perPage, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Lists all the tenants defined within an environment.\n     * @summary List Tenants\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [search] Text search for the tenant name or key\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listTenants(\n      projId: string,\n      envId: string,\n      search?: string,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<Array<TenantRead>> {\n      return localVarFp\n        .listTenants(projId, envId, search, page, perPage, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Partially updates the tenant definition. Fields that will be provided will be completely overwritten.\n     * @summary Update Tenant\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} tenantId Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the \\&quot;slug\\&quot;).\n     * @param {TenantUpdate} tenantUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateTenant(\n      projId: string,\n      envId: string,\n      tenantId: string,\n      tenantUpdate: TenantUpdate,\n      options?: any,\n    ): AxiosPromise<TenantRead> {\n      return localVarFp\n        .updateTenant(projId, envId, tenantId, tenantUpdate, options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for createTenant operation in TenantsApi.\n * @export\n * @interface TenantsApiCreateTenantRequest\n */\nexport interface TenantsApiCreateTenantRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof TenantsApiCreateTenant\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof TenantsApiCreateTenant\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {TenantCreate}\n   * @memberof TenantsApiCreateTenant\n   */\n  readonly tenantCreate: TenantCreate;\n}\n\n/**\n * Request parameters for deleteTenant operation in TenantsApi.\n * @export\n * @interface TenantsApiDeleteTenantRequest\n */\nexport interface TenantsApiDeleteTenantRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof TenantsApiDeleteTenant\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof TenantsApiDeleteTenant\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof TenantsApiDeleteTenant\n   */\n  readonly tenantId: string;\n}\n\n/**\n * Request parameters for deleteTenantUser operation in TenantsApi.\n * @export\n * @interface TenantsApiDeleteTenantUserRequest\n */\nexport interface TenantsApiDeleteTenantUserRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof TenantsApiDeleteTenantUser\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof TenantsApiDeleteTenantUser\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof TenantsApiDeleteTenantUser\n   */\n  readonly tenantId: string;\n\n  /**\n   * Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof TenantsApiDeleteTenantUser\n   */\n  readonly userId: string;\n}\n\n/**\n * Request parameters for getTenant operation in TenantsApi.\n * @export\n * @interface TenantsApiGetTenantRequest\n */\nexport interface TenantsApiGetTenantRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof TenantsApiGetTenant\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof TenantsApiGetTenant\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof TenantsApiGetTenant\n   */\n  readonly tenantId: string;\n}\n\n/**\n * Request parameters for listTenantUsers operation in TenantsApi.\n * @export\n * @interface TenantsApiListTenantUsersRequest\n */\nexport interface TenantsApiListTenantUsersRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof TenantsApiListTenantUsers\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof TenantsApiListTenantUsers\n   */\n  readonly tenantId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof TenantsApiListTenantUsers\n   */\n  readonly envId: string;\n\n  /**\n   * Text search for the email field\n   * @type {string}\n   * @memberof TenantsApiListTenantUsers\n   */\n  readonly search?: string;\n\n  /**\n   * Match users with a specific role\n   * @type {string}\n   * @memberof TenantsApiListTenantUsers\n   */\n  readonly role?: string;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof TenantsApiListTenantUsers\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof TenantsApiListTenantUsers\n   */\n  readonly perPage?: number;\n}\n\n/**\n * Request parameters for listTenants operation in TenantsApi.\n * @export\n * @interface TenantsApiListTenantsRequest\n */\nexport interface TenantsApiListTenantsRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof TenantsApiListTenants\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof TenantsApiListTenants\n   */\n  readonly envId: string;\n\n  /**\n   * Text search for the tenant name or key\n   * @type {string}\n   * @memberof TenantsApiListTenants\n   */\n  readonly search?: string;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof TenantsApiListTenants\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof TenantsApiListTenants\n   */\n  readonly perPage?: number;\n}\n\n/**\n * Request parameters for updateTenant operation in TenantsApi.\n * @export\n * @interface TenantsApiUpdateTenantRequest\n */\nexport interface TenantsApiUpdateTenantRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof TenantsApiUpdateTenant\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof TenantsApiUpdateTenant\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof TenantsApiUpdateTenant\n   */\n  readonly tenantId: string;\n\n  /**\n   *\n   * @type {TenantUpdate}\n   * @memberof TenantsApiUpdateTenant\n   */\n  readonly tenantUpdate: TenantUpdate;\n}\n\n/**\n * TenantsApi - object-oriented interface\n * @export\n * @class TenantsApi\n * @extends {BaseAPI}\n */\nexport class TenantsApi extends BaseAPI {\n  /**\n   * Creates a new tenant inside the Permit.io system.  If the tenant is already created: will return 200 instead of 201, and will return the existing tenant object in the response body.\n   * @summary Create Tenant\n   * @param {TenantsApiCreateTenantRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof TenantsApi\n   */\n  public createTenant(\n    requestParameters: TenantsApiCreateTenantRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return TenantsApiFp(this.configuration)\n      .createTenant(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.tenantCreate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Deletes the tenant and all its related data.\n   * @summary Delete Tenant\n   * @param {TenantsApiDeleteTenantRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof TenantsApi\n   */\n  public deleteTenant(\n    requestParameters: TenantsApiDeleteTenantRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return TenantsApiFp(this.configuration)\n      .deleteTenant(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.tenantId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Deletes a user under a tenant.\n   * @summary Delete Tenant User\n   * @param {TenantsApiDeleteTenantUserRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof TenantsApi\n   */\n  public deleteTenantUser(\n    requestParameters: TenantsApiDeleteTenantUserRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return TenantsApiFp(this.configuration)\n      .deleteTenantUser(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.tenantId,\n        requestParameters.userId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Gets a tenant, if such tenant exists. Otherwise returns 404.\n   * @summary Get Tenant\n   * @param {TenantsApiGetTenantRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof TenantsApi\n   */\n  public getTenant(requestParameters: TenantsApiGetTenantRequest, options?: AxiosRequestConfig) {\n    return TenantsApiFp(this.configuration)\n      .getTenant(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.tenantId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary List Tenant Users\n   * @param {TenantsApiListTenantUsersRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof TenantsApi\n   */\n  public listTenantUsers(\n    requestParameters: TenantsApiListTenantUsersRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return TenantsApiFp(this.configuration)\n      .listTenantUsers(\n        requestParameters.projId,\n        requestParameters.tenantId,\n        requestParameters.envId,\n        requestParameters.search,\n        requestParameters.role,\n        requestParameters.page,\n        requestParameters.perPage,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Lists all the tenants defined within an environment.\n   * @summary List Tenants\n   * @param {TenantsApiListTenantsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof TenantsApi\n   */\n  public listTenants(\n    requestParameters: TenantsApiListTenantsRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return TenantsApiFp(this.configuration)\n      .listTenants(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.search,\n        requestParameters.page,\n        requestParameters.perPage,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Partially updates the tenant definition. Fields that will be provided will be completely overwritten.\n   * @summary Update Tenant\n   * @param {TenantsApiUpdateTenantRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof TenantsApi\n   */\n  public updateTenant(\n    requestParameters: TenantsApiUpdateTenantRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return TenantsApiFp(this.configuration)\n      .updateTenant(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.tenantId,\n        requestParameters.tenantUpdate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n// @ts-ignore\nimport { ResourceAttributeCreate } from '../types';\n// @ts-ignore\nimport { ResourceAttributeRead } from '../types';\n// @ts-ignore\nimport { ResourceAttributeUpdate } from '../types';\n/**\n * UserAttributesApi - axios parameter creator\n * @export\n */\nexport const UserAttributesApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     * Creates a new attribute for the User resource.\n     * @summary Create User Attribute\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceAttributeCreate} resourceAttributeCreate\n     * @param {string} [resourceId]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createUserAttribute: async (\n      projId: string,\n      envId: string,\n      resourceAttributeCreate: ResourceAttributeCreate,\n      resourceId?: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('createUserAttribute', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('createUserAttribute', 'envId', envId);\n      // verify required parameter 'resourceAttributeCreate' is not null or undefined\n      assertParamExists('createUserAttribute', 'resourceAttributeCreate', resourceAttributeCreate);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/users/attributes`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (resourceId !== undefined) {\n        localVarQueryParameter['resource_id'] = resourceId;\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        resourceAttributeCreate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Deletes the attribute and all its related data.  Note: If the attribute is used by policies, removing it will cause the attribute to evaluate as `undefined`.\n     * @summary Delete User Attribute\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [resourceId]\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteUserAttribute: async (\n      projId: string,\n      envId: string,\n      attributeId: string,\n      resourceId?: string,\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('deleteUserAttribute', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('deleteUserAttribute', 'envId', envId);\n      // verify required parameter 'attributeId' is not null or undefined\n      assertParamExists('deleteUserAttribute', 'attributeId', attributeId);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/users/attributes/{attribute_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'attribute_id'}}`, encodeURIComponent(String(attributeId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (resourceId !== undefined) {\n        localVarQueryParameter['resource_id'] = resourceId;\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Gets a single attribute defined on the User resource, if such attribute exists.\n     * @summary Get User Attribute\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [resourceId]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getUserAttribute: async (\n      projId: string,\n      envId: string,\n      attributeId: string,\n      resourceId?: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getUserAttribute', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getUserAttribute', 'envId', envId);\n      // verify required parameter 'attributeId' is not null or undefined\n      assertParamExists('getUserAttribute', 'attributeId', attributeId);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/users/attributes/{attribute_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'attribute_id'}}`, encodeURIComponent(String(attributeId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (resourceId !== undefined) {\n        localVarQueryParameter['resource_id'] = resourceId;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Lists all the attributes defined on the User resource.\n     * @summary List User Attributes\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [resourceId]\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listUserAttributes: async (\n      projId: string,\n      envId: string,\n      resourceId?: string,\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('listUserAttributes', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('listUserAttributes', 'envId', envId);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/users/attributes`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (resourceId !== undefined) {\n        localVarQueryParameter['resource_id'] = resourceId;\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Partially updates the attribute defined on the User resource. Fields that will be provided will be completely overwritten.\n     * @summary Update User Attribute\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceAttributeUpdate} resourceAttributeUpdate\n     * @param {string} [resourceId]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateUserAttribute: async (\n      projId: string,\n      envId: string,\n      attributeId: string,\n      resourceAttributeUpdate: ResourceAttributeUpdate,\n      resourceId?: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('updateUserAttribute', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('updateUserAttribute', 'envId', envId);\n      // verify required parameter 'attributeId' is not null or undefined\n      assertParamExists('updateUserAttribute', 'attributeId', attributeId);\n      // verify required parameter 'resourceAttributeUpdate' is not null or undefined\n      assertParamExists('updateUserAttribute', 'resourceAttributeUpdate', resourceAttributeUpdate);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/users/attributes/{attribute_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'attribute_id'}}`, encodeURIComponent(String(attributeId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (resourceId !== undefined) {\n        localVarQueryParameter['resource_id'] = resourceId;\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        resourceAttributeUpdate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * UserAttributesApi - functional programming interface\n * @export\n */\nexport const UserAttributesApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = UserAttributesApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * Creates a new attribute for the User resource.\n     * @summary Create User Attribute\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceAttributeCreate} resourceAttributeCreate\n     * @param {string} [resourceId]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async createUserAttribute(\n      projId: string,\n      envId: string,\n      resourceAttributeCreate: ResourceAttributeCreate,\n      resourceId?: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceAttributeRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.createUserAttribute(\n        projId,\n        envId,\n        resourceAttributeCreate,\n        resourceId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Deletes the attribute and all its related data.  Note: If the attribute is used by policies, removing it will cause the attribute to evaluate as `undefined`.\n     * @summary Delete User Attribute\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [resourceId]\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async deleteUserAttribute(\n      projId: string,\n      envId: string,\n      attributeId: string,\n      resourceId?: string,\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserAttribute(\n        projId,\n        envId,\n        attributeId,\n        resourceId,\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Gets a single attribute defined on the User resource, if such attribute exists.\n     * @summary Get User Attribute\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [resourceId]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getUserAttribute(\n      projId: string,\n      envId: string,\n      attributeId: string,\n      resourceId?: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceAttributeRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getUserAttribute(\n        projId,\n        envId,\n        attributeId,\n        resourceId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Lists all the attributes defined on the User resource.\n     * @summary List User Attributes\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [resourceId]\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async listUserAttributes(\n      projId: string,\n      envId: string,\n      resourceId?: string,\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ResourceAttributeRead>>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.listUserAttributes(\n        projId,\n        envId,\n        resourceId,\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Partially updates the attribute defined on the User resource. Fields that will be provided will be completely overwritten.\n     * @summary Update User Attribute\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceAttributeUpdate} resourceAttributeUpdate\n     * @param {string} [resourceId]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async updateUserAttribute(\n      projId: string,\n      envId: string,\n      attributeId: string,\n      resourceAttributeUpdate: ResourceAttributeUpdate,\n      resourceId?: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceAttributeRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserAttribute(\n        projId,\n        envId,\n        attributeId,\n        resourceAttributeUpdate,\n        resourceId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * UserAttributesApi - factory interface\n * @export\n */\nexport const UserAttributesApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = UserAttributesApiFp(configuration);\n  return {\n    /**\n     * Creates a new attribute for the User resource.\n     * @summary Create User Attribute\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceAttributeCreate} resourceAttributeCreate\n     * @param {string} [resourceId]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createUserAttribute(\n      projId: string,\n      envId: string,\n      resourceAttributeCreate: ResourceAttributeCreate,\n      resourceId?: string,\n      options?: any,\n    ): AxiosPromise<ResourceAttributeRead> {\n      return localVarFp\n        .createUserAttribute(projId, envId, resourceAttributeCreate, resourceId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Deletes the attribute and all its related data.  Note: If the attribute is used by policies, removing it will cause the attribute to evaluate as `undefined`.\n     * @summary Delete User Attribute\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [resourceId]\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteUserAttribute(\n      projId: string,\n      envId: string,\n      attributeId: string,\n      resourceId?: string,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<void> {\n      return localVarFp\n        .deleteUserAttribute(projId, envId, attributeId, resourceId, page, perPage, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Gets a single attribute defined on the User resource, if such attribute exists.\n     * @summary Get User Attribute\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [resourceId]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getUserAttribute(\n      projId: string,\n      envId: string,\n      attributeId: string,\n      resourceId?: string,\n      options?: any,\n    ): AxiosPromise<ResourceAttributeRead> {\n      return localVarFp\n        .getUserAttribute(projId, envId, attributeId, resourceId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Lists all the attributes defined on the User resource.\n     * @summary List User Attributes\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [resourceId]\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listUserAttributes(\n      projId: string,\n      envId: string,\n      resourceId?: string,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<Array<ResourceAttributeRead>> {\n      return localVarFp\n        .listUserAttributes(projId, envId, resourceId, page, perPage, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Partially updates the attribute defined on the User resource. Fields that will be provided will be completely overwritten.\n     * @summary Update User Attribute\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceAttributeUpdate} resourceAttributeUpdate\n     * @param {string} [resourceId]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateUserAttribute(\n      projId: string,\n      envId: string,\n      attributeId: string,\n      resourceAttributeUpdate: ResourceAttributeUpdate,\n      resourceId?: string,\n      options?: any,\n    ): AxiosPromise<ResourceAttributeRead> {\n      return localVarFp\n        .updateUserAttribute(\n          projId,\n          envId,\n          attributeId,\n          resourceAttributeUpdate,\n          resourceId,\n          options,\n        )\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for createUserAttribute operation in UserAttributesApi.\n * @export\n * @interface UserAttributesApiCreateUserAttributeRequest\n */\nexport interface UserAttributesApiCreateUserAttributeRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UserAttributesApiCreateUserAttribute\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UserAttributesApiCreateUserAttribute\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {ResourceAttributeCreate}\n   * @memberof UserAttributesApiCreateUserAttribute\n   */\n  readonly resourceAttributeCreate: ResourceAttributeCreate;\n\n  /**\n   *\n   * @type {string}\n   * @memberof UserAttributesApiCreateUserAttribute\n   */\n  readonly resourceId?: string;\n}\n\n/**\n * Request parameters for deleteUserAttribute operation in UserAttributesApi.\n * @export\n * @interface UserAttributesApiDeleteUserAttributeRequest\n */\nexport interface UserAttributesApiDeleteUserAttributeRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UserAttributesApiDeleteUserAttribute\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UserAttributesApiDeleteUserAttribute\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UserAttributesApiDeleteUserAttribute\n   */\n  readonly attributeId: string;\n\n  /**\n   *\n   * @type {string}\n   * @memberof UserAttributesApiDeleteUserAttribute\n   */\n  readonly resourceId?: string;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof UserAttributesApiDeleteUserAttribute\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof UserAttributesApiDeleteUserAttribute\n   */\n  readonly perPage?: number;\n}\n\n/**\n * Request parameters for getUserAttribute operation in UserAttributesApi.\n * @export\n * @interface UserAttributesApiGetUserAttributeRequest\n */\nexport interface UserAttributesApiGetUserAttributeRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UserAttributesApiGetUserAttribute\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UserAttributesApiGetUserAttribute\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UserAttributesApiGetUserAttribute\n   */\n  readonly attributeId: string;\n\n  /**\n   *\n   * @type {string}\n   * @memberof UserAttributesApiGetUserAttribute\n   */\n  readonly resourceId?: string;\n}\n\n/**\n * Request parameters for listUserAttributes operation in UserAttributesApi.\n * @export\n * @interface UserAttributesApiListUserAttributesRequest\n */\nexport interface UserAttributesApiListUserAttributesRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UserAttributesApiListUserAttributes\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UserAttributesApiListUserAttributes\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {string}\n   * @memberof UserAttributesApiListUserAttributes\n   */\n  readonly resourceId?: string;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof UserAttributesApiListUserAttributes\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof UserAttributesApiListUserAttributes\n   */\n  readonly perPage?: number;\n}\n\n/**\n * Request parameters for updateUserAttribute operation in UserAttributesApi.\n * @export\n * @interface UserAttributesApiUpdateUserAttributeRequest\n */\nexport interface UserAttributesApiUpdateUserAttributeRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UserAttributesApiUpdateUserAttribute\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UserAttributesApiUpdateUserAttribute\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UserAttributesApiUpdateUserAttribute\n   */\n  readonly attributeId: string;\n\n  /**\n   *\n   * @type {ResourceAttributeUpdate}\n   * @memberof UserAttributesApiUpdateUserAttribute\n   */\n  readonly resourceAttributeUpdate: ResourceAttributeUpdate;\n\n  /**\n   *\n   * @type {string}\n   * @memberof UserAttributesApiUpdateUserAttribute\n   */\n  readonly resourceId?: string;\n}\n\n/**\n * UserAttributesApi - object-oriented interface\n * @export\n * @class UserAttributesApi\n * @extends {BaseAPI}\n */\nexport class UserAttributesApi extends BaseAPI {\n  /**\n   * Creates a new attribute for the User resource.\n   * @summary Create User Attribute\n   * @param {UserAttributesApiCreateUserAttributeRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof UserAttributesApi\n   */\n  public createUserAttribute(\n    requestParameters: UserAttributesApiCreateUserAttributeRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return UserAttributesApiFp(this.configuration)\n      .createUserAttribute(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.resourceAttributeCreate,\n        requestParameters.resourceId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Deletes the attribute and all its related data.  Note: If the attribute is used by policies, removing it will cause the attribute to evaluate as `undefined`.\n   * @summary Delete User Attribute\n   * @param {UserAttributesApiDeleteUserAttributeRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof UserAttributesApi\n   */\n  public deleteUserAttribute(\n    requestParameters: UserAttributesApiDeleteUserAttributeRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return UserAttributesApiFp(this.configuration)\n      .deleteUserAttribute(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.attributeId,\n        requestParameters.resourceId,\n        requestParameters.page,\n        requestParameters.perPage,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Gets a single attribute defined on the User resource, if such attribute exists.\n   * @summary Get User Attribute\n   * @param {UserAttributesApiGetUserAttributeRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof UserAttributesApi\n   */\n  public getUserAttribute(\n    requestParameters: UserAttributesApiGetUserAttributeRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return UserAttributesApiFp(this.configuration)\n      .getUserAttribute(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.attributeId,\n        requestParameters.resourceId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Lists all the attributes defined on the User resource.\n   * @summary List User Attributes\n   * @param {UserAttributesApiListUserAttributesRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof UserAttributesApi\n   */\n  public listUserAttributes(\n    requestParameters: UserAttributesApiListUserAttributesRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return UserAttributesApiFp(this.configuration)\n      .listUserAttributes(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.resourceId,\n        requestParameters.page,\n        requestParameters.perPage,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Partially updates the attribute defined on the User resource. Fields that will be provided will be completely overwritten.\n   * @summary Update User Attribute\n   * @param {UserAttributesApiUpdateUserAttributeRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof UserAttributesApi\n   */\n  public updateUserAttribute(\n    requestParameters: UserAttributesApiUpdateUserAttributeRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return UserAttributesApiFp(this.configuration)\n      .updateUserAttribute(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.attributeId,\n        requestParameters.resourceAttributeUpdate,\n        requestParameters.resourceId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n// @ts-ignore\nimport { PaginatedResultUserRead } from '../types';\n// @ts-ignore\nimport { RoleAssignmentRead } from '../types';\n// @ts-ignore\nimport { UserCreate } from '../types';\n// @ts-ignore\nimport { UserRead } from '../types';\n// @ts-ignore\nimport { UserRoleCreate } from '../types';\n// @ts-ignore\nimport { UserRoleRemove } from '../types';\n// @ts-ignore\nimport { UserUpdate } from '../types';\n/**\n * UsersApi - axios parameter creator\n * @export\n */\nexport const UsersApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     * Assigns a role to the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.\n     * @summary Assign Role To User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {UserRoleCreate} userRoleCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    assignRoleToUser: async (\n      projId: string,\n      envId: string,\n      userId: string,\n      userRoleCreate: UserRoleCreate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('assignRoleToUser', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('assignRoleToUser', 'envId', envId);\n      // verify required parameter 'userId' is not null or undefined\n      assertParamExists('assignRoleToUser', 'userId', userId);\n      // verify required parameter 'userRoleCreate' is not null or undefined\n      assertParamExists('assignRoleToUser', 'userRoleCreate', userRoleCreate);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/users/{user_id}/roles`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'user_id'}}`, encodeURIComponent(String(userId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        userRoleCreate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Creates a new user inside the Permit.io system, from that point forward you may run permission checks on that user.  If the user is already created: will return 200 instead of 201, and will return the existing user object in the response body.\n     * @summary Create User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {UserCreate} userCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createUser: async (\n      projId: string,\n      envId: string,\n      userCreate: UserCreate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('createUser', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('createUser', 'envId', envId);\n      // verify required parameter 'userCreate' is not null or undefined\n      assertParamExists('createUser', 'userCreate', userCreate);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/users`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        userCreate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Deletes the user and all its related data.\n     * @summary Delete User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteUser: async (\n      projId: string,\n      envId: string,\n      userId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('deleteUser', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('deleteUser', 'envId', envId);\n      // verify required parameter 'userId' is not null or undefined\n      assertParamExists('deleteUser', 'userId', userId);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/users/{user_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'user_id'}}`, encodeURIComponent(String(userId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Gets a user, if such user exists. Otherwise returns 404.\n     * @summary Get User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getUser: async (\n      projId: string,\n      envId: string,\n      userId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getUser', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getUser', 'envId', envId);\n      // verify required parameter 'userId' is not null or undefined\n      assertParamExists('getUser', 'userId', userId);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/users/{user_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'user_id'}}`, encodeURIComponent(String(userId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Lists all the users defined within an environment.\n     * @summary List Users\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [search] Text search for the email field\n     * @param {string} [role] Match users with a specific role\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listUsers: async (\n      projId: string,\n      envId: string,\n      search?: string,\n      role?: string,\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('listUsers', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('listUsers', 'envId', envId);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/users`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (role !== undefined) {\n        localVarQueryParameter['role'] = role;\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Replace User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {UserCreate} userCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    replaceUser: async (\n      projId: string,\n      envId: string,\n      userId: string,\n      userCreate: UserCreate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('replaceUser', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('replaceUser', 'envId', envId);\n      // verify required parameter 'userId' is not null or undefined\n      assertParamExists('replaceUser', 'userId', userId);\n      // verify required parameter 'userCreate' is not null or undefined\n      assertParamExists('replaceUser', 'userCreate', userCreate);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/users/{user_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'user_id'}}`, encodeURIComponent(String(userId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        userCreate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Unassigns the role from the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.\n     * @summary Unassign Role From User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {UserRoleRemove} userRoleRemove\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    unassignRoleFromUser: async (\n      projId: string,\n      envId: string,\n      userId: string,\n      userRoleRemove: UserRoleRemove,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('unassignRoleFromUser', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('unassignRoleFromUser', 'envId', envId);\n      // verify required parameter 'userId' is not null or undefined\n      assertParamExists('unassignRoleFromUser', 'userId', userId);\n      // verify required parameter 'userRoleRemove' is not null or undefined\n      assertParamExists('unassignRoleFromUser', 'userRoleRemove', userRoleRemove);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/users/{user_id}/roles`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'user_id'}}`, encodeURIComponent(String(userId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        userRoleRemove,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Partially updates the user definition. Fields that will be provided will be completely overwritten.\n     * @summary Update User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {UserUpdate} userUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateUser: async (\n      projId: string,\n      envId: string,\n      userId: string,\n      userUpdate: UserUpdate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('updateUser', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('updateUser', 'envId', envId);\n      // verify required parameter 'userId' is not null or undefined\n      assertParamExists('updateUser', 'userId', userId);\n      // verify required parameter 'userUpdate' is not null or undefined\n      assertParamExists('updateUser', 'userUpdate', userUpdate);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/users/{user_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'user_id'}}`, encodeURIComponent(String(userId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        userUpdate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * UsersApi - functional programming interface\n * @export\n */\nexport const UsersApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * Assigns a role to the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.\n     * @summary Assign Role To User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {UserRoleCreate} userRoleCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async assignRoleToUser(\n      projId: string,\n      envId: string,\n      userId: string,\n      userRoleCreate: UserRoleCreate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleAssignmentRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.assignRoleToUser(\n        projId,\n        envId,\n        userId,\n        userRoleCreate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Creates a new user inside the Permit.io system, from that point forward you may run permission checks on that user.  If the user is already created: will return 200 instead of 201, and will return the existing user object in the response body.\n     * @summary Create User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {UserCreate} userCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async createUser(\n      projId: string,\n      envId: string,\n      userCreate: UserCreate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(\n        projId,\n        envId,\n        userCreate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Deletes the user and all its related data.\n     * @summary Delete User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async deleteUser(\n      projId: string,\n      envId: string,\n      userId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(\n        projId,\n        envId,\n        userId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Gets a user, if such user exists. Otherwise returns 404.\n     * @summary Get User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getUser(\n      projId: string,\n      envId: string,\n      userId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(\n        projId,\n        envId,\n        userId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Lists all the users defined within an environment.\n     * @summary List Users\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [search] Text search for the email field\n     * @param {string} [role] Match users with a specific role\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async listUsers(\n      projId: string,\n      envId: string,\n      search?: string,\n      role?: string,\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResultUserRead>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.listUsers(\n        projId,\n        envId,\n        search,\n        role,\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Replace User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {UserCreate} userCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async replaceUser(\n      projId: string,\n      envId: string,\n      userId: string,\n      userCreate: UserCreate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.replaceUser(\n        projId,\n        envId,\n        userId,\n        userCreate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Unassigns the role from the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.\n     * @summary Unassign Role From User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {UserRoleRemove} userRoleRemove\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async unassignRoleFromUser(\n      projId: string,\n      envId: string,\n      userId: string,\n      userRoleRemove: UserRoleRemove,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.unassignRoleFromUser(\n        projId,\n        envId,\n        userId,\n        userRoleRemove,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Partially updates the user definition. Fields that will be provided will be completely overwritten.\n     * @summary Update User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {UserUpdate} userUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async updateUser(\n      projId: string,\n      envId: string,\n      userId: string,\n      userUpdate: UserUpdate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(\n        projId,\n        envId,\n        userId,\n        userUpdate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * UsersApi - factory interface\n * @export\n */\nexport const UsersApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = UsersApiFp(configuration);\n  return {\n    /**\n     * Assigns a role to the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.\n     * @summary Assign Role To User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {UserRoleCreate} userRoleCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    assignRoleToUser(\n      projId: string,\n      envId: string,\n      userId: string,\n      userRoleCreate: UserRoleCreate,\n      options?: any,\n    ): AxiosPromise<RoleAssignmentRead> {\n      return localVarFp\n        .assignRoleToUser(projId, envId, userId, userRoleCreate, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Creates a new user inside the Permit.io system, from that point forward you may run permission checks on that user.  If the user is already created: will return 200 instead of 201, and will return the existing user object in the response body.\n     * @summary Create User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {UserCreate} userCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createUser(\n      projId: string,\n      envId: string,\n      userCreate: UserCreate,\n      options?: any,\n    ): AxiosPromise<UserRead> {\n      return localVarFp\n        .createUser(projId, envId, userCreate, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Deletes the user and all its related data.\n     * @summary Delete User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteUser(projId: string, envId: string, userId: string, options?: any): AxiosPromise<void> {\n      return localVarFp\n        .deleteUser(projId, envId, userId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Gets a user, if such user exists. Otherwise returns 404.\n     * @summary Get User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getUser(projId: string, envId: string, userId: string, options?: any): AxiosPromise<UserRead> {\n      return localVarFp\n        .getUser(projId, envId, userId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Lists all the users defined within an environment.\n     * @summary List Users\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [search] Text search for the email field\n     * @param {string} [role] Match users with a specific role\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listUsers(\n      projId: string,\n      envId: string,\n      search?: string,\n      role?: string,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<PaginatedResultUserRead> {\n      return localVarFp\n        .listUsers(projId, envId, search, role, page, perPage, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Replace User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {UserCreate} userCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    replaceUser(\n      projId: string,\n      envId: string,\n      userId: string,\n      userCreate: UserCreate,\n      options?: any,\n    ): AxiosPromise<UserRead> {\n      return localVarFp\n        .replaceUser(projId, envId, userId, userCreate, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Unassigns the role from the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.\n     * @summary Unassign Role From User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {UserRoleRemove} userRoleRemove\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    unassignRoleFromUser(\n      projId: string,\n      envId: string,\n      userId: string,\n      userRoleRemove: UserRoleRemove,\n      options?: any,\n    ): AxiosPromise<void> {\n      return localVarFp\n        .unassignRoleFromUser(projId, envId, userId, userRoleRemove, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Partially updates the user definition. Fields that will be provided will be completely overwritten.\n     * @summary Update User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {UserUpdate} userUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateUser(\n      projId: string,\n      envId: string,\n      userId: string,\n      userUpdate: UserUpdate,\n      options?: any,\n    ): AxiosPromise<UserRead> {\n      return localVarFp\n        .updateUser(projId, envId, userId, userUpdate, options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for assignRoleToUser operation in UsersApi.\n * @export\n * @interface UsersApiAssignRoleToUserRequest\n */\nexport interface UsersApiAssignRoleToUserRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiAssignRoleToUser\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiAssignRoleToUser\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiAssignRoleToUser\n   */\n  readonly userId: string;\n\n  /**\n   *\n   * @type {UserRoleCreate}\n   * @memberof UsersApiAssignRoleToUser\n   */\n  readonly userRoleCreate: UserRoleCreate;\n}\n\n/**\n * Request parameters for createUser operation in UsersApi.\n * @export\n * @interface UsersApiCreateUserRequest\n */\nexport interface UsersApiCreateUserRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiCreateUser\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiCreateUser\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {UserCreate}\n   * @memberof UsersApiCreateUser\n   */\n  readonly userCreate: UserCreate;\n}\n\n/**\n * Request parameters for deleteUser operation in UsersApi.\n * @export\n * @interface UsersApiDeleteUserRequest\n */\nexport interface UsersApiDeleteUserRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiDeleteUser\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiDeleteUser\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiDeleteUser\n   */\n  readonly userId: string;\n}\n\n/**\n * Request parameters for getUser operation in UsersApi.\n * @export\n * @interface UsersApiGetUserRequest\n */\nexport interface UsersApiGetUserRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiGetUser\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiGetUser\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiGetUser\n   */\n  readonly userId: string;\n}\n\n/**\n * Request parameters for listUsers operation in UsersApi.\n * @export\n * @interface UsersApiListUsersRequest\n */\nexport interface UsersApiListUsersRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiListUsers\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiListUsers\n   */\n  readonly envId: string;\n\n  /**\n   * Text search for the email field\n   * @type {string}\n   * @memberof UsersApiListUsers\n   */\n  readonly search?: string;\n\n  /**\n   * Match users with a specific role\n   * @type {string}\n   * @memberof UsersApiListUsers\n   */\n  readonly role?: string;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof UsersApiListUsers\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof UsersApiListUsers\n   */\n  readonly perPage?: number;\n}\n\n/**\n * Request parameters for replaceUser operation in UsersApi.\n * @export\n * @interface UsersApiReplaceUserRequest\n */\nexport interface UsersApiReplaceUserRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiReplaceUser\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiReplaceUser\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiReplaceUser\n   */\n  readonly userId: string;\n\n  /**\n   *\n   * @type {UserCreate}\n   * @memberof UsersApiReplaceUser\n   */\n  readonly userCreate: UserCreate;\n}\n\n/**\n * Request parameters for unassignRoleFromUser operation in UsersApi.\n * @export\n * @interface UsersApiUnassignRoleFromUserRequest\n */\nexport interface UsersApiUnassignRoleFromUserRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiUnassignRoleFromUser\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiUnassignRoleFromUser\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiUnassignRoleFromUser\n   */\n  readonly userId: string;\n\n  /**\n   *\n   * @type {UserRoleRemove}\n   * @memberof UsersApiUnassignRoleFromUser\n   */\n  readonly userRoleRemove: UserRoleRemove;\n}\n\n/**\n * Request parameters for updateUser operation in UsersApi.\n * @export\n * @interface UsersApiUpdateUserRequest\n */\nexport interface UsersApiUpdateUserRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiUpdateUser\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiUpdateUser\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiUpdateUser\n   */\n  readonly userId: string;\n\n  /**\n   *\n   * @type {UserUpdate}\n   * @memberof UsersApiUpdateUser\n   */\n  readonly userUpdate: UserUpdate;\n}\n\n/**\n * UsersApi - object-oriented interface\n * @export\n * @class UsersApi\n * @extends {BaseAPI}\n */\nexport class UsersApi extends BaseAPI {\n  /**\n   * Assigns a role to the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.\n   * @summary Assign Role To User\n   * @param {UsersApiAssignRoleToUserRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof UsersApi\n   */\n  public assignRoleToUser(\n    requestParameters: UsersApiAssignRoleToUserRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return UsersApiFp(this.configuration)\n      .assignRoleToUser(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.userId,\n        requestParameters.userRoleCreate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Creates a new user inside the Permit.io system, from that point forward you may run permission checks on that user.  If the user is already created: will return 200 instead of 201, and will return the existing user object in the response body.\n   * @summary Create User\n   * @param {UsersApiCreateUserRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof UsersApi\n   */\n  public createUser(requestParameters: UsersApiCreateUserRequest, options?: AxiosRequestConfig) {\n    return UsersApiFp(this.configuration)\n      .createUser(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.userCreate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Deletes the user and all its related data.\n   * @summary Delete User\n   * @param {UsersApiDeleteUserRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof UsersApi\n   */\n  public deleteUser(requestParameters: UsersApiDeleteUserRequest, options?: AxiosRequestConfig) {\n    return UsersApiFp(this.configuration)\n      .deleteUser(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.userId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Gets a user, if such user exists. Otherwise returns 404.\n   * @summary Get User\n   * @param {UsersApiGetUserRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof UsersApi\n   */\n  public getUser(requestParameters: UsersApiGetUserRequest, options?: AxiosRequestConfig) {\n    return UsersApiFp(this.configuration)\n      .getUser(requestParameters.projId, requestParameters.envId, requestParameters.userId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Lists all the users defined within an environment.\n   * @summary List Users\n   * @param {UsersApiListUsersRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof UsersApi\n   */\n  public listUsers(requestParameters: UsersApiListUsersRequest, options?: AxiosRequestConfig) {\n    return UsersApiFp(this.configuration)\n      .listUsers(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.search,\n        requestParameters.role,\n        requestParameters.page,\n        requestParameters.perPage,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Replace User\n   * @param {UsersApiReplaceUserRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof UsersApi\n   */\n  public replaceUser(requestParameters: UsersApiReplaceUserRequest, options?: AxiosRequestConfig) {\n    return UsersApiFp(this.configuration)\n      .replaceUser(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.userId,\n        requestParameters.userCreate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Unassigns the role from the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.\n   * @summary Unassign Role From User\n   * @param {UsersApiUnassignRoleFromUserRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof UsersApi\n   */\n  public unassignRoleFromUser(\n    requestParameters: UsersApiUnassignRoleFromUserRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return UsersApiFp(this.configuration)\n      .unassignRoleFromUser(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.userId,\n        requestParameters.userRoleRemove,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Partially updates the user definition. Fields that will be provided will be completely overwritten.\n   * @summary Update User\n   * @param {UsersApiUpdateUserRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof UsersApi\n   */\n  public updateUser(requestParameters: UsersApiUpdateUserRequest, options?: AxiosRequestConfig) {\n    return UsersApiFp(this.configuration)\n      .updateUser(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.userId,\n        requestParameters.userUpdate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { ElementsRoleRead } from '../types';\n// @ts-ignore\nimport { ElementsUserCreate } from '../types';\n// @ts-ignore\nimport { ElementsUserRoleCreate } from '../types';\n// @ts-ignore\nimport { ElementsUserRoleRemove } from '../types';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n// @ts-ignore\nimport { PaginatedResultUserRead } from '../types';\n// @ts-ignore\nimport { RoleAssignmentRead } from '../types';\n// @ts-ignore\nimport { UserRead } from '../types';\n/**\n * UsersElementsDataApi - axios parameter creator\n * @export\n */\nexport const UsersElementsDataApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     * Assigns a role to the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.\n     * @summary Assign role to user\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {ElementsUserRoleCreate} elementsUserRoleCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    elementsAssignRoleToUser: async (\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      userId: string,\n      elementsUserRoleCreate: ElementsUserRoleCreate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('elementsAssignRoleToUser', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('elementsAssignRoleToUser', 'envId', envId);\n      // verify required parameter 'elementsConfigId' is not null or undefined\n      assertParamExists('elementsAssignRoleToUser', 'elementsConfigId', elementsConfigId);\n      // verify required parameter 'userId' is not null or undefined\n      assertParamExists('elementsAssignRoleToUser', 'userId', userId);\n      // verify required parameter 'elementsUserRoleCreate' is not null or undefined\n      assertParamExists(\n        'elementsAssignRoleToUser',\n        'elementsUserRoleCreate',\n        elementsUserRoleCreate,\n      );\n      const localVarPath =\n        `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/users/{user_id}/roles`\n          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n          .replace(`{${'elements_config_id'}}`, encodeURIComponent(String(elementsConfigId)))\n          .replace(`{${'user_id'}}`, encodeURIComponent(String(userId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        elementsUserRoleCreate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Creates a new user inside the Permit.io system, from that point forward you may run permission checks on that user.  If the user is already created: will return 200 instead of 201, and will return the existing user object in the response body.\n     * @summary Create user\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {ElementsUserCreate} elementsUserCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    elementsCreateUser: async (\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      elementsUserCreate: ElementsUserCreate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('elementsCreateUser', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('elementsCreateUser', 'envId', envId);\n      // verify required parameter 'elementsConfigId' is not null or undefined\n      assertParamExists('elementsCreateUser', 'elementsConfigId', elementsConfigId);\n      // verify required parameter 'elementsUserCreate' is not null or undefined\n      assertParamExists('elementsCreateUser', 'elementsUserCreate', elementsUserCreate);\n      const localVarPath = `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/users`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'elements_config_id'}}`, encodeURIComponent(String(elementsConfigId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        elementsUserCreate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Delete user\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    elementsDeleteUser: async (\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      userId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('elementsDeleteUser', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('elementsDeleteUser', 'envId', envId);\n      // verify required parameter 'elementsConfigId' is not null or undefined\n      assertParamExists('elementsDeleteUser', 'elementsConfigId', elementsConfigId);\n      // verify required parameter 'userId' is not null or undefined\n      assertParamExists('elementsDeleteUser', 'userId', userId);\n      const localVarPath =\n        `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/users/{user_id}`\n          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n          .replace(`{${'elements_config_id'}}`, encodeURIComponent(String(elementsConfigId)))\n          .replace(`{${'user_id'}}`, encodeURIComponent(String(userId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Lists all the users defined within an environment.\n     * @summary List roles\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [search] Text search for the email field\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    elementsListRoles: async (\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      search?: string,\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('elementsListRoles', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('elementsListRoles', 'envId', envId);\n      // verify required parameter 'elementsConfigId' is not null or undefined\n      assertParamExists('elementsListRoles', 'elementsConfigId', elementsConfigId);\n      const localVarPath = `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/roles`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'elements_config_id'}}`, encodeURIComponent(String(elementsConfigId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Lists all the users defined within an environment.\n     * @summary List users\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [search] Text search for the email field\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    elementsListUsers: async (\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      search?: string,\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('elementsListUsers', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('elementsListUsers', 'envId', envId);\n      // verify required parameter 'elementsConfigId' is not null or undefined\n      assertParamExists('elementsListUsers', 'elementsConfigId', elementsConfigId);\n      const localVarPath = `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/users`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'elements_config_id'}}`, encodeURIComponent(String(elementsConfigId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Unassigns the role from the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.\n     * @summary Unassign role from user\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {ElementsUserRoleRemove} elementsUserRoleRemove\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    elementsUnassignRoleFromUser: async (\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      userId: string,\n      elementsUserRoleRemove: ElementsUserRoleRemove,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('elementsUnassignRoleFromUser', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('elementsUnassignRoleFromUser', 'envId', envId);\n      // verify required parameter 'elementsConfigId' is not null or undefined\n      assertParamExists('elementsUnassignRoleFromUser', 'elementsConfigId', elementsConfigId);\n      // verify required parameter 'userId' is not null or undefined\n      assertParamExists('elementsUnassignRoleFromUser', 'userId', userId);\n      // verify required parameter 'elementsUserRoleRemove' is not null or undefined\n      assertParamExists(\n        'elementsUnassignRoleFromUser',\n        'elementsUserRoleRemove',\n        elementsUserRoleRemove,\n      );\n      const localVarPath =\n        `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/users/{user_id}/roles`\n          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n          .replace(`{${'elements_config_id'}}`, encodeURIComponent(String(elementsConfigId)))\n          .replace(`{${'user_id'}}`, encodeURIComponent(String(userId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        elementsUserRoleRemove,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Updates the embed_config.\n     * @summary Set Config Active\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    setConfigActive: async (\n      elementsConfigId: string,\n      projId: string,\n      envId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'elementsConfigId' is not null or undefined\n      assertParamExists('setConfigActive', 'elementsConfigId', elementsConfigId);\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('setConfigActive', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('setConfigActive', 'envId', envId);\n      const localVarPath = `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/active`\n        .replace(`{${'elements_config_id'}}`, encodeURIComponent(String(elementsConfigId)))\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * UsersElementsDataApi - functional programming interface\n * @export\n */\nexport const UsersElementsDataApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = UsersElementsDataApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * Assigns a role to the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.\n     * @summary Assign role to user\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {ElementsUserRoleCreate} elementsUserRoleCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async elementsAssignRoleToUser(\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      userId: string,\n      elementsUserRoleCreate: ElementsUserRoleCreate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleAssignmentRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.elementsAssignRoleToUser(\n        projId,\n        envId,\n        elementsConfigId,\n        userId,\n        elementsUserRoleCreate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Creates a new user inside the Permit.io system, from that point forward you may run permission checks on that user.  If the user is already created: will return 200 instead of 201, and will return the existing user object in the response body.\n     * @summary Create user\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {ElementsUserCreate} elementsUserCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async elementsCreateUser(\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      elementsUserCreate: ElementsUserCreate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.elementsCreateUser(\n        projId,\n        envId,\n        elementsConfigId,\n        elementsUserCreate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Delete user\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async elementsDeleteUser(\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      userId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.elementsDeleteUser(\n        projId,\n        envId,\n        elementsConfigId,\n        userId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Lists all the users defined within an environment.\n     * @summary List roles\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [search] Text search for the email field\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async elementsListRoles(\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      search?: string,\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ElementsRoleRead>>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.elementsListRoles(\n        projId,\n        envId,\n        elementsConfigId,\n        search,\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Lists all the users defined within an environment.\n     * @summary List users\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [search] Text search for the email field\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async elementsListUsers(\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      search?: string,\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResultUserRead>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.elementsListUsers(\n        projId,\n        envId,\n        elementsConfigId,\n        search,\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Unassigns the role from the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.\n     * @summary Unassign role from user\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {ElementsUserRoleRemove} elementsUserRoleRemove\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async elementsUnassignRoleFromUser(\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      userId: string,\n      elementsUserRoleRemove: ElementsUserRoleRemove,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.elementsUnassignRoleFromUser(\n        projId,\n        envId,\n        elementsConfigId,\n        userId,\n        elementsUserRoleRemove,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Updates the embed_config.\n     * @summary Set Config Active\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async setConfigActive(\n      elementsConfigId: string,\n      projId: string,\n      envId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.setConfigActive(\n        elementsConfigId,\n        projId,\n        envId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * UsersElementsDataApi - factory interface\n * @export\n */\nexport const UsersElementsDataApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = UsersElementsDataApiFp(configuration);\n  return {\n    /**\n     * Assigns a role to the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.\n     * @summary Assign role to user\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {ElementsUserRoleCreate} elementsUserRoleCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    elementsAssignRoleToUser(\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      userId: string,\n      elementsUserRoleCreate: ElementsUserRoleCreate,\n      options?: any,\n    ): AxiosPromise<RoleAssignmentRead> {\n      return localVarFp\n        .elementsAssignRoleToUser(\n          projId,\n          envId,\n          elementsConfigId,\n          userId,\n          elementsUserRoleCreate,\n          options,\n        )\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Creates a new user inside the Permit.io system, from that point forward you may run permission checks on that user.  If the user is already created: will return 200 instead of 201, and will return the existing user object in the response body.\n     * @summary Create user\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {ElementsUserCreate} elementsUserCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    elementsCreateUser(\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      elementsUserCreate: ElementsUserCreate,\n      options?: any,\n    ): AxiosPromise<UserRead> {\n      return localVarFp\n        .elementsCreateUser(projId, envId, elementsConfigId, elementsUserCreate, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Delete user\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    elementsDeleteUser(\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      userId: string,\n      options?: any,\n    ): AxiosPromise<void> {\n      return localVarFp\n        .elementsDeleteUser(projId, envId, elementsConfigId, userId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Lists all the users defined within an environment.\n     * @summary List roles\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [search] Text search for the email field\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    elementsListRoles(\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      search?: string,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<Array<ElementsRoleRead>> {\n      return localVarFp\n        .elementsListRoles(projId, envId, elementsConfigId, search, page, perPage, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Lists all the users defined within an environment.\n     * @summary List users\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [search] Text search for the email field\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    elementsListUsers(\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      search?: string,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<PaginatedResultUserRead> {\n      return localVarFp\n        .elementsListUsers(projId, envId, elementsConfigId, search, page, perPage, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Unassigns the role from the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.\n     * @summary Unassign role from user\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {ElementsUserRoleRemove} elementsUserRoleRemove\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    elementsUnassignRoleFromUser(\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      userId: string,\n      elementsUserRoleRemove: ElementsUserRoleRemove,\n      options?: any,\n    ): AxiosPromise<void> {\n      return localVarFp\n        .elementsUnassignRoleFromUser(\n          projId,\n          envId,\n          elementsConfigId,\n          userId,\n          elementsUserRoleRemove,\n          options,\n        )\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Updates the embed_config.\n     * @summary Set Config Active\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    setConfigActive(\n      elementsConfigId: string,\n      projId: string,\n      envId: string,\n      options?: any,\n    ): AxiosPromise<void> {\n      return localVarFp\n        .setConfigActive(elementsConfigId, projId, envId, options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for elementsAssignRoleToUser operation in UsersElementsDataApi.\n * @export\n * @interface UsersElementsDataApiElementsAssignRoleToUserRequest\n */\nexport interface UsersElementsDataApiElementsAssignRoleToUserRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsAssignRoleToUser\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsAssignRoleToUser\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsAssignRoleToUser\n   */\n  readonly elementsConfigId: string;\n\n  /**\n   * Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsAssignRoleToUser\n   */\n  readonly userId: string;\n\n  /**\n   *\n   * @type {ElementsUserRoleCreate}\n   * @memberof UsersElementsDataApiElementsAssignRoleToUser\n   */\n  readonly elementsUserRoleCreate: ElementsUserRoleCreate;\n}\n\n/**\n * Request parameters for elementsCreateUser operation in UsersElementsDataApi.\n * @export\n * @interface UsersElementsDataApiElementsCreateUserRequest\n */\nexport interface UsersElementsDataApiElementsCreateUserRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsCreateUser\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsCreateUser\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsCreateUser\n   */\n  readonly elementsConfigId: string;\n\n  /**\n   *\n   * @type {ElementsUserCreate}\n   * @memberof UsersElementsDataApiElementsCreateUser\n   */\n  readonly elementsUserCreate: ElementsUserCreate;\n}\n\n/**\n * Request parameters for elementsDeleteUser operation in UsersElementsDataApi.\n * @export\n * @interface UsersElementsDataApiElementsDeleteUserRequest\n */\nexport interface UsersElementsDataApiElementsDeleteUserRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsDeleteUser\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsDeleteUser\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsDeleteUser\n   */\n  readonly elementsConfigId: string;\n\n  /**\n   * Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsDeleteUser\n   */\n  readonly userId: string;\n}\n\n/**\n * Request parameters for elementsListRoles operation in UsersElementsDataApi.\n * @export\n * @interface UsersElementsDataApiElementsListRolesRequest\n */\nexport interface UsersElementsDataApiElementsListRolesRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsListRoles\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsListRoles\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsListRoles\n   */\n  readonly elementsConfigId: string;\n\n  /**\n   * Text search for the email field\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsListRoles\n   */\n  readonly search?: string;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof UsersElementsDataApiElementsListRoles\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof UsersElementsDataApiElementsListRoles\n   */\n  readonly perPage?: number;\n}\n\n/**\n * Request parameters for elementsListUsers operation in UsersElementsDataApi.\n * @export\n * @interface UsersElementsDataApiElementsListUsersRequest\n */\nexport interface UsersElementsDataApiElementsListUsersRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsListUsers\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsListUsers\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsListUsers\n   */\n  readonly elementsConfigId: string;\n\n  /**\n   * Text search for the email field\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsListUsers\n   */\n  readonly search?: string;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof UsersElementsDataApiElementsListUsers\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof UsersElementsDataApiElementsListUsers\n   */\n  readonly perPage?: number;\n}\n\n/**\n * Request parameters for elementsUnassignRoleFromUser operation in UsersElementsDataApi.\n * @export\n * @interface UsersElementsDataApiElementsUnassignRoleFromUserRequest\n */\nexport interface UsersElementsDataApiElementsUnassignRoleFromUserRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsUnassignRoleFromUser\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsUnassignRoleFromUser\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsUnassignRoleFromUser\n   */\n  readonly elementsConfigId: string;\n\n  /**\n   * Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsUnassignRoleFromUser\n   */\n  readonly userId: string;\n\n  /**\n   *\n   * @type {ElementsUserRoleRemove}\n   * @memberof UsersElementsDataApiElementsUnassignRoleFromUser\n   */\n  readonly elementsUserRoleRemove: ElementsUserRoleRemove;\n}\n\n/**\n * Request parameters for setConfigActive operation in UsersElementsDataApi.\n * @export\n * @interface UsersElementsDataApiSetConfigActiveRequest\n */\nexport interface UsersElementsDataApiSetConfigActiveRequest {\n  /**\n   * Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiSetConfigActive\n   */\n  readonly elementsConfigId: string;\n\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiSetConfigActive\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiSetConfigActive\n   */\n  readonly envId: string;\n}\n\n/**\n * UsersElementsDataApi - object-oriented interface\n * @export\n * @class UsersElementsDataApi\n * @extends {BaseAPI}\n */\nexport class UsersElementsDataApi extends BaseAPI {\n  /**\n   * Assigns a role to the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.\n   * @summary Assign role to user\n   * @param {UsersElementsDataApiElementsAssignRoleToUserRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof UsersElementsDataApi\n   */\n  public elementsAssignRoleToUser(\n    requestParameters: UsersElementsDataApiElementsAssignRoleToUserRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return UsersElementsDataApiFp(this.configuration)\n      .elementsAssignRoleToUser(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.elementsConfigId,\n        requestParameters.userId,\n        requestParameters.elementsUserRoleCreate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Creates a new user inside the Permit.io system, from that point forward you may run permission checks on that user.  If the user is already created: will return 200 instead of 201, and will return the existing user object in the response body.\n   * @summary Create user\n   * @param {UsersElementsDataApiElementsCreateUserRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof UsersElementsDataApi\n   */\n  public elementsCreateUser(\n    requestParameters: UsersElementsDataApiElementsCreateUserRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return UsersElementsDataApiFp(this.configuration)\n      .elementsCreateUser(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.elementsConfigId,\n        requestParameters.elementsUserCreate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Delete user\n   * @param {UsersElementsDataApiElementsDeleteUserRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof UsersElementsDataApi\n   */\n  public elementsDeleteUser(\n    requestParameters: UsersElementsDataApiElementsDeleteUserRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return UsersElementsDataApiFp(this.configuration)\n      .elementsDeleteUser(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.elementsConfigId,\n        requestParameters.userId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Lists all the users defined within an environment.\n   * @summary List roles\n   * @param {UsersElementsDataApiElementsListRolesRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof UsersElementsDataApi\n   */\n  public elementsListRoles(\n    requestParameters: UsersElementsDataApiElementsListRolesRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return UsersElementsDataApiFp(this.configuration)\n      .elementsListRoles(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.elementsConfigId,\n        requestParameters.search,\n        requestParameters.page,\n        requestParameters.perPage,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Lists all the users defined within an environment.\n   * @summary List users\n   * @param {UsersElementsDataApiElementsListUsersRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof UsersElementsDataApi\n   */\n  public elementsListUsers(\n    requestParameters: UsersElementsDataApiElementsListUsersRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return UsersElementsDataApiFp(this.configuration)\n      .elementsListUsers(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.elementsConfigId,\n        requestParameters.search,\n        requestParameters.page,\n        requestParameters.perPage,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Unassigns the role from the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.\n   * @summary Unassign role from user\n   * @param {UsersElementsDataApiElementsUnassignRoleFromUserRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof UsersElementsDataApi\n   */\n  public elementsUnassignRoleFromUser(\n    requestParameters: UsersElementsDataApiElementsUnassignRoleFromUserRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return UsersElementsDataApiFp(this.configuration)\n      .elementsUnassignRoleFromUser(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.elementsConfigId,\n        requestParameters.userId,\n        requestParameters.elementsUserRoleRemove,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Updates the embed_config.\n   * @summary Set Config Active\n   * @param {UsersElementsDataApiSetConfigActiveRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof UsersElementsDataApi\n   */\n  public setConfigActive(\n    requestParameters: UsersElementsDataApiSetConfigActiveRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return UsersElementsDataApiFp(this.configuration)\n      .setConfigActive(\n        requestParameters.elementsConfigId,\n        requestParameters.projId,\n        requestParameters.envId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface ConfigurationParameters {\n  apiKey?:\n    | string\n    | Promise<string>\n    | ((name: string) => string)\n    | ((name: string) => Promise<string>);\n  username?: string;\n  password?: string;\n  accessToken?:\n    | string\n    | Promise<string>\n    | ((name?: string, scopes?: string[]) => string)\n    | ((name?: string, scopes?: string[]) => Promise<string>);\n  basePath?: string;\n  baseOptions?: any;\n  formDataCtor?: new () => any;\n}\n\nexport class Configuration {\n  /**\n   * parameter for apiKey security\n   * @param name security name\n   * @memberof Configuration\n   */\n  apiKey?:\n    | string\n    | Promise<string>\n    | ((name: string) => string)\n    | ((name: string) => Promise<string>);\n  /**\n   * parameter for basic security\n   *\n   * @type {string}\n   * @memberof Configuration\n   */\n  username?: string;\n  /**\n   * parameter for basic security\n   *\n   * @type {string}\n   * @memberof Configuration\n   */\n  password?: string;\n  /**\n   * parameter for oauth2 security\n   * @param name security name\n   * @param scopes oauth2 scope\n   * @memberof Configuration\n   */\n  accessToken?:\n    | string\n    | Promise<string>\n    | ((name?: string, scopes?: string[]) => string)\n    | ((name?: string, scopes?: string[]) => Promise<string>);\n  /**\n   * override base path\n   *\n   * @type {string}\n   * @memberof Configuration\n   */\n  basePath?: string;\n  /**\n   * base options for axios calls\n   *\n   * @type {any}\n   * @memberof Configuration\n   */\n  baseOptions?: any;\n  /**\n   * The FormData constructor that will be used to create multipart form data\n   * requests. You can inject this here so that execution environments that\n   * do not support the FormData class can still run the generated client.\n   *\n   * @type {new () => FormData}\n   */\n  formDataCtor?: new () => any;\n\n  constructor(param: ConfigurationParameters = {}) {\n    this.apiKey = param.apiKey;\n    this.username = param.username;\n    this.password = param.password;\n    this.accessToken = param.accessToken;\n    this.basePath = param.basePath;\n    this.baseOptions = param.baseOptions;\n    this.formDataCtor = param.formDataCtor;\n  }\n\n  /**\n   * Check if the given MIME is a JSON MIME.\n   * JSON MIME examples:\n   *   application/json\n   *   application/json; charset=UTF8\n   *   APPLICATION/JSON\n   *   application/vnd.company+json\n   * @param mime - MIME (Multipurpose Internet Mail Extensions)\n   * @return True if the given MIME is JSON, false otherwise.\n   */\n  public isJsonMime(mime: string): boolean {\n    const jsonMime: RegExp = new RegExp(\n      '^(application/json|[^;/ \\t]+/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$',\n      'i',\n    );\n    return (\n      mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json')\n    );\n  }\n}\n","import axios, { AxiosError, AxiosResponse } from 'axios';\nimport { Logger } from 'pino';\n\nimport { FactsSyncTimeoutPolicy, IPermitConfig } from '../config';\nimport { APIKeysApi, Configuration } from '../openapi';\nimport { BASE_PATH } from '../openapi/base';\n\nimport { API_ACCESS_LEVELS, ApiContextLevel, ApiKeyLevel, PermitContextError } from './context';\n\ninterface FormattedAxiosError<T> {\n  code?: string;\n  message: string;\n  error?: T;\n  status?: number;\n}\nexport class PermitApiError<T> extends Error {\n  constructor(message: string, public originalError: AxiosError<T>) {\n    super(message);\n  }\n\n  public get formattedAxiosError(): FormattedAxiosError<T> {\n    return {\n      code: this.originalError.code,\n      message: this.message,\n      error: this.originalError.response?.data,\n      status: this.originalError.status,\n    };\n  }\n\n  public get request(): any {\n    return this.originalError.request;\n  }\n\n  public get response(): AxiosResponse<T> | undefined {\n    return this.originalError.response;\n  }\n}\n\nexport interface IPagination {\n  /**\n   * the page number to fetch (default: 1)\n   */\n  page?: number;\n  /**\n   * how many items to fetch per page (default: 100)\n   */\n  perPage?: number;\n}\n\nexport interface IBasePaginationExtended {\n  /**\n   * the page number to fetch (default: 1)\n   */\n  page?: number;\n  /**\n   * how many items to fetch per page (default: 100)\n   */\n  perPage?: number;\n  /**\n   * the total number of items\n   */\n  includeTotalCount?: boolean;\n}\n\ntype IPaginationForceIncludeTotal = IBasePaginationExtended & { includeTotalCount: true };\nexport type IPaginationExtended = IBasePaginationExtended | IPaginationForceIncludeTotal;\n\nexport type ReturnPaginationType<\n  T extends IPaginationExtended,\n  Y,\n  Z,\n> = T extends IPaginationForceIncludeTotal ? Y : Z;\n\nexport abstract class BasePermitApi {\n  protected openapiClientConfig: Configuration;\n  private scopeApi: APIKeysApi;\n\n  constructor(protected config: IPermitConfig, protected logger: Logger) {\n    const version = process.env.npm_package_version ?? 'unknown';\n    this.openapiClientConfig = new Configuration({\n      basePath: `${this.config.apiUrl}`,\n      accessToken: this.config.token,\n      baseOptions: {\n        headers: {\n          'X-Permit-SDK-Version': `node:${version}`,\n        },\n      },\n    });\n    this.scopeApi = new APIKeysApi(this.openapiClientConfig, BASE_PATH, this.config.axiosInstance);\n  }\n\n  /**\n   * Sets the API context and permitted access level based on the API key scope.\n   */\n  private async setContextFromApiKey(): Promise<void> {\n    try {\n      this.logger.debug('Fetching api key scope');\n      const response = await this.scopeApi.getApiKeyScope();\n\n      if (response.data.organization_id !== undefined && response.data.organization_id !== null) {\n        this.config.apiContext._saveApiKeyAccessibleScope(\n          response.data.organization_id,\n          response.data.project_id,\n          response.data.environment_id,\n        );\n\n        if (response.data.project_id !== undefined && response.data.project_id !== null) {\n          if (response.data.environment_id !== undefined && response.data.environment_id !== null) {\n            // set environment level context\n            this.logger.debug(`setting: environment-level api context`);\n            this.config.apiContext.setEnvironmentLevelContext(\n              response.data.organization_id,\n              response.data.project_id,\n              response.data.environment_id,\n            );\n            return;\n          }\n\n          // set project level context\n          this.logger.debug(`setting: project-level api context`);\n          this.config.apiContext.setProjectLevelContext(\n            response.data.organization_id,\n            response.data.project_id,\n          );\n          return;\n        }\n\n        // set org level context\n        this.logger.debug(`setting: organization-level api context`);\n        this.config.apiContext.setOrganizationLevelContext(response.data.organization_id);\n        return;\n      }\n\n      throw new PermitContextError('could not set api context level');\n    } catch (err) {\n      if (axios.isAxiosError(err)) {\n        this.logger.error(\n          `[${err?.response?.status}] permit.api.getApiKeyScope(), err: ${JSON.stringify(\n            err?.response?.data,\n          )}`,\n        );\n      }\n      throw new PermitContextError(\n        'could not fetch the api key scope in order to set the api context level',\n      );\n    }\n  }\n\n  /**\n   * Ensure that the API Key has the necessary permissions to successfully call the API endpoint.\n   * Note that this check is not foolproof, and the API may still throw 401.\n   * @param requiredAccessLevel The required API Key Access level for the endpoint.\n   * @throws PermitContextError If the currently set API key access level does not match the required access level.\n   */\n  public async ensureAccessLevel(requiredAccessLevel: ApiKeyLevel): Promise<void> {\n    // should only happen once in the lifetime of the SDK\n    if (\n      this.config.apiContext.contextLevel === ApiContextLevel.WAIT_FOR_INIT ||\n      this.config.apiContext.permittedAccessLevel === ApiKeyLevel.WAIT_FOR_INIT\n    ) {\n      await this.setContextFromApiKey();\n    }\n\n    if (requiredAccessLevel !== this.config.apiContext.permittedAccessLevel) {\n      if (\n        API_ACCESS_LEVELS.indexOf(requiredAccessLevel) <\n        API_ACCESS_LEVELS.indexOf(this.config.apiContext.permittedAccessLevel)\n      ) {\n        throw new PermitContextError(\n          `You're trying to use an SDK method that requires an API Key with access level: ${requiredAccessLevel}, ` +\n            `however the SDK is running with an API key with level ${this.config.apiContext.permittedAccessLevel}.`,\n        );\n      }\n    }\n  }\n\n  /**\n   * Ensure that the API context matches the required endpoint context.\n   * @param requiredContext The required API context level for the endpoint.\n   * @throws PermitContextError If the currently set API context level does not match the required context level.\n   */\n  public async ensureContext(requiredContext: ApiContextLevel): Promise<void> {\n    // should only happen once in the lifetime of the SDK\n    if (\n      this.config.apiContext.contextLevel === ApiContextLevel.WAIT_FOR_INIT ||\n      this.config.apiContext.permittedAccessLevel === ApiKeyLevel.WAIT_FOR_INIT\n    ) {\n      await this.setContextFromApiKey();\n    }\n\n    if (\n      this.config.apiContext.contextLevel < requiredContext ||\n      this.config.apiContext.contextLevel === ApiContextLevel.WAIT_FOR_INIT\n    ) {\n      throw new PermitContextError(\n        `You're trying to use an SDK method that requires an API context of ${ApiContextLevel[requiredContext]}, ` +\n          `however the SDK is running in a less specific context level: ${\n            ApiContextLevel[this.config.apiContext.contextLevel]\n          }.`,\n      );\n    }\n  }\n\n  protected handleApiError(err: unknown): never {\n    if (axios.isAxiosError(err)) {\n      // this is an http response with an error status code\n      const logMessage = `Got error status code: ${err.response?.status}, err: ${JSON.stringify(\n        err?.response?.data,\n      )}`;\n      const apiMessage = err.response?.data.message;\n      // log this to the SDK logger\n      this.logger.error(logMessage);\n      // and throw a permit error exception\n      throw new PermitApiError(apiMessage, err);\n    } else {\n      // unexpected error, just throw\n      throw err;\n    }\n  }\n}\n\nexport interface IWaitForSync {\n  /**\n   * Wait for the facts to be synchronized with the PDP. Available only when `proxyFactsViaPdp` is set to `true`.\n   * @param timeout - The maximum number of seconds to wait for the synchronization to complete.\n   * Set to null to wait indefinitely.\n   * @param policy - Controls what happens when the timeout is reached during synchronization.\n   * - 'ignore': Respond immediately when data update did not apply within the timeout period\n   * - 'fail': Respond with 424 status code when data update did not apply within the timeout period\n   */\n  waitForSync(timeout: number | null, policy?: FactsSyncTimeoutPolicy): this;\n}\n\nexport abstract class BaseFactsPermitAPI extends BasePermitApi implements IWaitForSync {\n  constructor(protected config: IPermitConfig, protected logger: Logger) {\n    super(config, logger);\n    if (config.proxyFactsViaPdp) {\n      this.openapiClientConfig = new Configuration({\n        basePath: `${this.config.pdp}`,\n        accessToken: this.config.token,\n        baseOptions: {\n          headers: {\n            ...this.openapiClientConfig.baseOptions.headers,\n            ...(this.config.factsSyncTimeout !== null && {\n              'X-Wait-Timeout': this.config.factsSyncTimeout.toString(),\n            }),\n            ...(this.config.factsSyncTimeoutPolicy && {\n              'X-Timeout-Policy': this.config.factsSyncTimeoutPolicy,\n            }),\n          },\n        },\n      });\n    }\n  }\n\n  protected clone(): this {\n    return new (this.constructor as any)(this.config, this.logger);\n  }\n\n  public waitForSync(timeout: number | null, policy?: FactsSyncTimeoutPolicy): this {\n    if (this.config.proxyFactsViaPdp) {\n      const clone = this.clone();\n      clone.openapiClientConfig.baseOptions.headers['X-Wait-Timeout'] =\n        timeout === null ? '' : timeout.toString();\n\n      const timeoutPolicy = policy || this.config.factsSyncTimeoutPolicy;\n      if (timeoutPolicy) {\n        clone.openapiClientConfig.baseOptions.headers['X-Timeout-Policy'] = timeoutPolicy;\n      }\n\n      return clone;\n    } else {\n      this.logger.warn(\n        \"Attempted to wait for sync, but 'proxyFactsViaPdp' is not enabled. Ignoring.\",\n      );\n      return this;\n    }\n  }\n}\n","/**\n * The `ApiKeyLevel` enum represents the access level of a Permit API Key.\n */\nexport enum ApiKeyLevel {\n  /**\n   * Wait for initialization of the API key.\n   */\n  WAIT_FOR_INIT = 'WAIT_FOR_INIT',\n\n  /**\n   * Organization level API key authorization.\n   * Using an API key of this scope will allow the SDK user to modify\n   * all projects and environments under the organization / workspace.\n   */\n  ORGANIZATION_LEVEL_API_KEY = 'ORGANIZATION_LEVEL_API_KEY',\n\n  /**\n   * Project level API key authorization.\n   * Using an API key of this scope will allow the SDK user to modify\n   * a single project and the environments under that project.\n   */\n  PROJECT_LEVEL_API_KEY = 'PROJECT_LEVEL_API_KEY',\n\n  /**\n   * Environment level API key authorization.\n   * Using an API key of this scope will allow the SDK user to modify\n   * a single Permit environment.\n   */\n  ENVIRONMENT_LEVEL_API_KEY = 'ENVIRONMENT_LEVEL_API_KEY',\n}\n\nexport const API_ACCESS_LEVELS: ApiKeyLevel[] = [\n  ApiKeyLevel.ORGANIZATION_LEVEL_API_KEY,\n  ApiKeyLevel.PROJECT_LEVEL_API_KEY,\n  ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY,\n];\n\nexport enum ApiContextLevel {\n  /**\n   * Signifies that the context is not set yet.\n   */\n  WAIT_FOR_INIT = 0,\n\n  /**\n   * When running in this context level, the SDK knows the current organization.\n   */\n  ORGANIZATION = 1,\n\n  /**\n   * When running in this context level, the SDK knows the current organization and project.\n   */\n  PROJECT = 2,\n\n  /**\n   * When running in this context level, the SDK knows the current organization, project and environment.\n   */\n  ENVIRONMENT = 3,\n}\n\n/**\n * The `PermitContextError` class represents an error that occurs when an API method\n * is called with insufficient context (not knowing in what environment, project or\n * organization the API call is being made).\n * Some of the input for the API method is provided via the SDK context.\n * If the context is missing some data required for a method - the API call will fail.\n */\nexport class PermitContextError extends Error {\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * The `PermitContextChangeError` will be thrown when the user is trying to set the\n * SDK context to an object that the current API Key cannot access (and if allowed,\n * such API calls will result in 401). Instead, the SDK throws this exception.\n */\nexport class PermitContextChangeError extends Error {\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * The `ApiContext` class represents the required known context for an API method.\n * Since the Permit API hierarchy is deeply nested, it is less convenient to specify\n * the full object hierarchy in every request.\n * For example, in order to list roles, the user needs to specify the (id or key) of the:\n * - the org\n * - the project\n * - then environment\n * in which the roles are located under.\n * Instead, the SDK can \"remember\" the current context and \"auto-complete\" the details\n * from that context.\n * We then get this kind of experience:\n * ```\n * await permit.api.roles.list()\n * ```\n * We can only run this function if the current context already knows the org, project,\n * and environments that we want to run under, and that is why this method assumes\n * we are running under a `ApiContextLevel.ENVIRONMENT` context.\n */\nexport class ApiContext {\n  private _level: ApiKeyLevel;\n  // org, project and environment the API Key is allowed to access\n  private _permittedOrganization: string | null;\n  private _permittedProject: string | null;\n  private _permittedEnvironment: string | null;\n\n  // current known context\n  private _contextLevel: ApiContextLevel;\n  private _organization: string | null;\n  private _project: string | null;\n  private _environment: string | null;\n\n  constructor() {\n    this._level = ApiKeyLevel.WAIT_FOR_INIT;\n    this._permittedOrganization = null;\n    this._permittedProject = null;\n    this._permittedEnvironment = null;\n\n    this._contextLevel = ApiContextLevel.WAIT_FOR_INIT;\n    this._organization = null;\n    this._project = null;\n    this._environment = null;\n  }\n\n  /**\n   * Do not call this method directly!\n   */\n  public _saveApiKeyAccessibleScope(org: string, project?: string, environment?: string): void {\n    this._permittedOrganization = org; // cannot be null\n\n    if (project && environment) {\n      this._permittedProject = project;\n      this._permittedEnvironment = environment;\n      this._level = ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY;\n    } else if (project) {\n      this._permittedProject = project;\n      this._permittedEnvironment = null;\n      this._level = ApiKeyLevel.PROJECT_LEVEL_API_KEY;\n    } else {\n      this._permittedProject = null;\n      this._permittedEnvironment = null;\n      this._level = ApiKeyLevel.ORGANIZATION_LEVEL_API_KEY;\n    }\n  }\n\n  /**\n   * Get the current API key access level.\n   */\n  public get permittedAccessLevel(): ApiKeyLevel {\n    return this._level;\n  }\n\n  /**\n   * Get the current API key level.\n   * @deprecated replaced with permit.config.apiContext.permittedAccessLevel\n   */\n  public get level(): ApiKeyLevel {\n    return this._level;\n  }\n\n  /**\n   * Get the current SDK context level.\n   */\n  public get contextLevel(): ApiContextLevel {\n    return this._contextLevel;\n  }\n\n  /**\n   * Get the current organization in the context.\n   */\n  public get organization(): string | null {\n    return this._organization;\n  }\n\n  /**\n   * Get the current project in the context.\n   */\n  public get project(): string | null {\n    return this._project;\n  }\n\n  /**\n   * Get the current environment in the context.\n   */\n  public get environment(): string | null {\n    return this._environment;\n  }\n\n  private verifyCanAccessOrg(org: string): void {\n    if (org !== this._permittedOrganization) {\n      throw new PermitContextChangeError(\n        `You cannot set an SDK context with org '${org}' due to insufficient API Key permissions`,\n      );\n    }\n  }\n\n  private verifyCanAccessProject(org: string, project: string): void {\n    this.verifyCanAccessOrg(org);\n    if (this._permittedProject !== null && project !== this._permittedProject) {\n      throw new PermitContextChangeError(\n        `You cannot set an SDK context with project '${project}' due to insufficient API Key permissions`,\n      );\n    }\n  }\n\n  private verifyCanAccessEnvironment(org: string, project: string, environment: string): void {\n    this.verifyCanAccessProject(org, project);\n    if (this._permittedEnvironment !== null && environment !== this._permittedEnvironment) {\n      throw new PermitContextChangeError(\n        `You cannot set an SDK context with environment '${environment}' due to insufficient API Key permissions`,\n      );\n    }\n  }\n\n  /**\n   * Set the context to organization level.\n   * @param org The organization key.\n   */\n  public setOrganizationLevelContext(org: string) {\n    this.verifyCanAccessOrg(org);\n    this._contextLevel = ApiContextLevel.ORGANIZATION;\n    this._organization = org;\n    this._project = null;\n    this._environment = null;\n  }\n\n  /**\n   * Set the context to project level.\n   * @param org The organization key.\n   * @param project The project key.\n   */\n  public setProjectLevelContext(org: string, project: string) {\n    this.verifyCanAccessProject(org, project);\n    this._contextLevel = ApiContextLevel.PROJECT;\n    this._organization = org;\n    this._project = project;\n    this._environment = null;\n  }\n\n  /**\n   * Set the context to environment level.\n   * @param org The organization key.\n   * @param project The project key.\n   * @param environment The environment key.\n   */\n  public setEnvironmentLevelContext(org: string, project: string, environment: string) {\n    this.verifyCanAccessEnvironment(org, project, environment);\n    this._contextLevel = ApiContextLevel.ENVIRONMENT;\n    this._organization = org;\n    this._project = project;\n    this._environment = environment;\n  }\n\n  /**\n   * Get the API project and environment parameters from an environment-level context.\n   * @returns An object containing the project and environment IDs.\n   * @throws {@link PermitContextError} If the API context is not set to environment level or the project or environment is null.\n   */\n  public get environmentContext(): { projId: string; envId: string } {\n    if (\n      this._contextLevel !== ApiContextLevel.ENVIRONMENT ||\n      this._project === null ||\n      this._environment === null\n    ) {\n      throw new PermitContextError(\n        `You cannot get environment context, current api context is: ${\n          ApiContextLevel[this._contextLevel]\n        }`,\n      );\n    }\n    return {\n      projId: this._project,\n      envId: this._environment,\n    };\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,4BAAAA;AAAA;AAAA;;;ACcA,IAAAC,gBAA6E;;;ACG7E,mBAA6E;AAEtE,IAAM,YAAY,mBAAmB,QAAQ,QAAQ,EAAE;AA4BvD,IAAM,UAAN,MAAc;AAAA,EAGnB,YACE,eACU,WAAmB,WACnBC,SAAuB,aAAAC,SACjC;AAFU;AACA,iBAAAD;AAEV,QAAI,eAAe;AACjB,WAAK,gBAAgB;AACrB,WAAK,WAAW,cAAc,YAAY,KAAK;AAAA,IACjD;AAAA,EACF;AACF;AAQO,IAAM,gBAAN,cAA4B,MAAM;AAAA,EAEvC,YAAmB,OAAe,KAAc;AAC9C,UAAM,GAAG;AADQ;AADnB,gBAAwB;AAAA,EAGxB;AACF;;;ACnDO,IAAM,iBAAiB;AAOvB,IAAM,oBAAoB,SAC/B,cACA,WACA,YACA;AACA,MAAI,eAAe,QAAQ,eAAe,QAAW;AACnD,UAAM,IAAI;AAAA,MACR;AAAA,MACA,sBAAsB,SAAS,uCAAuC,YAAY;AAAA,IACpF;AAAA,EACF;AACF;AAkCO,IAAM,wBAAwB,eAAgB,QAAa,eAA+B;AAC/F,MAAI,iBAAiB,cAAc,aAAa;AAC9C,UAAM,cACJ,OAAO,cAAc,gBAAgB,aACjC,MAAM,cAAc,YAAY,IAChC,MAAM,cAAc;AAC1B,WAAO,eAAe,IAAI,YAAY;AAAA,EACxC;AACF;AAqBA,SAAS,wBACP,iBACA,WACA,MAAc,IACR;AACN,MAAI,OAAO,cAAc,UAAU;AACjC,QAAI,MAAM,QAAQ,SAAS,GAAG;AAC5B,MAAC,UAAoB,QAAQ,CAAC,SAAS,wBAAwB,iBAAiB,MAAM,GAAG,CAAC;AAAA,IAC5F,OAAO;AACL,aAAO,KAAK,SAAS,EAAE;AAAA,QAAQ,CAAC,eAC9B;AAAA,UACE;AAAA,UACA,UAAU,UAAU;AAAA,UACpB,GAAG,GAAG,GAAG,QAAQ,KAAK,MAAM,EAAE,GAAG,UAAU;AAAA,QAC7C;AAAA,MACF;AAAA,IACF;AAAA,EACF,OAAO;AACL,QAAI,gBAAgB,IAAI,GAAG,GAAG;AAC5B,sBAAgB,OAAO,KAAK,SAAS;AAAA,IACvC,OAAO;AACL,sBAAgB,IAAI,KAAK,SAAS;AAAA,IACpC;AAAA,EACF;AACF;AAMO,IAAM,kBAAkB,SAAU,QAAa,SAAgB;AACpE,QAAM,eAAe,IAAI,gBAAgB,IAAI,MAAM;AACnD,0BAAwB,cAAc,OAAO;AAC7C,MAAI,SAAS,aAAa,SAAS;AACrC;AAMO,IAAM,wBAAwB,SACnC,OACA,gBACA,eACA;AACA,QAAM,YAAY,OAAO,UAAU;AACnC,QAAM,qBACJ,aAAa,iBAAiB,cAAc,aACxC,cAAc,WAAW,eAAe,QAAQ,cAAc,CAAC,IAC/D;AACN,SAAO,qBAAqB,KAAK,UAAU,UAAU,SAAY,QAAQ,CAAC,CAAC,IAAI,SAAS;AAC1F;AAMO,IAAM,eAAe,SAAU,KAAU;AAC9C,SAAO,IAAI,WAAW,IAAI,SAAS,IAAI;AACzC;AAMO,IAAM,wBAAwB,SACnC,WACAE,eACAC,YACA,eACA;AACA,SAAO,CACLC,SAAuBF,eACvB,WAAmBC,eAChB;AACH,UAAM,mBAAmB;AAAA,MACvB,GAAG,UAAU;AAAA,MACb,OAAM,+CAAe,aAAY,YAAY,UAAU;AAAA,IACzD;AACA,WAAOC,OAAM,QAAc,gBAAgB;AAAA,EAC7C;AACF;;;AFxIO,IAAM,8BAA8B,SAAU,eAA+B;AAClF,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQL,cAAc,OACZ,cACA,UAA8B,CAAC,MACN;AAEzB,wBAAkB,gBAAgB,gBAAgB,YAAY;AAC9D,YAAM,eAAe;AAErB,YAAM,iBAAiB,IAAI,IAAI,cAAc,cAAc;AAC3D,UAAI;AACJ,UAAI,eAAe;AACjB,sBAAc,cAAc;AAAA,MAC9B;AAEA,YAAM,yBAAyB,EAAE,QAAQ,QAAQ,GAAG,aAAa,GAAG,QAAQ;AAC5E,YAAM,0BAA0B,CAAC;AACjC,YAAM,yBAAyB,CAAC;AAIhC,YAAM,sBAAsB,yBAAyB,aAAa;AAElE,8BAAwB,cAAc,IAAI;AAE1C,sBAAgB,gBAAgB,sBAAsB;AACtD,UAAI,yBAAyB,eAAe,YAAY,UAAU,YAAY,UAAU,CAAC;AACzF,6BAAuB,UAAU;AAAA,QAC/B,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG,QAAQ;AAAA,MACb;AACA,6BAAuB,OAAO;AAAA,QAC5B;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAEA,aAAO;AAAA,QACL,KAAK,aAAa,cAAc;AAAA,QAChC,SAAS;AAAA,MACX;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,cAAc,OACZ,UACA,UAA8B,CAAC,MACN;AAEzB,wBAAkB,gBAAgB,YAAY,QAAQ;AACtD,YAAM,eAAe,2BAA2B;AAAA,QAC9C,IAAI,YAAY;AAAA,QAChB,mBAAmB,OAAO,QAAQ,CAAC;AAAA,MACrC;AAEA,YAAM,iBAAiB,IAAI,IAAI,cAAc,cAAc;AAC3D,UAAI;AACJ,UAAI,eAAe;AACjB,sBAAc,cAAc;AAAA,MAC9B;AAEA,YAAM,yBAAyB,EAAE,QAAQ,UAAU,GAAG,aAAa,GAAG,QAAQ;AAC9E,YAAM,0BAA0B,CAAC;AACjC,YAAM,yBAAyB,CAAC;AAIhC,YAAM,sBAAsB,yBAAyB,aAAa;AAElE,sBAAgB,gBAAgB,sBAAsB;AACtD,UAAI,yBAAyB,eAAe,YAAY,UAAU,YAAY,UAAU,CAAC;AACzF,6BAAuB,UAAU;AAAA,QAC/B,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG,QAAQ;AAAA,MACb;AAEA,aAAO;AAAA,QACL,KAAK,aAAa,cAAc;AAAA,QAChC,SAAS;AAAA,MACX;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,WAAW,OAAO,UAAkB,UAA8B,CAAC,MAA4B;AAE7F,wBAAkB,aAAa,YAAY,QAAQ;AACnD,YAAM,eAAe,2BAA2B;AAAA,QAC9C,IAAI,YAAY;AAAA,QAChB,mBAAmB,OAAO,QAAQ,CAAC;AAAA,MACrC;AAEA,YAAM,iBAAiB,IAAI,IAAI,cAAc,cAAc;AAC3D,UAAI;AACJ,UAAI,eAAe;AACjB,sBAAc,cAAc;AAAA,MAC9B;AAEA,YAAM,yBAAyB,EAAE,QAAQ,OAAO,GAAG,aAAa,GAAG,QAAQ;AAC3E,YAAM,0BAA0B,CAAC;AACjC,YAAM,yBAAyB,CAAC;AAIhC,YAAM,sBAAsB,yBAAyB,aAAa;AAElE,sBAAgB,gBAAgB,sBAAsB;AACtD,UAAI,yBAAyB,eAAe,YAAY,UAAU,YAAY,UAAU,CAAC;AACzF,6BAAuB,UAAU;AAAA,QAC/B,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG,QAAQ;AAAA,MACb;AAEA,aAAO;AAAA,QACL,KAAK,aAAa,cAAc;AAAA,QAChC,SAAS;AAAA,MACX;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,gBAAgB,OAAO,UAA8B,CAAC,MAA4B;AAChF,YAAM,eAAe;AAErB,YAAM,iBAAiB,IAAI,IAAI,cAAc,cAAc;AAC3D,UAAI;AACJ,UAAI,eAAe;AACjB,sBAAc,cAAc;AAAA,MAC9B;AAEA,YAAM,yBAAyB,EAAE,QAAQ,OAAO,GAAG,aAAa,GAAG,QAAQ;AAC3E,YAAM,0BAA0B,CAAC;AACjC,YAAM,yBAAyB,CAAC;AAIhC,YAAM,sBAAsB,yBAAyB,aAAa;AAElE,sBAAgB,gBAAgB,sBAAsB;AACtD,UAAI,yBAAyB,eAAe,YAAY,UAAU,YAAY,UAAU,CAAC;AACzF,6BAAuB,UAAU;AAAA,QAC/B,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG,QAAQ;AAAA,MACb;AAEA,aAAO;AAAA,QACL,KAAK,aAAa,cAAc;AAAA,QAChC,SAAS;AAAA,MACX;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,sBAAsB,OACpB,QACA,OACA,UAA8B,CAAC,MACN;AAEzB,wBAAkB,wBAAwB,UAAU,MAAM;AAE1D,wBAAkB,wBAAwB,SAAS,KAAK;AACxD,YAAM,eAAe,iCAClB,QAAQ,IAAI,SAAS,KAAK,mBAAmB,OAAO,MAAM,CAAC,CAAC,EAC5D,QAAQ,IAAI,QAAQ,KAAK,mBAAmB,OAAO,KAAK,CAAC,CAAC;AAE7D,YAAM,iBAAiB,IAAI,IAAI,cAAc,cAAc;AAC3D,UAAI;AACJ,UAAI,eAAe;AACjB,sBAAc,cAAc;AAAA,MAC9B;AAEA,YAAM,yBAAyB,EAAE,QAAQ,OAAO,GAAG,aAAa,GAAG,QAAQ;AAC3E,YAAM,0BAA0B,CAAC;AACjC,YAAM,yBAAyB,CAAC;AAIhC,YAAM,sBAAsB,yBAAyB,aAAa;AAElE,sBAAgB,gBAAgB,sBAAsB;AACtD,UAAI,yBAAyB,eAAe,YAAY,UAAU,YAAY,UAAU,CAAC;AACzF,6BAAuB,UAAU;AAAA,QAC/B,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG,QAAQ;AAAA,MACb;AAEA,aAAO;AAAA,QACL,KAAK,aAAa,cAAc;AAAA,QAChC,SAAS;AAAA,MACX;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUA,aAAa,OACX,YACA,MACA,SACA,UAA8B,CAAC,MACN;AACzB,YAAM,eAAe;AAErB,YAAM,iBAAiB,IAAI,IAAI,cAAc,cAAc;AAC3D,UAAI;AACJ,UAAI,eAAe;AACjB,sBAAc,cAAc;AAAA,MAC9B;AAEA,YAAM,yBAAyB,EAAE,QAAQ,OAAO,GAAG,aAAa,GAAG,QAAQ;AAC3E,YAAM,0BAA0B,CAAC;AACjC,YAAM,yBAAyB,CAAC;AAIhC,YAAM,sBAAsB,yBAAyB,aAAa;AAElE,UAAI,eAAe,QAAW;AAC5B,+BAAuB,aAAa,IAAI;AAAA,MAC1C;AAEA,UAAI,SAAS,QAAW;AACtB,+BAAuB,MAAM,IAAI;AAAA,MACnC;AAEA,UAAI,YAAY,QAAW;AACzB,+BAAuB,UAAU,IAAI;AAAA,MACvC;AAEA,sBAAgB,gBAAgB,sBAAsB;AACtD,UAAI,yBAAyB,eAAe,YAAY,UAAU,YAAY,UAAU,CAAC;AACzF,6BAAuB,UAAU;AAAA,QAC/B,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG,QAAQ;AAAA,MACb;AAEA,aAAO;AAAA,QACL,KAAK,aAAa,cAAc;AAAA,QAChC,SAAS;AAAA,MACX;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,cAAc,OACZ,UACA,UAA8B,CAAC,MACN;AAEzB,wBAAkB,gBAAgB,YAAY,QAAQ;AACtD,YAAM,eAAe,yCAAyC;AAAA,QAC5D,IAAI,YAAY;AAAA,QAChB,mBAAmB,OAAO,QAAQ,CAAC;AAAA,MACrC;AAEA,YAAM,iBAAiB,IAAI,IAAI,cAAc,cAAc;AAC3D,UAAI;AACJ,UAAI,eAAe;AACjB,sBAAc,cAAc;AAAA,MAC9B;AAEA,YAAM,yBAAyB,EAAE,QAAQ,QAAQ,GAAG,aAAa,GAAG,QAAQ;AAC5E,YAAM,0BAA0B,CAAC;AACjC,YAAM,yBAAyB,CAAC;AAIhC,YAAM,sBAAsB,yBAAyB,aAAa;AAElE,sBAAgB,gBAAgB,sBAAsB;AACtD,UAAI,yBAAyB,eAAe,YAAY,UAAU,YAAY,UAAU,CAAC;AACzF,6BAAuB,UAAU;AAAA,QAC/B,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG,QAAQ;AAAA,MACb;AAEA,aAAO;AAAA,QACL,KAAK,aAAa,cAAc;AAAA,QAChC,SAAS;AAAA,MACX;AAAA,IACF;AAAA,EACF;AACF;AAMO,IAAM,eAAe,SAAU,eAA+B;AACnE,QAAM,4BAA4B,4BAA4B,aAAa;AAC3E,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQL,MAAM,aACJ,cACA,SACiF;AACjF,YAAM,oBAAoB,MAAM,0BAA0B,aAAa,cAAc,OAAO;AAC5F,aAAO,sBAAsB,mBAAmB,cAAAC,SAAa,WAAW,aAAa;AAAA,IACvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,MAAM,aACJ,UACA,SAC2E;AAC3E,YAAM,oBAAoB,MAAM,0BAA0B,aAAa,UAAU,OAAO;AACxF,aAAO,sBAAsB,mBAAmB,cAAAA,SAAa,WAAW,aAAa;AAAA,IACvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,MAAM,UACJ,UACA,SACiF;AACjF,YAAM,oBAAoB,MAAM,0BAA0B,UAAU,UAAU,OAAO;AACrF,aAAO,sBAAsB,mBAAmB,cAAAA,SAAa,WAAW,aAAa;AAAA,IACvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,MAAM,eACJ,SACsF;AACtF,YAAM,oBAAoB,MAAM,0BAA0B,eAAe,OAAO;AAChF,aAAO,sBAAsB,mBAAmB,cAAAA,SAAa,WAAW,aAAa;AAAA,IACvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,MAAM,qBACJ,QACA,OACA,SACiF;AACjF,YAAM,oBAAoB,MAAM,0BAA0B;AAAA,QACxD;AAAA,QACA;AAAA,QACA;AAAA,MACF;AACA,aAAO,sBAAsB,mBAAmB,cAAAA,SAAa,WAAW,aAAa;AAAA,IACvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUA,MAAM,YACJ,YACA,MACA,SACA,SAGA;AACA,YAAM,oBAAoB,MAAM,0BAA0B;AAAA,QACxD;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AACA,aAAO,sBAAsB,mBAAmB,cAAAA,SAAa,WAAW,aAAa;AAAA,IACvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,MAAM,aACJ,UACA,SACiF;AACjF,YAAM,oBAAoB,MAAM,0BAA0B,aAAa,UAAU,OAAO;AACxF,aAAO,sBAAsB,mBAAmB,cAAAA,SAAa,WAAW,aAAa;AAAA,IACvF;AAAA,EACF;AACF;AAkNO,IAAM,aAAN,cAAyB,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAS/B,aACL,mBACA,SACA;AACA,WAAO,aAAa,KAAK,aAAa,EACnC,aAAa,kBAAkB,cAAc,OAAO,EACpD,KAAK,CAAC,YAAY,QAAQ,KAAK,OAAO,KAAK,QAAQ,CAAC;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUO,aACL,mBACA,SACA;AACA,WAAO,aAAa,KAAK,aAAa,EACnC,aAAa,kBAAkB,UAAU,OAAO,EAChD,KAAK,CAAC,YAAY,QAAQ,KAAK,OAAO,KAAK,QAAQ,CAAC;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUO,UAAU,mBAA+C,SAA8B;AAC5F,WAAO,aAAa,KAAK,aAAa,EACnC,UAAU,kBAAkB,UAAU,OAAO,EAC7C,KAAK,CAAC,YAAY,QAAQ,KAAK,OAAO,KAAK,QAAQ,CAAC;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASO,eAAe,SAA8B;AAClD,WAAO,aAAa,KAAK,aAAa,EACnC,eAAe,OAAO,EACtB,KAAK,CAAC,YAAY,QAAQ,KAAK,OAAO,KAAK,QAAQ,CAAC;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUO,qBACL,mBACA,SACA;AACA,WAAO,aAAa,KAAK,aAAa,EACnC,qBAAqB,kBAAkB,QAAQ,kBAAkB,OAAO,OAAO,EAC/E,KAAK,CAAC,YAAY,QAAQ,KAAK,OAAO,KAAK,QAAQ,CAAC;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUO,YACL,oBAAkD,CAAC,GACnD,SACA;AACA,WAAO,aAAa,KAAK,aAAa,EACnC;AAAA,MACC,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB;AAAA,IACF,EACC,KAAK,CAAC,YAAY,QAAQ,KAAK,OAAO,KAAK,QAAQ,CAAC;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUO,aACL,mBACA,SACA;AACA,WAAO,aAAa,KAAK,aAAa,EACnC,aAAa,kBAAkB,UAAU,OAAO,EAChD,KAAK,CAAC,YAAY,QAAQ,KAAK,OAAO,KAAK,QAAQ,CAAC;AAAA,EACzD;AACF;;;AGxyBA,IAAAC,gBAA6E;;;ACA7E,IAAAC,gBAA6E;;;ACA7E,IAAAC,gBAA6E;;;ACA7E,IAAAC,gBAA6E;;;ACA7E,IAAAC,gBAA6E;;;ACA7E,IAAAC,gBAA6E;;;ACA7E,IAAAC,gBAA6E;;;ACA7E,IAAAC,iBAA6E;;;ACA7E,IAAAC,iBAA6E;;;ACA7E,IAAAC,iBAA6E;;;ACA7E,IAAAC,iBAA6E;;;ACA7E,IAAAC,iBAA6E;;;ACA7E,IAAAC,iBAA6E;;;ACA7E,IAAAC,iBAA6E;;;ACA7E,IAAAC,iBAA6E;;;ACA7E,IAAAC,iBAA6E;;;ACA7E,IAAAC,iBAA6E;;;ACA7E,IAAAC,iBAA6E;;;ACA7E,IAAAC,iBAA6E;;;ACA7E,IAAAC,iBAA6E;;;ACA7E,IAAAC,iBAA6E;;;ACA7E,IAAAC,iBAA6E;;;ACA7E,IAAAC,iBAA6E;;;ACA7E,IAAAC,iBAA6E;;;ACA7E,IAAAC,iBAA6E;;;ACA7E,IAAAC,iBAA6E;;;ACA7E,IAAAC,iBAA6E;;;ACA7E,IAAAC,iBAA6E;;;ACA7E,IAAAC,iBAA6E;AAwCtE,IAAM,sCAAsC,SAAU,eAA+B;AAC1F,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUL,YAAY,OACV,QACA,OACA,sBACA,UAA8B,CAAC,MACN;AAEzB,wBAAkB,cAAc,UAAU,MAAM;AAEhD,wBAAkB,cAAc,SAAS,KAAK;AAE9C,wBAAkB,cAAc,wBAAwB,oBAAoB;AAC5E,YAAM,eAAe,gDAClB,QAAQ,IAAI,SAAS,KAAK,mBAAmB,OAAO,MAAM,CAAC,CAAC,EAC5D,QAAQ,IAAI,QAAQ,KAAK,mBAAmB,OAAO,KAAK,CAAC,CAAC;AAE7D,YAAM,iBAAiB,IAAI,IAAI,cAAc,cAAc;AAC3D,UAAI;AACJ,UAAI,eAAe;AACjB,sBAAc,cAAc;AAAA,MAC9B;AAEA,YAAM,yBAAyB,EAAE,QAAQ,QAAQ,GAAG,aAAa,GAAG,QAAQ;AAC5E,YAAM,0BAA0B,CAAC;AACjC,YAAM,yBAAyB,CAAC;AAIhC,YAAM,sBAAsB,yBAAyB,aAAa;AAElE,8BAAwB,cAAc,IAAI;AAE1C,sBAAgB,gBAAgB,sBAAsB;AACtD,UAAI,yBAAyB,eAAe,YAAY,UAAU,YAAY,UAAU,CAAC;AACzF,6BAAuB,UAAU;AAAA,QAC/B,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG,QAAQ;AAAA,MACb;AACA,6BAAuB,OAAO;AAAA,QAC5B;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAEA,aAAO;AAAA,QACL,KAAK,aAAa,cAAc;AAAA,QAChC,SAAS;AAAA,MACX;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUA,gBAAgB,OACd,QACA,OACA,sBACA,UAA8B,CAAC,MACN;AAEzB,wBAAkB,kBAAkB,UAAU,MAAM;AAEpD,wBAAkB,kBAAkB,SAAS,KAAK;AAElD,wBAAkB,kBAAkB,wBAAwB,oBAAoB;AAChF,YAAM,eAAe,qDAClB,QAAQ,IAAI,SAAS,KAAK,mBAAmB,OAAO,MAAM,CAAC,CAAC,EAC5D,QAAQ,IAAI,QAAQ,KAAK,mBAAmB,OAAO,KAAK,CAAC,CAAC;AAE7D,YAAM,iBAAiB,IAAI,IAAI,cAAc,cAAc;AAC3D,UAAI;AACJ,UAAI,eAAe;AACjB,sBAAc,cAAc;AAAA,MAC9B;AAEA,YAAM,yBAAyB,EAAE,QAAQ,QAAQ,GAAG,aAAa,GAAG,QAAQ;AAC5E,YAAM,0BAA0B,CAAC;AACjC,YAAM,yBAAyB,CAAC;AAIhC,YAAM,sBAAsB,yBAAyB,aAAa;AAElE,8BAAwB,cAAc,IAAI;AAE1C,sBAAgB,gBAAgB,sBAAsB;AACtD,UAAI,yBAAyB,eAAe,YAAY,UAAU,YAAY,UAAU,CAAC;AACzF,6BAAuB,UAAU;AAAA,QAC/B,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG,QAAQ;AAAA,MACb;AACA,6BAAuB,OAAO;AAAA,QAC5B;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAEA,aAAO;AAAA,QACL,KAAK,aAAa,cAAc;AAAA,QAChC,SAAS;AAAA,MACX;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUA,kBAAkB,OAChB,QACA,OACA,sBACA,UAA8B,CAAC,MACN;AAEzB,wBAAkB,oBAAoB,UAAU,MAAM;AAEtD,wBAAkB,oBAAoB,SAAS,KAAK;AAEpD,wBAAkB,oBAAoB,wBAAwB,oBAAoB;AAClF,YAAM,eAAe,qDAClB,QAAQ,IAAI,SAAS,KAAK,mBAAmB,OAAO,MAAM,CAAC,CAAC,EAC5D,QAAQ,IAAI,QAAQ,KAAK,mBAAmB,OAAO,KAAK,CAAC,CAAC;AAE7D,YAAM,iBAAiB,IAAI,IAAI,cAAc,cAAc;AAC3D,UAAI;AACJ,UAAI,eAAe;AACjB,sBAAc,cAAc;AAAA,MAC9B;AAEA,YAAM,yBAAyB,EAAE,QAAQ,UAAU,GAAG,aAAa,GAAG,QAAQ;AAC9E,YAAM,0BAA0B,CAAC;AACjC,YAAM,yBAAyB,CAAC;AAIhC,YAAM,sBAAsB,yBAAyB,aAAa;AAElE,8BAAwB,cAAc,IAAI;AAE1C,sBAAgB,gBAAgB,sBAAsB;AACtD,UAAI,yBAAyB,eAAe,YAAY,UAAU,YAAY,UAAU,CAAC;AACzF,6BAAuB,UAAU;AAAA,QAC/B,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG,QAAQ;AAAA,MACb;AACA,6BAAuB,OAAO;AAAA,QAC5B;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAEA,aAAO;AAAA,QACL,KAAK,aAAa,cAAc;AAAA,QAChC,SAAS;AAAA,MACX;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAkBA,qBAAqB,OACnB,QACA,OACA,MACA,MACA,QACA,UACA,kBACA,UACA,mBACA,MACA,SACA,UAA8B,CAAC,MACN;AAEzB,wBAAkB,uBAAuB,UAAU,MAAM;AAEzD,wBAAkB,uBAAuB,SAAS,KAAK;AACvD,YAAM,eAAe,gDAClB,QAAQ,IAAI,SAAS,KAAK,mBAAmB,OAAO,MAAM,CAAC,CAAC,EAC5D,QAAQ,IAAI,QAAQ,KAAK,mBAAmB,OAAO,KAAK,CAAC,CAAC;AAE7D,YAAM,iBAAiB,IAAI,IAAI,cAAc,cAAc;AAC3D,UAAI;AACJ,UAAI,eAAe;AACjB,sBAAc,cAAc;AAAA,MAC9B;AAEA,YAAM,yBAAyB,EAAE,QAAQ,OAAO,GAAG,aAAa,GAAG,QAAQ;AAC3E,YAAM,0BAA0B,CAAC;AACjC,YAAM,yBAAyB,CAAC;AAIhC,YAAM,sBAAsB,yBAAyB,aAAa;AAElE,UAAI,SAAS,QAAW;AACtB,+BAAuB,MAAM,IAAI;AAAA,MACnC;AAEA,UAAI,SAAS,QAAW;AACtB,+BAAuB,MAAM,IAAI;AAAA,MACnC;AAEA,UAAI,WAAW,QAAW;AACxB,+BAAuB,QAAQ,IAAI;AAAA,MACrC;AAEA,UAAI,aAAa,QAAW;AAC1B,+BAAuB,UAAU,IAAI;AAAA,MACvC;AAEA,UAAI,qBAAqB,QAAW;AAClC,+BAAuB,mBAAmB,IAAI;AAAA,MAChD;AAEA,UAAI,aAAa,QAAW;AAC1B,+BAAuB,UAAU,IAAI;AAAA,MACvC;AAEA,UAAI,sBAAsB,QAAW;AACnC,+BAAuB,qBAAqB,IAAI;AAAA,MAClD;AAEA,UAAI,SAAS,QAAW;AACtB,+BAAuB,MAAM,IAAI;AAAA,MACnC;AAEA,UAAI,YAAY,QAAW;AACzB,+BAAuB,UAAU,IAAI;AAAA,MACvC;AAEA,sBAAgB,gBAAgB,sBAAsB;AACtD,UAAI,yBAAyB,eAAe,YAAY,UAAU,YAAY,UAAU,CAAC;AACzF,6BAAuB,UAAU;AAAA,QAC/B,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG,QAAQ;AAAA,MACb;AAEA,aAAO;AAAA,QACL,KAAK,aAAa,cAAc;AAAA,QAChC,SAAS;AAAA,MACX;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUA,cAAc,OACZ,QACA,OACA,sBACA,UAA8B,CAAC,MACN;AAEzB,wBAAkB,gBAAgB,UAAU,MAAM;AAElD,wBAAkB,gBAAgB,SAAS,KAAK;AAEhD,wBAAkB,gBAAgB,wBAAwB,oBAAoB;AAC9E,YAAM,eAAe,gDAClB,QAAQ,IAAI,SAAS,KAAK,mBAAmB,OAAO,MAAM,CAAC,CAAC,EAC5D,QAAQ,IAAI,QAAQ,KAAK,mBAAmB,OAAO,KAAK,CAAC,CAAC;AAE7D,YAAM,iBAAiB,IAAI,IAAI,cAAc,cAAc;AAC3D,UAAI;AACJ,UAAI,eAAe;AACjB,sBAAc,cAAc;AAAA,MAC9B;AAEA,YAAM,yBAAyB,EAAE,QAAQ,UAAU,GAAG,aAAa,GAAG,QAAQ;AAC9E,YAAM,0BAA0B,CAAC;AACjC,YAAM,yBAAyB,CAAC;AAIhC,YAAM,sBAAsB,yBAAyB,aAAa;AAElE,8BAAwB,cAAc,IAAI;AAE1C,sBAAgB,gBAAgB,sBAAsB;AACtD,UAAI,yBAAyB,eAAe,YAAY,UAAU,YAAY,UAAU,CAAC;AACzF,6BAAuB,UAAU;AAAA,QAC/B,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG,QAAQ;AAAA,MACb;AACA,6BAAuB,OAAO;AAAA,QAC5B;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAEA,aAAO;AAAA,QACL,KAAK,aAAa,cAAc;AAAA,QAChC,SAAS;AAAA,MACX;AAAA,IACF;AAAA,EACF;AACF;AAMO,IAAM,uBAAuB,SAAU,eAA+B;AAC3E,QAAM,4BAA4B,oCAAoC,aAAa;AACnF,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUL,MAAM,WACJ,QACA,OACA,sBACA,SACyF;AACzF,YAAM,oBAAoB,MAAM,0BAA0B;AAAA,QACxD;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AACA,aAAO,sBAAsB,mBAAmB,eAAAC,SAAa,WAAW,aAAa;AAAA,IACvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUA,MAAM,eACJ,QACA,OACA,sBACA,SAGA;AACA,YAAM,oBAAoB,MAAM,0BAA0B;AAAA,QACxD;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AACA,aAAO,sBAAsB,mBAAmB,eAAAA,SAAa,WAAW,aAAa;AAAA,IACvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUA,MAAM,iBACJ,QACA,OACA,sBACA,SAGA;AACA,YAAM,oBAAoB,MAAM,0BAA0B;AAAA,QACxD;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AACA,aAAO,sBAAsB,mBAAmB,eAAAA,SAAa,WAAW,aAAa;AAAA,IACvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAkBA,MAAM,oBACJ,QACA,OACA,MACA,MACA,QACA,UACA,kBACA,UACA,mBACA,MACA,SACA,SAWA;AACA,YAAM,oBAAoB,MAAM,0BAA0B;AAAA,QACxD;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AACA,aAAO,sBAAsB,mBAAmB,eAAAA,SAAa,WAAW,aAAa;AAAA,IACvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUA,MAAM,aACJ,QACA,OACA,sBACA,SAC2E;AAC3E,YAAM,oBAAoB,MAAM,0BAA0B;AAAA,QACxD;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AACA,aAAO,sBAAsB,mBAAmB,eAAAA,SAAa,WAAW,aAAa;AAAA,IACvF;AAAA,EACF;AACF;AA2VO,IAAM,qBAAN,cAAiC,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASvC,WACL,mBACA,SACA;AACA,WAAO,qBAAqB,KAAK,aAAa,EAC3C;AAAA,MACC,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB;AAAA,IACF,EACC,KAAK,CAAC,YAAY,QAAQ,KAAK,OAAO,KAAK,QAAQ,CAAC;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUO,eACL,mBACA,SACA;AACA,WAAO,qBAAqB,KAAK,aAAa,EAC3C;AAAA,MACC,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB;AAAA,IACF,EACC,KAAK,CAAC,YAAY,QAAQ,KAAK,OAAO,KAAK,QAAQ,CAAC;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUO,iBACL,mBACA,SACA;AACA,WAAO,qBAAqB,KAAK,aAAa,EAC3C;AAAA,MACC,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB;AAAA,IACF,EACC,KAAK,CAAC,YAAY,QAAQ,KAAK,OAAO,KAAK,QAAQ,CAAC;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUO,oBACL,mBACA,SACA;AACA,WAAO,qBAAqB,KAAK,aAAa,EAC3C;AAAA,MACC,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB;AAAA,IACF,EACC,KAAK,CAAC,YAAY,QAAQ,KAAK,OAAO,KAAK,QAAQ,CAAC;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUO,aACL,mBACA,SACA;AACA,WAAO,qBAAqB,KAAK,aAAa,EAC3C;AAAA,MACC,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB;AAAA,IACF,EACC,KAAK,CAAC,YAAY,QAAQ,KAAK,OAAO,KAAK,QAAQ,CAAC;AAAA,EACzD;AACF;;;ACj/BA,IAAAC,iBAA6E;;;ACA7E,IAAAC,iBAA6E;;;ACA7E,IAAAC,iBAA6E;;;ACA7E,IAAAC,iBAA6E;;;ACA7E,IAAAC,iBAA6E;;;ACkBtE,IAAM,gBAAN,MAAoB;AAAA,EA2DzB,YAAY,QAAiC,CAAC,GAAG;AAC/C,SAAK,SAAS,MAAM;AACpB,SAAK,WAAW,MAAM;AACtB,SAAK,WAAW,MAAM;AACtB,SAAK,cAAc,MAAM;AACzB,SAAK,WAAW,MAAM;AACtB,SAAK,cAAc,MAAM;AACzB,SAAK,eAAe,MAAM;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYO,WAAW,MAAuB;AACvC,UAAM,WAAmB,IAAI;AAAA,MAC3B;AAAA,MACA;AAAA,IACF;AACA,WACE,SAAS,SAAS,SAAS,KAAK,IAAI,KAAK,KAAK,YAAY,MAAM;AAAA,EAEpE;AACF;;;ACxHA,IAAAC,iBAAiD;;;AC+B1C,IAAM,oBAAmC;AAAA,EAC9C;AAAA,EACA;AAAA,EACA;AACF;AAEO,IAAK,kBAAL,kBAAKC,qBAAL;AAIL,EAAAA,kCAAA,mBAAgB,KAAhB;AAKA,EAAAA,kCAAA,kBAAe,KAAf;AAKA,EAAAA,kCAAA,aAAU,KAAV;AAKA,EAAAA,kCAAA,iBAAc,KAAd;AAnBU,SAAAA;AAAA,GAAA;AA6BL,IAAM,qBAAN,cAAiC,MAAM;AAAA,EAC5C,YAAY,SAAiB;AAC3B,UAAM,OAAO;AAAA,EACf;AACF;;;ADvDO,IAAM,iBAAN,cAAgC,MAAM;AAAA,EAC3C,YAAY,SAAwB,eAA8B;AAChE,UAAM,OAAO;AADqB;AAAA,EAEpC;AAAA,EAEA,IAAW,sBAA8C;AApB3D;AAqBI,WAAO;AAAA,MACL,MAAM,KAAK,cAAc;AAAA,MACzB,SAAS,KAAK;AAAA,MACd,QAAO,UAAK,cAAc,aAAnB,mBAA6B;AAAA,MACpC,QAAQ,KAAK,cAAc;AAAA,IAC7B;AAAA,EACF;AAAA,EAEA,IAAW,UAAe;AACxB,WAAO,KAAK,cAAc;AAAA,EAC5B;AAAA,EAEA,IAAW,WAAyC;AAClD,WAAO,KAAK,cAAc;AAAA,EAC5B;AACF;AAqCO,IAAe,gBAAf,MAA6B;AAAA,EAIlC,YAAsB,QAAiC,QAAgB;AAAjD;AAAiC;AACrD,UAAM,UAAU,QAAQ,IAAI,uBAAuB;AACnD,SAAK,sBAAsB,IAAI,cAAc;AAAA,MAC3C,UAAU,GAAG,KAAK,OAAO,MAAM;AAAA,MAC/B,aAAa,KAAK,OAAO;AAAA,MACzB,aAAa;AAAA,QACX,SAAS;AAAA,UACP,wBAAwB,QAAQ,OAAO;AAAA,QACzC;AAAA,MACF;AAAA,IACF,CAAC;AACD,SAAK,WAAW,IAAI,WAAW,KAAK,qBAAqB,WAAW,KAAK,OAAO,aAAa;AAAA,EAC/F;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,uBAAsC;AA9FtD;AA+FI,QAAI;AACF,WAAK,OAAO,MAAM,wBAAwB;AAC1C,YAAM,WAAW,MAAM,KAAK,SAAS,eAAe;AAEpD,UAAI,SAAS,KAAK,oBAAoB,UAAa,SAAS,KAAK,oBAAoB,MAAM;AACzF,aAAK,OAAO,WAAW;AAAA,UACrB,SAAS,KAAK;AAAA,UACd,SAAS,KAAK;AAAA,UACd,SAAS,KAAK;AAAA,QAChB;AAEA,YAAI,SAAS,KAAK,eAAe,UAAa,SAAS,KAAK,eAAe,MAAM;AAC/E,cAAI,SAAS,KAAK,mBAAmB,UAAa,SAAS,KAAK,mBAAmB,MAAM;AAEvF,iBAAK,OAAO,MAAM,wCAAwC;AAC1D,iBAAK,OAAO,WAAW;AAAA,cACrB,SAAS,KAAK;AAAA,cACd,SAAS,KAAK;AAAA,cACd,SAAS,KAAK;AAAA,YAChB;AACA;AAAA,UACF;AAGA,eAAK,OAAO,MAAM,oCAAoC;AACtD,eAAK,OAAO,WAAW;AAAA,YACrB,SAAS,KAAK;AAAA,YACd,SAAS,KAAK;AAAA,UAChB;AACA;AAAA,QACF;AAGA,aAAK,OAAO,MAAM,yCAAyC;AAC3D,aAAK,OAAO,WAAW,4BAA4B,SAAS,KAAK,eAAe;AAChF;AAAA,MACF;AAEA,YAAM,IAAI,mBAAmB,iCAAiC;AAAA,IAChE,SAAS,KAAK;AACZ,UAAI,eAAAC,QAAM,aAAa,GAAG,GAAG;AAC3B,aAAK,OAAO;AAAA,UACV,KAAI,gCAAK,aAAL,mBAAe,MAAM,uCAAuC,KAAK;AAAA,aACnE,gCAAK,aAAL,mBAAe;AAAA,UACjB,CAAC;AAAA,QACH;AAAA,MACF;AACA,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAa,kBAAkB,qBAAiD;AAE9E,QACE,KAAK,OAAO,WAAW,0CACvB,KAAK,OAAO,WAAW,8DACvB;AACA,YAAM,KAAK,qBAAqB;AAAA,IAClC;AAEA,QAAI,wBAAwB,KAAK,OAAO,WAAW,sBAAsB;AACvE,UACE,kBAAkB,QAAQ,mBAAmB,IAC7C,kBAAkB,QAAQ,KAAK,OAAO,WAAW,oBAAoB,GACrE;AACA,cAAM,IAAI;AAAA,UACR,kFAAkF,mBAAmB,2DAC1C,KAAK,OAAO,WAAW,oBAAoB;AAAA,QACxG;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAa,cAAc,iBAAiD;AAE1E,QACE,KAAK,OAAO,WAAW,0CACvB,KAAK,OAAO,WAAW,8DACvB;AACA,YAAM,KAAK,qBAAqB;AAAA,IAClC;AAEA,QACE,KAAK,OAAO,WAAW,eAAe,mBACtC,KAAK,OAAO,WAAW,wCACvB;AACA,YAAM,IAAI;AAAA,QACR,sEAAsE,gBAAgB,eAAe,CAAC,kEAElG,gBAAgB,KAAK,OAAO,WAAW,YAAY,CACrD;AAAA,MACJ;AAAA,IACF;AAAA,EACF;AAAA,EAEU,eAAe,KAAqB;AA3MhD;AA4MI,QAAI,eAAAA,QAAM,aAAa,GAAG,GAAG;AAE3B,YAAM,aAAa,2BAA0B,SAAI,aAAJ,mBAAc,MAAM,UAAU,KAAK;AAAA,SAC9E,gCAAK,aAAL,mBAAe;AAAA,MACjB,CAAC;AACD,YAAM,cAAa,SAAI,aAAJ,mBAAc,KAAK;AAEtC,WAAK,OAAO,MAAM,UAAU;AAE5B,YAAM,IAAI,eAAe,YAAY,GAAG;AAAA,IAC1C,OAAO;AAEL,YAAM;AAAA,IACR;AAAA,EACF;AACF;AAcO,IAAe,qBAAf,cAA0C,cAAsC;AAAA,EACrF,YAAsB,QAAiC,QAAgB;AACrE,UAAM,QAAQ,MAAM;AADA;AAAiC;AAErD,QAAI,OAAO,kBAAkB;AAC3B,WAAK,sBAAsB,IAAI,cAAc;AAAA,QAC3C,UAAU,GAAG,KAAK,OAAO,GAAG;AAAA,QAC5B,aAAa,KAAK,OAAO;AAAA,QACzB,aAAa;AAAA,UACX,SAAS;AAAA,YACP,GAAG,KAAK,oBAAoB,YAAY;AAAA,YACxC,GAAI,KAAK,OAAO,qBAAqB,QAAQ;AAAA,cAC3C,kBAAkB,KAAK,OAAO,iBAAiB,SAAS;AAAA,YAC1D;AAAA,YACA,GAAI,KAAK,OAAO,0BAA0B;AAAA,cACxC,oBAAoB,KAAK,OAAO;AAAA,YAClC;AAAA,UACF;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EAEU,QAAc;AACtB,WAAO,IAAK,KAAK,YAAoB,KAAK,QAAQ,KAAK,MAAM;AAAA,EAC/D;AAAA,EAEO,YAAY,SAAwB,QAAuC;AAChF,QAAI,KAAK,OAAO,kBAAkB;AAChC,YAAM,QAAQ,KAAK,MAAM;AACzB,YAAM,oBAAoB,YAAY,QAAQ,gBAAgB,IAC5D,YAAY,OAAO,KAAK,QAAQ,SAAS;AAE3C,YAAM,gBAAgB,UAAU,KAAK,OAAO;AAC5C,UAAI,eAAe;AACjB,cAAM,oBAAoB,YAAY,QAAQ,kBAAkB,IAAI;AAAA,MACtE;AAEA,aAAO;AAAA,IACT,OAAO;AACL,WAAK,OAAO;AAAA,QACV;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAAA,EACF;AACF;;;AvC1IO,IAAMC,sBAAN,cAAiC,mBAAkD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQxF,YAAY,QAAuB,QAAgB;AACjD,UAAM,QAAQ,MAAM;AACpB,SAAK,kBAAkB,IAAI;AAAA,MACzB,KAAK;AAAA,MACL;AAAA,MACA,KAAK,OAAO;AAAA,IACd;AAAA,EACF;AAAA,EAaA,MAAa,KACX,QAMA;AACA,UAAM,KAAK,6EAAuD;AAClE,UAAM,KAAK,iCAAyC;AACpD,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,OAAO;AAAA,MACP,UAAU;AAAA,MACV;AAAA,MACA;AAAA,IACF,IAAI;AACJ,QAAI;AACF,cACE,MAAM,KAAK,gBAAgB,oBAAoB;AAAA,QAC7C,GAAG,KAAK,OAAO,WAAW;AAAA,QAC1B;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF,CAAC,GACD;AAAA,IACJ,SAAS,KAAK;AACZ,WAAK,eAAe,GAAG;AAAA,IACzB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAa,OAAO,YAA+D;AACjF,UAAM,KAAK,6EAAuD;AAClE,UAAM,KAAK,iCAAyC;AACpD,QAAI;AACF,cACE,MAAM,KAAK,gBAAgB,WAAW;AAAA,QACpC,GAAG,KAAK,OAAO,WAAW;AAAA,QAC1B,sBAAsB;AAAA,MACxB,CAAC,GACD;AAAA,IACJ,SAAS,KAAK;AACZ,WAAK,eAAe,GAAG;AAAA,IACzB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAa,SAAS,cAAmD;AACvE,UAAM,KAAK,6EAAuD;AAClE,UAAM,KAAK,iCAAyC;AACpD,QAAI;AACF,cACE,MAAM,KAAK,gBAAgB,aAAa;AAAA,QACtC,GAAG,KAAK,OAAO,WAAW;AAAA,QAC1B,sBAAsB;AAAA,MACxB,CAAC,GACD;AAAA,IACJ,SAAS,KAAK;AACZ,WAAK,eAAe,GAAG;AAAA,IACzB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,MAAa,WAAW,aAAwE;AAC9F,UAAM,KAAK,6EAAuD;AAClE,UAAM,KAAK,iCAAyC;AACpD,QAAI;AACF,cACE,MAAM,KAAK,gBAAgB,eAAe;AAAA,QACxC,GAAG,KAAK,OAAO,WAAW;AAAA,QAC1B,sBAAsB;AAAA,MACxB,CAAC,GACD;AAAA,IACJ,SAAS,KAAK;AACZ,WAAK,eAAe,GAAG;AAAA,IACzB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,MAAa,aACX,eACqC;AACrC,UAAM,KAAK,6EAAuD;AAClE,UAAM,KAAK,iCAAyC;AACpD,QAAI;AACF,cACE,MAAM,KAAK,gBAAgB,iBAAiB;AAAA,QAC1C,GAAG,KAAK,OAAO,WAAW;AAAA,QAC1B,sBAAsB;AAAA,MACxB,CAAC,GACD;AAAA,IACJ,SAAS,KAAK;AACZ,WAAK,eAAe,GAAG;AAAA,IACzB;AAAA,EACF;AACF;","names":["RoleAssignmentsApi","import_axios","axios","globalAxios","globalAxios","BASE_PATH","axios","globalAxios","import_axios","import_axios","import_axios","import_axios","import_axios","import_axios","import_axios","import_axios","import_axios","import_axios","import_axios","import_axios","import_axios","import_axios","import_axios","import_axios","import_axios","import_axios","import_axios","import_axios","import_axios","import_axios","import_axios","import_axios","import_axios","import_axios","import_axios","import_axios","import_axios","globalAxios","import_axios","import_axios","import_axios","import_axios","import_axios","import_axios","ApiContextLevel","axios","RoleAssignmentsApi"]}