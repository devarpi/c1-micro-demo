"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/api/context.ts
var context_exports = {};
__export(context_exports, {
  API_ACCESS_LEVELS: () => API_ACCESS_LEVELS,
  ApiContext: () => ApiContext,
  ApiContextLevel: () => ApiContextLevel,
  ApiKeyLevel: () => ApiKeyLevel,
  PermitContextChangeError: () => PermitContextChangeError,
  PermitContextError: () => PermitContextError
});
module.exports = __toCommonJS(context_exports);
var ApiKeyLevel = /* @__PURE__ */ ((ApiKeyLevel2) => {
  ApiKeyLevel2["WAIT_FOR_INIT"] = "WAIT_FOR_INIT";
  ApiKeyLevel2["ORGANIZATION_LEVEL_API_KEY"] = "ORGANIZATION_LEVEL_API_KEY";
  ApiKeyLevel2["PROJECT_LEVEL_API_KEY"] = "PROJECT_LEVEL_API_KEY";
  ApiKeyLevel2["ENVIRONMENT_LEVEL_API_KEY"] = "ENVIRONMENT_LEVEL_API_KEY";
  return ApiKeyLevel2;
})(ApiKeyLevel || {});
var API_ACCESS_LEVELS = [
  "ORGANIZATION_LEVEL_API_KEY" /* ORGANIZATION_LEVEL_API_KEY */,
  "PROJECT_LEVEL_API_KEY" /* PROJECT_LEVEL_API_KEY */,
  "ENVIRONMENT_LEVEL_API_KEY" /* ENVIRONMENT_LEVEL_API_KEY */
];
var ApiContextLevel = /* @__PURE__ */ ((ApiContextLevel2) => {
  ApiContextLevel2[ApiContextLevel2["WAIT_FOR_INIT"] = 0] = "WAIT_FOR_INIT";
  ApiContextLevel2[ApiContextLevel2["ORGANIZATION"] = 1] = "ORGANIZATION";
  ApiContextLevel2[ApiContextLevel2["PROJECT"] = 2] = "PROJECT";
  ApiContextLevel2[ApiContextLevel2["ENVIRONMENT"] = 3] = "ENVIRONMENT";
  return ApiContextLevel2;
})(ApiContextLevel || {});
var PermitContextError = class extends Error {
  constructor(message) {
    super(message);
  }
};
var PermitContextChangeError = class extends Error {
  constructor(message) {
    super(message);
  }
};
var ApiContext = class {
  constructor() {
    this._level = "WAIT_FOR_INIT" /* WAIT_FOR_INIT */;
    this._permittedOrganization = null;
    this._permittedProject = null;
    this._permittedEnvironment = null;
    this._contextLevel = 0 /* WAIT_FOR_INIT */;
    this._organization = null;
    this._project = null;
    this._environment = null;
  }
  /**
   * Do not call this method directly!
   */
  _saveApiKeyAccessibleScope(org, project, environment) {
    this._permittedOrganization = org;
    if (project && environment) {
      this._permittedProject = project;
      this._permittedEnvironment = environment;
      this._level = "ENVIRONMENT_LEVEL_API_KEY" /* ENVIRONMENT_LEVEL_API_KEY */;
    } else if (project) {
      this._permittedProject = project;
      this._permittedEnvironment = null;
      this._level = "PROJECT_LEVEL_API_KEY" /* PROJECT_LEVEL_API_KEY */;
    } else {
      this._permittedProject = null;
      this._permittedEnvironment = null;
      this._level = "ORGANIZATION_LEVEL_API_KEY" /* ORGANIZATION_LEVEL_API_KEY */;
    }
  }
  /**
   * Get the current API key access level.
   */
  get permittedAccessLevel() {
    return this._level;
  }
  /**
   * Get the current API key level.
   * @deprecated replaced with permit.config.apiContext.permittedAccessLevel
   */
  get level() {
    return this._level;
  }
  /**
   * Get the current SDK context level.
   */
  get contextLevel() {
    return this._contextLevel;
  }
  /**
   * Get the current organization in the context.
   */
  get organization() {
    return this._organization;
  }
  /**
   * Get the current project in the context.
   */
  get project() {
    return this._project;
  }
  /**
   * Get the current environment in the context.
   */
  get environment() {
    return this._environment;
  }
  verifyCanAccessOrg(org) {
    if (org !== this._permittedOrganization) {
      throw new PermitContextChangeError(
        `You cannot set an SDK context with org '${org}' due to insufficient API Key permissions`
      );
    }
  }
  verifyCanAccessProject(org, project) {
    this.verifyCanAccessOrg(org);
    if (this._permittedProject !== null && project !== this._permittedProject) {
      throw new PermitContextChangeError(
        `You cannot set an SDK context with project '${project}' due to insufficient API Key permissions`
      );
    }
  }
  verifyCanAccessEnvironment(org, project, environment) {
    this.verifyCanAccessProject(org, project);
    if (this._permittedEnvironment !== null && environment !== this._permittedEnvironment) {
      throw new PermitContextChangeError(
        `You cannot set an SDK context with environment '${environment}' due to insufficient API Key permissions`
      );
    }
  }
  /**
   * Set the context to organization level.
   * @param org The organization key.
   */
  setOrganizationLevelContext(org) {
    this.verifyCanAccessOrg(org);
    this._contextLevel = 1 /* ORGANIZATION */;
    this._organization = org;
    this._project = null;
    this._environment = null;
  }
  /**
   * Set the context to project level.
   * @param org The organization key.
   * @param project The project key.
   */
  setProjectLevelContext(org, project) {
    this.verifyCanAccessProject(org, project);
    this._contextLevel = 2 /* PROJECT */;
    this._organization = org;
    this._project = project;
    this._environment = null;
  }
  /**
   * Set the context to environment level.
   * @param org The organization key.
   * @param project The project key.
   * @param environment The environment key.
   */
  setEnvironmentLevelContext(org, project, environment) {
    this.verifyCanAccessEnvironment(org, project, environment);
    this._contextLevel = 3 /* ENVIRONMENT */;
    this._organization = org;
    this._project = project;
    this._environment = environment;
  }
  /**
   * Get the API project and environment parameters from an environment-level context.
   * @returns An object containing the project and environment IDs.
   * @throws {@link PermitContextError} If the API context is not set to environment level or the project or environment is null.
   */
  get environmentContext() {
    if (this._contextLevel !== 3 /* ENVIRONMENT */ || this._project === null || this._environment === null) {
      throw new PermitContextError(
        `You cannot get environment context, current api context is: ${ApiContextLevel[this._contextLevel]}`
      );
    }
    return {
      projId: this._project,
      envId: this._environment
    };
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  API_ACCESS_LEVELS,
  ApiContext,
  ApiContextLevel,
  ApiKeyLevel,
  PermitContextChangeError,
  PermitContextError
});
//# sourceMappingURL=context.js.map