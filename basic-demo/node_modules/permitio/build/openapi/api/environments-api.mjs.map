{"version":3,"sources":["../../../src/openapi/api/environments-api.ts","../../../src/openapi/base.ts","../../../src/openapi/common.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { EnvironmentCopy } from '../types';\n// @ts-ignore\nimport { EnvironmentCreate } from '../types';\n// @ts-ignore\nimport { EnvironmentRead } from '../types';\n// @ts-ignore\nimport { EnvironmentStats } from '../types';\n// @ts-ignore\nimport { EnvironmentUpdate } from '../types';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n/**\n * EnvironmentsApi - axios parameter creator\n * @export\n */\nexport const EnvironmentsApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     * Copy environment  This endpoint either duplicates an existing environment to a new environment in the same project, or copies from an existing environment to another existing environment.  The `scope` object controls which objects will be copied to the target environment.  To clone to a new environment, the user must have write permissions to the containing project. To clone into an existing environment, the user must have write permissions to the target environment.  Copying environments across projects or organizations is not allowed.\n     * @summary Copy Environment\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {EnvironmentCopy} environmentCopy\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    copyEnvironment: async (\n      projId: string,\n      envId: string,\n      environmentCopy: EnvironmentCopy,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('copyEnvironment', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('copyEnvironment', 'envId', envId);\n      // verify required parameter 'environmentCopy' is not null or undefined\n      assertParamExists('copyEnvironment', 'environmentCopy', environmentCopy);\n      const localVarPath = `/v2/projects/{proj_id}/envs/{env_id}/copy`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        environmentCopy,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Creates a new environment under a given project.\n     * @summary Create Environment\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {EnvironmentCreate} environmentCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createEnvironment: async (\n      projId: string,\n      environmentCreate: EnvironmentCreate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('createEnvironment', 'projId', projId);\n      // verify required parameter 'environmentCreate' is not null or undefined\n      assertParamExists('createEnvironment', 'environmentCreate', environmentCreate);\n      const localVarPath = `/v2/projects/{proj_id}/envs`.replace(\n        `{${'proj_id'}}`,\n        encodeURIComponent(String(projId)),\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        environmentCreate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Deletes an environment and all its related data.\n     * @summary Delete Environment\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteEnvironment: async (\n      projId: string,\n      envId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('deleteEnvironment', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('deleteEnvironment', 'envId', envId);\n      const localVarPath = `/v2/projects/{proj_id}/envs/{env_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Gets a single environment matching the given env_id, if such environment exists.\n     * @summary Get Environment\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getEnvironment: async (\n      projId: string,\n      envId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getEnvironment', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getEnvironment', 'envId', envId);\n      const localVarPath = `/v2/projects/{proj_id}/envs/{env_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Lists all the environments under a given project.\n     * @summary List Environments\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listEnvironments: async (\n      projId: string,\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('listEnvironments', 'projId', projId);\n      const localVarPath = `/v2/projects/{proj_id}/envs`.replace(\n        `{${'proj_id'}}`,\n        encodeURIComponent(String(projId)),\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Stats Environments\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    statsEnvironments: async (\n      projId: string,\n      envId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('statsEnvironments', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('statsEnvironments', 'envId', envId);\n      const localVarPath = `/v2/projects/{proj_id}/envs/{env_id}/stats`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Updates the environment.\n     * @summary Update Environment\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {EnvironmentUpdate} environmentUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateEnvironment: async (\n      projId: string,\n      envId: string,\n      environmentUpdate: EnvironmentUpdate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('updateEnvironment', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('updateEnvironment', 'envId', envId);\n      // verify required parameter 'environmentUpdate' is not null or undefined\n      assertParamExists('updateEnvironment', 'environmentUpdate', environmentUpdate);\n      const localVarPath = `/v2/projects/{proj_id}/envs/{env_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        environmentUpdate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * EnvironmentsApi - functional programming interface\n * @export\n */\nexport const EnvironmentsApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = EnvironmentsApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * Copy environment  This endpoint either duplicates an existing environment to a new environment in the same project, or copies from an existing environment to another existing environment.  The `scope` object controls which objects will be copied to the target environment.  To clone to a new environment, the user must have write permissions to the containing project. To clone into an existing environment, the user must have write permissions to the target environment.  Copying environments across projects or organizations is not allowed.\n     * @summary Copy Environment\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {EnvironmentCopy} environmentCopy\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async copyEnvironment(\n      projId: string,\n      envId: string,\n      environmentCopy: EnvironmentCopy,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnvironmentRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.copyEnvironment(\n        projId,\n        envId,\n        environmentCopy,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Creates a new environment under a given project.\n     * @summary Create Environment\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {EnvironmentCreate} environmentCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async createEnvironment(\n      projId: string,\n      environmentCreate: EnvironmentCreate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnvironmentRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.createEnvironment(\n        projId,\n        environmentCreate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Deletes an environment and all its related data.\n     * @summary Delete Environment\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async deleteEnvironment(\n      projId: string,\n      envId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEnvironment(\n        projId,\n        envId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Gets a single environment matching the given env_id, if such environment exists.\n     * @summary Get Environment\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getEnvironment(\n      projId: string,\n      envId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnvironmentRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getEnvironment(\n        projId,\n        envId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Lists all the environments under a given project.\n     * @summary List Environments\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async listEnvironments(\n      projId: string,\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EnvironmentRead>>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.listEnvironments(\n        projId,\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Stats Environments\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async statsEnvironments(\n      projId: string,\n      envId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnvironmentStats>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.statsEnvironments(\n        projId,\n        envId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Updates the environment.\n     * @summary Update Environment\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {EnvironmentUpdate} environmentUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async updateEnvironment(\n      projId: string,\n      envId: string,\n      environmentUpdate: EnvironmentUpdate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnvironmentRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.updateEnvironment(\n        projId,\n        envId,\n        environmentUpdate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * EnvironmentsApi - factory interface\n * @export\n */\nexport const EnvironmentsApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = EnvironmentsApiFp(configuration);\n  return {\n    /**\n     * Copy environment  This endpoint either duplicates an existing environment to a new environment in the same project, or copies from an existing environment to another existing environment.  The `scope` object controls which objects will be copied to the target environment.  To clone to a new environment, the user must have write permissions to the containing project. To clone into an existing environment, the user must have write permissions to the target environment.  Copying environments across projects or organizations is not allowed.\n     * @summary Copy Environment\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {EnvironmentCopy} environmentCopy\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    copyEnvironment(\n      projId: string,\n      envId: string,\n      environmentCopy: EnvironmentCopy,\n      options?: any,\n    ): AxiosPromise<EnvironmentRead> {\n      return localVarFp\n        .copyEnvironment(projId, envId, environmentCopy, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Creates a new environment under a given project.\n     * @summary Create Environment\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {EnvironmentCreate} environmentCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createEnvironment(\n      projId: string,\n      environmentCreate: EnvironmentCreate,\n      options?: any,\n    ): AxiosPromise<EnvironmentRead> {\n      return localVarFp\n        .createEnvironment(projId, environmentCreate, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Deletes an environment and all its related data.\n     * @summary Delete Environment\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteEnvironment(projId: string, envId: string, options?: any): AxiosPromise<void> {\n      return localVarFp\n        .deleteEnvironment(projId, envId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Gets a single environment matching the given env_id, if such environment exists.\n     * @summary Get Environment\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getEnvironment(projId: string, envId: string, options?: any): AxiosPromise<EnvironmentRead> {\n      return localVarFp\n        .getEnvironment(projId, envId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Lists all the environments under a given project.\n     * @summary List Environments\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listEnvironments(\n      projId: string,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<Array<EnvironmentRead>> {\n      return localVarFp\n        .listEnvironments(projId, page, perPage, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Stats Environments\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    statsEnvironments(\n      projId: string,\n      envId: string,\n      options?: any,\n    ): AxiosPromise<EnvironmentStats> {\n      return localVarFp\n        .statsEnvironments(projId, envId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Updates the environment.\n     * @summary Update Environment\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {EnvironmentUpdate} environmentUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateEnvironment(\n      projId: string,\n      envId: string,\n      environmentUpdate: EnvironmentUpdate,\n      options?: any,\n    ): AxiosPromise<EnvironmentRead> {\n      return localVarFp\n        .updateEnvironment(projId, envId, environmentUpdate, options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for copyEnvironment operation in EnvironmentsApi.\n * @export\n * @interface EnvironmentsApiCopyEnvironmentRequest\n */\nexport interface EnvironmentsApiCopyEnvironmentRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof EnvironmentsApiCopyEnvironment\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof EnvironmentsApiCopyEnvironment\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {EnvironmentCopy}\n   * @memberof EnvironmentsApiCopyEnvironment\n   */\n  readonly environmentCopy: EnvironmentCopy;\n}\n\n/**\n * Request parameters for createEnvironment operation in EnvironmentsApi.\n * @export\n * @interface EnvironmentsApiCreateEnvironmentRequest\n */\nexport interface EnvironmentsApiCreateEnvironmentRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof EnvironmentsApiCreateEnvironment\n   */\n  readonly projId: string;\n\n  /**\n   *\n   * @type {EnvironmentCreate}\n   * @memberof EnvironmentsApiCreateEnvironment\n   */\n  readonly environmentCreate: EnvironmentCreate;\n}\n\n/**\n * Request parameters for deleteEnvironment operation in EnvironmentsApi.\n * @export\n * @interface EnvironmentsApiDeleteEnvironmentRequest\n */\nexport interface EnvironmentsApiDeleteEnvironmentRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof EnvironmentsApiDeleteEnvironment\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof EnvironmentsApiDeleteEnvironment\n   */\n  readonly envId: string;\n}\n\n/**\n * Request parameters for getEnvironment operation in EnvironmentsApi.\n * @export\n * @interface EnvironmentsApiGetEnvironmentRequest\n */\nexport interface EnvironmentsApiGetEnvironmentRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof EnvironmentsApiGetEnvironment\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof EnvironmentsApiGetEnvironment\n   */\n  readonly envId: string;\n}\n\n/**\n * Request parameters for listEnvironments operation in EnvironmentsApi.\n * @export\n * @interface EnvironmentsApiListEnvironmentsRequest\n */\nexport interface EnvironmentsApiListEnvironmentsRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof EnvironmentsApiListEnvironments\n   */\n  readonly projId: string;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof EnvironmentsApiListEnvironments\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof EnvironmentsApiListEnvironments\n   */\n  readonly perPage?: number;\n}\n\n/**\n * Request parameters for statsEnvironments operation in EnvironmentsApi.\n * @export\n * @interface EnvironmentsApiStatsEnvironmentsRequest\n */\nexport interface EnvironmentsApiStatsEnvironmentsRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof EnvironmentsApiStatsEnvironments\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof EnvironmentsApiStatsEnvironments\n   */\n  readonly envId: string;\n}\n\n/**\n * Request parameters for updateEnvironment operation in EnvironmentsApi.\n * @export\n * @interface EnvironmentsApiUpdateEnvironmentRequest\n */\nexport interface EnvironmentsApiUpdateEnvironmentRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof EnvironmentsApiUpdateEnvironment\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof EnvironmentsApiUpdateEnvironment\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {EnvironmentUpdate}\n   * @memberof EnvironmentsApiUpdateEnvironment\n   */\n  readonly environmentUpdate: EnvironmentUpdate;\n}\n\n/**\n * EnvironmentsApi - object-oriented interface\n * @export\n * @class EnvironmentsApi\n * @extends {BaseAPI}\n */\nexport class EnvironmentsApi extends BaseAPI {\n  /**\n   * Copy environment  This endpoint either duplicates an existing environment to a new environment in the same project, or copies from an existing environment to another existing environment.  The `scope` object controls which objects will be copied to the target environment.  To clone to a new environment, the user must have write permissions to the containing project. To clone into an existing environment, the user must have write permissions to the target environment.  Copying environments across projects or organizations is not allowed.\n   * @summary Copy Environment\n   * @param {EnvironmentsApiCopyEnvironmentRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof EnvironmentsApi\n   */\n  public copyEnvironment(\n    requestParameters: EnvironmentsApiCopyEnvironmentRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return EnvironmentsApiFp(this.configuration)\n      .copyEnvironment(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.environmentCopy,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Creates a new environment under a given project.\n   * @summary Create Environment\n   * @param {EnvironmentsApiCreateEnvironmentRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof EnvironmentsApi\n   */\n  public createEnvironment(\n    requestParameters: EnvironmentsApiCreateEnvironmentRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return EnvironmentsApiFp(this.configuration)\n      .createEnvironment(requestParameters.projId, requestParameters.environmentCreate, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Deletes an environment and all its related data.\n   * @summary Delete Environment\n   * @param {EnvironmentsApiDeleteEnvironmentRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof EnvironmentsApi\n   */\n  public deleteEnvironment(\n    requestParameters: EnvironmentsApiDeleteEnvironmentRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return EnvironmentsApiFp(this.configuration)\n      .deleteEnvironment(requestParameters.projId, requestParameters.envId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Gets a single environment matching the given env_id, if such environment exists.\n   * @summary Get Environment\n   * @param {EnvironmentsApiGetEnvironmentRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof EnvironmentsApi\n   */\n  public getEnvironment(\n    requestParameters: EnvironmentsApiGetEnvironmentRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return EnvironmentsApiFp(this.configuration)\n      .getEnvironment(requestParameters.projId, requestParameters.envId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Lists all the environments under a given project.\n   * @summary List Environments\n   * @param {EnvironmentsApiListEnvironmentsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof EnvironmentsApi\n   */\n  public listEnvironments(\n    requestParameters: EnvironmentsApiListEnvironmentsRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return EnvironmentsApiFp(this.configuration)\n      .listEnvironments(\n        requestParameters.projId,\n        requestParameters.page,\n        requestParameters.perPage,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Stats Environments\n   * @param {EnvironmentsApiStatsEnvironmentsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof EnvironmentsApi\n   */\n  public statsEnvironments(\n    requestParameters: EnvironmentsApiStatsEnvironmentsRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return EnvironmentsApiFp(this.configuration)\n      .statsEnvironments(requestParameters.projId, requestParameters.envId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Updates the environment.\n   * @summary Update Environment\n   * @param {EnvironmentsApiUpdateEnvironmentRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof EnvironmentsApi\n   */\n  public updateEnvironment(\n    requestParameters: EnvironmentsApiUpdateEnvironmentRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return EnvironmentsApiFp(this.configuration)\n      .updateEnvironment(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.environmentUpdate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Configuration } from './configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\n\nexport const BASE_PATH = 'http://localhost'.replace(/\\/+$/, '');\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n  csv: ',',\n  ssv: ' ',\n  tsv: '\\t',\n  pipes: '|',\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n  url: string;\n  options: AxiosRequestConfig;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n  protected configuration: Configuration | undefined;\n\n  constructor(\n    configuration?: Configuration,\n    protected basePath: string = BASE_PATH,\n    protected axios: AxiosInstance = globalAxios,\n  ) {\n    if (configuration) {\n      this.configuration = configuration;\n      this.basePath = configuration.basePath || this.basePath;\n    }\n  }\n}\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n  name: 'RequiredError' = 'RequiredError';\n  constructor(public field: string, msg?: string) {\n    super(msg);\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Configuration } from './configuration';\nimport { RequiredError, RequestArgs } from './base';\nimport { AxiosInstance, AxiosResponse } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com';\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (\n  functionName: string,\n  paramName: string,\n  paramValue: unknown,\n) {\n  if (paramValue === null || paramValue === undefined) {\n    throw new RequiredError(\n      paramName,\n      `Required parameter ${paramName} was null or undefined when calling ${functionName}.`,\n    );\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (\n  object: any,\n  keyParamName: string,\n  configuration?: Configuration,\n) {\n  if (configuration && configuration.apiKey) {\n    const localVarApiKeyValue =\n      typeof configuration.apiKey === 'function'\n        ? await configuration.apiKey(keyParamName)\n        : await configuration.apiKey;\n    object[keyParamName] = localVarApiKeyValue;\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n  if (configuration && (configuration.username || configuration.password)) {\n    object['auth'] = { username: configuration.username, password: configuration.password };\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n  if (configuration && configuration.accessToken) {\n    const accessToken =\n      typeof configuration.accessToken === 'function'\n        ? await configuration.accessToken()\n        : await configuration.accessToken;\n    object['Authorization'] = 'Bearer ' + accessToken;\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (\n  object: any,\n  name: string,\n  scopes: string[],\n  configuration?: Configuration,\n) {\n  if (configuration && configuration.accessToken) {\n    const localVarAccessTokenValue =\n      typeof configuration.accessToken === 'function'\n        ? await configuration.accessToken(name, scopes)\n        : await configuration.accessToken;\n    object['Authorization'] = 'Bearer ' + localVarAccessTokenValue;\n  }\n};\n\nfunction setFlattenedQueryParams(\n  urlSearchParams: URLSearchParams,\n  parameter: any,\n  key: string = '',\n): void {\n  if (typeof parameter === 'object') {\n    if (Array.isArray(parameter)) {\n      (parameter as any[]).forEach((item) => setFlattenedQueryParams(urlSearchParams, item, key));\n    } else {\n      Object.keys(parameter).forEach((currentKey) =>\n        setFlattenedQueryParams(\n          urlSearchParams,\n          parameter[currentKey],\n          `${key}${key !== '' ? '.' : ''}${currentKey}`,\n        ),\n      );\n    }\n  } else {\n    if (urlSearchParams.has(key)) {\n      urlSearchParams.append(key, parameter);\n    } else {\n      urlSearchParams.set(key, parameter);\n    }\n  }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n  const searchParams = new URLSearchParams(url.search);\n  setFlattenedQueryParams(searchParams, objects);\n  url.search = searchParams.toString();\n};\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (\n  value: any,\n  requestOptions: any,\n  configuration?: Configuration,\n) {\n  const nonString = typeof value !== 'string';\n  const needsSerialization =\n    nonString && configuration && configuration.isJsonMime\n      ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n      : nonString;\n  return needsSerialization ? JSON.stringify(value !== undefined ? value : {}) : value || '';\n};\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n  return url.pathname + url.search + url.hash;\n};\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (\n  axiosArgs: RequestArgs,\n  globalAxios: AxiosInstance,\n  BASE_PATH: string,\n  configuration?: Configuration,\n) {\n  return <T = unknown, R = AxiosResponse<T>>(\n    axios: AxiosInstance = globalAxios,\n    basePath: string = BASE_PATH,\n  ) => {\n    const axiosRequestArgs = {\n      ...axiosArgs.options,\n      url: (configuration?.basePath || basePath) + axiosArgs.url,\n    };\n    return axios.request<T, R>(axiosRequestArgs);\n  };\n};\n"],"mappings":"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","names":["globalAxios","globalAxios","BASE_PATH","globalAxios"]}