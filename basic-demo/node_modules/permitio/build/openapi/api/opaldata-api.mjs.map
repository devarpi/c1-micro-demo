{"version":3,"sources":["../../../src/openapi/api/opaldata-api.ts","../../../src/openapi/base.ts","../../../src/openapi/common.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { FullData } from '../types';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n// @ts-ignore\nimport { ResponseGetDataForConditionSetV2InternalOpalDataOrgIdProjIdEnvIdConditionSetsConditionSetIdGet } from '../types';\n// @ts-ignore\nimport { ResponseGetDataForResourceV2InternalOpalDataOrgIdProjIdEnvIdResourceTypesResourceIdGet } from '../types';\n// @ts-ignore\nimport { ResponseGetDataForRoleV2InternalOpalDataOrgIdProjIdEnvIdRolesRoleIdGet } from '../types';\n// @ts-ignore\nimport { ResponseGetDataForTenantV2InternalOpalDataOrgIdProjIdEnvIdTenantsTenantIdGet } from '../types';\n// @ts-ignore\nimport { ResponseGetDataForUserV2InternalOpalDataOrgIdProjIdEnvIdUsersUserIdGet } from '../types';\n/**\n * OPALDataApi - axios parameter creator\n * @export\n */\nexport const OPALDataApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     *\n     * @summary Get All Data\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {boolean} [internalUpdateCache]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getAllData: async (\n      orgId: string,\n      projId: string,\n      envId: string,\n      internalUpdateCache?: boolean,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('getAllData', 'orgId', orgId);\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getAllData', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getAllData', 'envId', envId);\n      const localVarPath = `/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}`\n        .replace(`{${'org_id'}}`, encodeURIComponent(String(orgId)))\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (internalUpdateCache !== undefined) {\n        localVarQueryParameter['__internal_update_cache'] = internalUpdateCache;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get Data For Condition Set\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} conditionSetId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getDataForConditionSet: async (\n      orgId: string,\n      projId: string,\n      envId: string,\n      conditionSetId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('getDataForConditionSet', 'orgId', orgId);\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getDataForConditionSet', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getDataForConditionSet', 'envId', envId);\n      // verify required parameter 'conditionSetId' is not null or undefined\n      assertParamExists('getDataForConditionSet', 'conditionSetId', conditionSetId);\n      const localVarPath =\n        `/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/condition_sets/{condition_set_id}`\n          .replace(`{${'org_id'}}`, encodeURIComponent(String(orgId)))\n          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n          .replace(`{${'condition_set_id'}}`, encodeURIComponent(String(conditionSetId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get Data For Resource\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getDataForResource: async (\n      orgId: string,\n      projId: string,\n      envId: string,\n      resourceId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('getDataForResource', 'orgId', orgId);\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getDataForResource', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getDataForResource', 'envId', envId);\n      // verify required parameter 'resourceId' is not null or undefined\n      assertParamExists('getDataForResource', 'resourceId', resourceId);\n      const localVarPath =\n        `/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/resource_types/{resource_id}`\n          .replace(`{${'org_id'}}`, encodeURIComponent(String(orgId)))\n          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n          .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get Data For Role\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getDataForRole: async (\n      orgId: string,\n      projId: string,\n      envId: string,\n      roleId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('getDataForRole', 'orgId', orgId);\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getDataForRole', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getDataForRole', 'envId', envId);\n      // verify required parameter 'roleId' is not null or undefined\n      assertParamExists('getDataForRole', 'roleId', roleId);\n      const localVarPath = `/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/roles/{role_id}`\n        .replace(`{${'org_id'}}`, encodeURIComponent(String(orgId)))\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * return permission assignment data between user sets and resource sets (i.e: condition set rules data)\n     * @summary Get Data For Set Rule\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userSetId\n     * @param {string} resourceSetId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getDataForSetRule: async (\n      orgId: string,\n      projId: string,\n      envId: string,\n      userSetId: string,\n      resourceSetId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('getDataForSetRule', 'orgId', orgId);\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getDataForSetRule', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getDataForSetRule', 'envId', envId);\n      // verify required parameter 'userSetId' is not null or undefined\n      assertParamExists('getDataForSetRule', 'userSetId', userSetId);\n      // verify required parameter 'resourceSetId' is not null or undefined\n      assertParamExists('getDataForSetRule', 'resourceSetId', resourceSetId);\n      const localVarPath =\n        `/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/condition_set_rules/{user_set_id}/{resource_set_id}`\n          .replace(`{${'org_id'}}`, encodeURIComponent(String(orgId)))\n          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n          .replace(`{${'user_set_id'}}`, encodeURIComponent(String(userSetId)))\n          .replace(`{${'resource_set_id'}}`, encodeURIComponent(String(resourceSetId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get Data For Tenant\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} tenantId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getDataForTenant: async (\n      orgId: string,\n      projId: string,\n      envId: string,\n      tenantId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('getDataForTenant', 'orgId', orgId);\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getDataForTenant', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getDataForTenant', 'envId', envId);\n      // verify required parameter 'tenantId' is not null or undefined\n      assertParamExists('getDataForTenant', 'tenantId', tenantId);\n      const localVarPath = `/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/tenants/{tenant_id}`\n        .replace(`{${'org_id'}}`, encodeURIComponent(String(orgId)))\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'tenant_id'}}`, encodeURIComponent(String(tenantId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get Data For User\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getDataForUser: async (\n      orgId: string,\n      projId: string,\n      envId: string,\n      userId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('getDataForUser', 'orgId', orgId);\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getDataForUser', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getDataForUser', 'envId', envId);\n      // verify required parameter 'userId' is not null or undefined\n      assertParamExists('getDataForUser', 'userId', userId);\n      const localVarPath = `/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/users/{user_id}`\n        .replace(`{${'org_id'}}`, encodeURIComponent(String(orgId)))\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'user_id'}}`, encodeURIComponent(String(userId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * OPALDataApi - functional programming interface\n * @export\n */\nexport const OPALDataApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = OPALDataApiAxiosParamCreator(configuration);\n  return {\n    /**\n     *\n     * @summary Get All Data\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {boolean} [internalUpdateCache]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getAllData(\n      orgId: string,\n      projId: string,\n      envId: string,\n      internalUpdateCache?: boolean,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FullData>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllData(\n        orgId,\n        projId,\n        envId,\n        internalUpdateCache,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get Data For Condition Set\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} conditionSetId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getDataForConditionSet(\n      orgId: string,\n      projId: string,\n      envId: string,\n      conditionSetId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (\n        axios?: AxiosInstance,\n        basePath?: string,\n      ) => AxiosPromise<ResponseGetDataForConditionSetV2InternalOpalDataOrgIdProjIdEnvIdConditionSetsConditionSetIdGet>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getDataForConditionSet(\n        orgId,\n        projId,\n        envId,\n        conditionSetId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get Data For Resource\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getDataForResource(\n      orgId: string,\n      projId: string,\n      envId: string,\n      resourceId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (\n        axios?: AxiosInstance,\n        basePath?: string,\n      ) => AxiosPromise<ResponseGetDataForResourceV2InternalOpalDataOrgIdProjIdEnvIdResourceTypesResourceIdGet>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getDataForResource(\n        orgId,\n        projId,\n        envId,\n        resourceId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get Data For Role\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getDataForRole(\n      orgId: string,\n      projId: string,\n      envId: string,\n      roleId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (\n        axios?: AxiosInstance,\n        basePath?: string,\n      ) => AxiosPromise<ResponseGetDataForRoleV2InternalOpalDataOrgIdProjIdEnvIdRolesRoleIdGet>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getDataForRole(\n        orgId,\n        projId,\n        envId,\n        roleId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * return permission assignment data between user sets and resource sets (i.e: condition set rules data)\n     * @summary Get Data For Set Rule\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userSetId\n     * @param {string} resourceSetId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getDataForSetRule(\n      orgId: string,\n      projId: string,\n      envId: string,\n      userSetId: string,\n      resourceSetId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: Array<string> }>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getDataForSetRule(\n        orgId,\n        projId,\n        envId,\n        userSetId,\n        resourceSetId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get Data For Tenant\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} tenantId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getDataForTenant(\n      orgId: string,\n      projId: string,\n      envId: string,\n      tenantId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (\n        axios?: AxiosInstance,\n        basePath?: string,\n      ) => AxiosPromise<ResponseGetDataForTenantV2InternalOpalDataOrgIdProjIdEnvIdTenantsTenantIdGet>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getDataForTenant(\n        orgId,\n        projId,\n        envId,\n        tenantId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get Data For User\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getDataForUser(\n      orgId: string,\n      projId: string,\n      envId: string,\n      userId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (\n        axios?: AxiosInstance,\n        basePath?: string,\n      ) => AxiosPromise<ResponseGetDataForUserV2InternalOpalDataOrgIdProjIdEnvIdUsersUserIdGet>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getDataForUser(\n        orgId,\n        projId,\n        envId,\n        userId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * OPALDataApi - factory interface\n * @export\n */\nexport const OPALDataApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = OPALDataApiFp(configuration);\n  return {\n    /**\n     *\n     * @summary Get All Data\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {boolean} [internalUpdateCache]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getAllData(\n      orgId: string,\n      projId: string,\n      envId: string,\n      internalUpdateCache?: boolean,\n      options?: any,\n    ): AxiosPromise<FullData> {\n      return localVarFp\n        .getAllData(orgId, projId, envId, internalUpdateCache, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get Data For Condition Set\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} conditionSetId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getDataForConditionSet(\n      orgId: string,\n      projId: string,\n      envId: string,\n      conditionSetId: string,\n      options?: any,\n    ): AxiosPromise<ResponseGetDataForConditionSetV2InternalOpalDataOrgIdProjIdEnvIdConditionSetsConditionSetIdGet> {\n      return localVarFp\n        .getDataForConditionSet(orgId, projId, envId, conditionSetId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get Data For Resource\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} resourceId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getDataForResource(\n      orgId: string,\n      projId: string,\n      envId: string,\n      resourceId: string,\n      options?: any,\n    ): AxiosPromise<ResponseGetDataForResourceV2InternalOpalDataOrgIdProjIdEnvIdResourceTypesResourceIdGet> {\n      return localVarFp\n        .getDataForResource(orgId, projId, envId, resourceId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get Data For Role\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getDataForRole(\n      orgId: string,\n      projId: string,\n      envId: string,\n      roleId: string,\n      options?: any,\n    ): AxiosPromise<ResponseGetDataForRoleV2InternalOpalDataOrgIdProjIdEnvIdRolesRoleIdGet> {\n      return localVarFp\n        .getDataForRole(orgId, projId, envId, roleId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * return permission assignment data between user sets and resource sets (i.e: condition set rules data)\n     * @summary Get Data For Set Rule\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userSetId\n     * @param {string} resourceSetId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getDataForSetRule(\n      orgId: string,\n      projId: string,\n      envId: string,\n      userSetId: string,\n      resourceSetId: string,\n      options?: any,\n    ): AxiosPromise<{ [key: string]: Array<string> }> {\n      return localVarFp\n        .getDataForSetRule(orgId, projId, envId, userSetId, resourceSetId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get Data For Tenant\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} tenantId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getDataForTenant(\n      orgId: string,\n      projId: string,\n      envId: string,\n      tenantId: string,\n      options?: any,\n    ): AxiosPromise<ResponseGetDataForTenantV2InternalOpalDataOrgIdProjIdEnvIdTenantsTenantIdGet> {\n      return localVarFp\n        .getDataForTenant(orgId, projId, envId, tenantId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get Data For User\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getDataForUser(\n      orgId: string,\n      projId: string,\n      envId: string,\n      userId: string,\n      options?: any,\n    ): AxiosPromise<ResponseGetDataForUserV2InternalOpalDataOrgIdProjIdEnvIdUsersUserIdGet> {\n      return localVarFp\n        .getDataForUser(orgId, projId, envId, userId, options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for getAllData operation in OPALDataApi.\n * @export\n * @interface OPALDataApiGetAllDataRequest\n */\nexport interface OPALDataApiGetAllDataRequest {\n  /**\n   * Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OPALDataApiGetAllData\n   */\n  readonly orgId: string;\n\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OPALDataApiGetAllData\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OPALDataApiGetAllData\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {boolean}\n   * @memberof OPALDataApiGetAllData\n   */\n  readonly internalUpdateCache?: boolean;\n}\n\n/**\n * Request parameters for getDataForConditionSet operation in OPALDataApi.\n * @export\n * @interface OPALDataApiGetDataForConditionSetRequest\n */\nexport interface OPALDataApiGetDataForConditionSetRequest {\n  /**\n   * Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OPALDataApiGetDataForConditionSet\n   */\n  readonly orgId: string;\n\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OPALDataApiGetDataForConditionSet\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OPALDataApiGetDataForConditionSet\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {string}\n   * @memberof OPALDataApiGetDataForConditionSet\n   */\n  readonly conditionSetId: string;\n}\n\n/**\n * Request parameters for getDataForResource operation in OPALDataApi.\n * @export\n * @interface OPALDataApiGetDataForResourceRequest\n */\nexport interface OPALDataApiGetDataForResourceRequest {\n  /**\n   * Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OPALDataApiGetDataForResource\n   */\n  readonly orgId: string;\n\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OPALDataApiGetDataForResource\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OPALDataApiGetDataForResource\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {string}\n   * @memberof OPALDataApiGetDataForResource\n   */\n  readonly resourceId: string;\n}\n\n/**\n * Request parameters for getDataForRole operation in OPALDataApi.\n * @export\n * @interface OPALDataApiGetDataForRoleRequest\n */\nexport interface OPALDataApiGetDataForRoleRequest {\n  /**\n   * Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OPALDataApiGetDataForRole\n   */\n  readonly orgId: string;\n\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OPALDataApiGetDataForRole\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OPALDataApiGetDataForRole\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {string}\n   * @memberof OPALDataApiGetDataForRole\n   */\n  readonly roleId: string;\n}\n\n/**\n * Request parameters for getDataForSetRule operation in OPALDataApi.\n * @export\n * @interface OPALDataApiGetDataForSetRuleRequest\n */\nexport interface OPALDataApiGetDataForSetRuleRequest {\n  /**\n   * Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OPALDataApiGetDataForSetRule\n   */\n  readonly orgId: string;\n\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OPALDataApiGetDataForSetRule\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OPALDataApiGetDataForSetRule\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {string}\n   * @memberof OPALDataApiGetDataForSetRule\n   */\n  readonly userSetId: string;\n\n  /**\n   *\n   * @type {string}\n   * @memberof OPALDataApiGetDataForSetRule\n   */\n  readonly resourceSetId: string;\n}\n\n/**\n * Request parameters for getDataForTenant operation in OPALDataApi.\n * @export\n * @interface OPALDataApiGetDataForTenantRequest\n */\nexport interface OPALDataApiGetDataForTenantRequest {\n  /**\n   * Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OPALDataApiGetDataForTenant\n   */\n  readonly orgId: string;\n\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OPALDataApiGetDataForTenant\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OPALDataApiGetDataForTenant\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {string}\n   * @memberof OPALDataApiGetDataForTenant\n   */\n  readonly tenantId: string;\n}\n\n/**\n * Request parameters for getDataForUser operation in OPALDataApi.\n * @export\n * @interface OPALDataApiGetDataForUserRequest\n */\nexport interface OPALDataApiGetDataForUserRequest {\n  /**\n   * Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OPALDataApiGetDataForUser\n   */\n  readonly orgId: string;\n\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OPALDataApiGetDataForUser\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OPALDataApiGetDataForUser\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {string}\n   * @memberof OPALDataApiGetDataForUser\n   */\n  readonly userId: string;\n}\n\n/**\n * OPALDataApi - object-oriented interface\n * @export\n * @class OPALDataApi\n * @extends {BaseAPI}\n */\nexport class OPALDataApi extends BaseAPI {\n  /**\n   *\n   * @summary Get All Data\n   * @param {OPALDataApiGetAllDataRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OPALDataApi\n   */\n  public getAllData(requestParameters: OPALDataApiGetAllDataRequest, options?: AxiosRequestConfig) {\n    return OPALDataApiFp(this.configuration)\n      .getAllData(\n        requestParameters.orgId,\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.internalUpdateCache,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get Data For Condition Set\n   * @param {OPALDataApiGetDataForConditionSetRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OPALDataApi\n   */\n  public getDataForConditionSet(\n    requestParameters: OPALDataApiGetDataForConditionSetRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return OPALDataApiFp(this.configuration)\n      .getDataForConditionSet(\n        requestParameters.orgId,\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.conditionSetId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get Data For Resource\n   * @param {OPALDataApiGetDataForResourceRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OPALDataApi\n   */\n  public getDataForResource(\n    requestParameters: OPALDataApiGetDataForResourceRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return OPALDataApiFp(this.configuration)\n      .getDataForResource(\n        requestParameters.orgId,\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.resourceId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get Data For Role\n   * @param {OPALDataApiGetDataForRoleRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OPALDataApi\n   */\n  public getDataForRole(\n    requestParameters: OPALDataApiGetDataForRoleRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return OPALDataApiFp(this.configuration)\n      .getDataForRole(\n        requestParameters.orgId,\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.roleId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * return permission assignment data between user sets and resource sets (i.e: condition set rules data)\n   * @summary Get Data For Set Rule\n   * @param {OPALDataApiGetDataForSetRuleRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OPALDataApi\n   */\n  public getDataForSetRule(\n    requestParameters: OPALDataApiGetDataForSetRuleRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return OPALDataApiFp(this.configuration)\n      .getDataForSetRule(\n        requestParameters.orgId,\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.userSetId,\n        requestParameters.resourceSetId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get Data For Tenant\n   * @param {OPALDataApiGetDataForTenantRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OPALDataApi\n   */\n  public getDataForTenant(\n    requestParameters: OPALDataApiGetDataForTenantRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return OPALDataApiFp(this.configuration)\n      .getDataForTenant(\n        requestParameters.orgId,\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.tenantId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get Data For User\n   * @param {OPALDataApiGetDataForUserRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OPALDataApi\n   */\n  public getDataForUser(\n    requestParameters: OPALDataApiGetDataForUserRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return OPALDataApiFp(this.configuration)\n      .getDataForUser(\n        requestParameters.orgId,\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.userId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Configuration } from './configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\n\nexport const BASE_PATH = 'http://localhost'.replace(/\\/+$/, '');\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n  csv: ',',\n  ssv: ' ',\n  tsv: '\\t',\n  pipes: '|',\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n  url: string;\n  options: AxiosRequestConfig;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n  protected configuration: Configuration | undefined;\n\n  constructor(\n    configuration?: Configuration,\n    protected basePath: string = BASE_PATH,\n    protected axios: AxiosInstance = globalAxios,\n  ) {\n    if (configuration) {\n      this.configuration = configuration;\n      this.basePath = configuration.basePath || this.basePath;\n    }\n  }\n}\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n  name: 'RequiredError' = 'RequiredError';\n  constructor(public field: string, msg?: string) {\n    super(msg);\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Configuration } from './configuration';\nimport { RequiredError, RequestArgs } from './base';\nimport { AxiosInstance, AxiosResponse } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com';\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (\n  functionName: string,\n  paramName: string,\n  paramValue: unknown,\n) {\n  if (paramValue === null || paramValue === undefined) {\n    throw new RequiredError(\n      paramName,\n      `Required parameter ${paramName} was null or undefined when calling ${functionName}.`,\n    );\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (\n  object: any,\n  keyParamName: string,\n  configuration?: Configuration,\n) {\n  if (configuration && configuration.apiKey) {\n    const localVarApiKeyValue =\n      typeof configuration.apiKey === 'function'\n        ? await configuration.apiKey(keyParamName)\n        : await configuration.apiKey;\n    object[keyParamName] = localVarApiKeyValue;\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n  if (configuration && (configuration.username || configuration.password)) {\n    object['auth'] = { username: configuration.username, password: configuration.password };\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n  if (configuration && configuration.accessToken) {\n    const accessToken =\n      typeof configuration.accessToken === 'function'\n        ? await configuration.accessToken()\n        : await configuration.accessToken;\n    object['Authorization'] = 'Bearer ' + accessToken;\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (\n  object: any,\n  name: string,\n  scopes: string[],\n  configuration?: Configuration,\n) {\n  if (configuration && configuration.accessToken) {\n    const localVarAccessTokenValue =\n      typeof configuration.accessToken === 'function'\n        ? await configuration.accessToken(name, scopes)\n        : await configuration.accessToken;\n    object['Authorization'] = 'Bearer ' + localVarAccessTokenValue;\n  }\n};\n\nfunction setFlattenedQueryParams(\n  urlSearchParams: URLSearchParams,\n  parameter: any,\n  key: string = '',\n): void {\n  if (typeof parameter === 'object') {\n    if (Array.isArray(parameter)) {\n      (parameter as any[]).forEach((item) => setFlattenedQueryParams(urlSearchParams, item, key));\n    } else {\n      Object.keys(parameter).forEach((currentKey) =>\n        setFlattenedQueryParams(\n          urlSearchParams,\n          parameter[currentKey],\n          `${key}${key !== '' ? '.' : ''}${currentKey}`,\n        ),\n      );\n    }\n  } else {\n    if (urlSearchParams.has(key)) {\n      urlSearchParams.append(key, parameter);\n    } else {\n      urlSearchParams.set(key, parameter);\n    }\n  }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n  const searchParams = new URLSearchParams(url.search);\n  setFlattenedQueryParams(searchParams, objects);\n  url.search = searchParams.toString();\n};\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (\n  value: any,\n  requestOptions: any,\n  configuration?: Configuration,\n) {\n  const nonString = typeof value !== 'string';\n  const needsSerialization =\n    nonString && configuration && configuration.isJsonMime\n      ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n      : nonString;\n  return needsSerialization ? JSON.stringify(value !== undefined ? value : {}) : value || '';\n};\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n  return url.pathname + url.search + url.hash;\n};\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (\n  axiosArgs: RequestArgs,\n  globalAxios: AxiosInstance,\n  BASE_PATH: string,\n  configuration?: Configuration,\n) {\n  return <T = unknown, R = AxiosResponse<T>>(\n    axios: AxiosInstance = globalAxios,\n    basePath: string = BASE_PATH,\n  ) => {\n    const axiosRequestArgs = {\n      ...axiosArgs.options,\n      url: (configuration?.basePath || basePath) + axiosArgs.url,\n    };\n    return axios.request<T, R>(axiosRequestArgs);\n  };\n};\n"],"mappings":"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","names":["globalAxios","globalAxios","BASE_PATH","globalAxios"]}