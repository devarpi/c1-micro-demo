{"version":3,"sources":["../../../src/openapi/api/audit-logs-api.ts","../../../src/openapi/base.ts","../../../src/openapi/common.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { AuditLogSortKey } from '../types';\n// @ts-ignore\nimport { DetailedAuditLog } from '../types';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n// @ts-ignore\nimport { PaginatedResultAuditLog } from '../types';\n/**\n * AuditLogsApi - axios parameter creator\n * @export\n */\nexport const AuditLogsApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     *\n     * @summary Get detailed audit log\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} logId The unique id of the audit log\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getDetailedAuditLog: async (\n      projId: string,\n      envId: string,\n      logId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getDetailedAuditLog', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getDetailedAuditLog', 'envId', envId);\n      // verify required parameter 'logId' is not null or undefined\n      assertParamExists('getDetailedAuditLog', 'logId', logId);\n      const localVarPath = `/v2/pdps/{proj_id}/{env_id}/audit_logs/{log_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'log_id'}}`, encodeURIComponent(String(logId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary List Audit Logs\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [pdpId] Filter by pdp config id\n     * @param {Array<string>} [users] List of user keys or emails to filter by\n     * @param {boolean} [decision] Filter by decision result\n     * @param {Array<string>} [resources] Filter by resources\n     * @param {string} [tenant] Filter by tenant\n     * @param {string} [action] Filter by action\n     * @param {number} [timestampFrom] Filter by timestamp from\n     * @param {number} [timestampTo] Filter by timestamp to\n     * @param {AuditLogSortKey} [sortBy] Sort by column\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listAuditLogs: async (\n      projId: string,\n      envId: string,\n      pdpId?: string,\n      users?: Array<string>,\n      decision?: boolean,\n      resources?: Array<string>,\n      tenant?: string,\n      action?: string,\n      timestampFrom?: number,\n      timestampTo?: number,\n      sortBy?: AuditLogSortKey,\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('listAuditLogs', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('listAuditLogs', 'envId', envId);\n      const localVarPath = `/v2/pdps/{proj_id}/{env_id}/audit_logs`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (pdpId !== undefined) {\n        localVarQueryParameter['pdp_id'] = pdpId;\n      }\n\n      if (users) {\n        localVarQueryParameter['users'] = users;\n      }\n\n      if (decision !== undefined) {\n        localVarQueryParameter['decision'] = decision;\n      }\n\n      if (resources) {\n        localVarQueryParameter['resources'] = resources;\n      }\n\n      if (tenant !== undefined) {\n        localVarQueryParameter['tenant'] = tenant;\n      }\n\n      if (action !== undefined) {\n        localVarQueryParameter['action'] = action;\n      }\n\n      if (timestampFrom !== undefined) {\n        localVarQueryParameter['timestamp_from'] = timestampFrom;\n      }\n\n      if (timestampTo !== undefined) {\n        localVarQueryParameter['timestamp_to'] = timestampTo;\n      }\n\n      if (sortBy !== undefined) {\n        localVarQueryParameter['sort_by'] = sortBy;\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * AuditLogsApi - functional programming interface\n * @export\n */\nexport const AuditLogsApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = AuditLogsApiAxiosParamCreator(configuration);\n  return {\n    /**\n     *\n     * @summary Get detailed audit log\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} logId The unique id of the audit log\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getDetailedAuditLog(\n      projId: string,\n      envId: string,\n      logId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DetailedAuditLog>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getDetailedAuditLog(\n        projId,\n        envId,\n        logId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary List Audit Logs\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [pdpId] Filter by pdp config id\n     * @param {Array<string>} [users] List of user keys or emails to filter by\n     * @param {boolean} [decision] Filter by decision result\n     * @param {Array<string>} [resources] Filter by resources\n     * @param {string} [tenant] Filter by tenant\n     * @param {string} [action] Filter by action\n     * @param {number} [timestampFrom] Filter by timestamp from\n     * @param {number} [timestampTo] Filter by timestamp to\n     * @param {AuditLogSortKey} [sortBy] Sort by column\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async listAuditLogs(\n      projId: string,\n      envId: string,\n      pdpId?: string,\n      users?: Array<string>,\n      decision?: boolean,\n      resources?: Array<string>,\n      tenant?: string,\n      action?: string,\n      timestampFrom?: number,\n      timestampTo?: number,\n      sortBy?: AuditLogSortKey,\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResultAuditLog>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.listAuditLogs(\n        projId,\n        envId,\n        pdpId,\n        users,\n        decision,\n        resources,\n        tenant,\n        action,\n        timestampFrom,\n        timestampTo,\n        sortBy,\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * AuditLogsApi - factory interface\n * @export\n */\nexport const AuditLogsApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = AuditLogsApiFp(configuration);\n  return {\n    /**\n     *\n     * @summary Get detailed audit log\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} logId The unique id of the audit log\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getDetailedAuditLog(\n      projId: string,\n      envId: string,\n      logId: string,\n      options?: any,\n    ): AxiosPromise<DetailedAuditLog> {\n      return localVarFp\n        .getDetailedAuditLog(projId, envId, logId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary List Audit Logs\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [pdpId] Filter by pdp config id\n     * @param {Array<string>} [users] List of user keys or emails to filter by\n     * @param {boolean} [decision] Filter by decision result\n     * @param {Array<string>} [resources] Filter by resources\n     * @param {string} [tenant] Filter by tenant\n     * @param {string} [action] Filter by action\n     * @param {number} [timestampFrom] Filter by timestamp from\n     * @param {number} [timestampTo] Filter by timestamp to\n     * @param {AuditLogSortKey} [sortBy] Sort by column\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listAuditLogs(\n      projId: string,\n      envId: string,\n      pdpId?: string,\n      users?: Array<string>,\n      decision?: boolean,\n      resources?: Array<string>,\n      tenant?: string,\n      action?: string,\n      timestampFrom?: number,\n      timestampTo?: number,\n      sortBy?: AuditLogSortKey,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<PaginatedResultAuditLog> {\n      return localVarFp\n        .listAuditLogs(\n          projId,\n          envId,\n          pdpId,\n          users,\n          decision,\n          resources,\n          tenant,\n          action,\n          timestampFrom,\n          timestampTo,\n          sortBy,\n          page,\n          perPage,\n          options,\n        )\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for getDetailedAuditLog operation in AuditLogsApi.\n * @export\n * @interface AuditLogsApiGetDetailedAuditLogRequest\n */\nexport interface AuditLogsApiGetDetailedAuditLogRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof AuditLogsApiGetDetailedAuditLog\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof AuditLogsApiGetDetailedAuditLog\n   */\n  readonly envId: string;\n\n  /**\n   * The unique id of the audit log\n   * @type {string}\n   * @memberof AuditLogsApiGetDetailedAuditLog\n   */\n  readonly logId: string;\n}\n\n/**\n * Request parameters for listAuditLogs operation in AuditLogsApi.\n * @export\n * @interface AuditLogsApiListAuditLogsRequest\n */\nexport interface AuditLogsApiListAuditLogsRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof AuditLogsApiListAuditLogs\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof AuditLogsApiListAuditLogs\n   */\n  readonly envId: string;\n\n  /**\n   * Filter by pdp config id\n   * @type {string}\n   * @memberof AuditLogsApiListAuditLogs\n   */\n  readonly pdpId?: string;\n\n  /**\n   * List of user keys or emails to filter by\n   * @type {Array<string>}\n   * @memberof AuditLogsApiListAuditLogs\n   */\n  readonly users?: Array<string>;\n\n  /**\n   * Filter by decision result\n   * @type {boolean}\n   * @memberof AuditLogsApiListAuditLogs\n   */\n  readonly decision?: boolean;\n\n  /**\n   * Filter by resources\n   * @type {Array<string>}\n   * @memberof AuditLogsApiListAuditLogs\n   */\n  readonly resources?: Array<string>;\n\n  /**\n   * Filter by tenant\n   * @type {string}\n   * @memberof AuditLogsApiListAuditLogs\n   */\n  readonly tenant?: string;\n\n  /**\n   * Filter by action\n   * @type {string}\n   * @memberof AuditLogsApiListAuditLogs\n   */\n  readonly action?: string;\n\n  /**\n   * Filter by timestamp from\n   * @type {number}\n   * @memberof AuditLogsApiListAuditLogs\n   */\n  readonly timestampFrom?: number;\n\n  /**\n   * Filter by timestamp to\n   * @type {number}\n   * @memberof AuditLogsApiListAuditLogs\n   */\n  readonly timestampTo?: number;\n\n  /**\n   * Sort by column\n   * @type {AuditLogSortKey}\n   * @memberof AuditLogsApiListAuditLogs\n   */\n  readonly sortBy?: AuditLogSortKey;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof AuditLogsApiListAuditLogs\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof AuditLogsApiListAuditLogs\n   */\n  readonly perPage?: number;\n}\n\n/**\n * AuditLogsApi - object-oriented interface\n * @export\n * @class AuditLogsApi\n * @extends {BaseAPI}\n */\nexport class AuditLogsApi extends BaseAPI {\n  /**\n   *\n   * @summary Get detailed audit log\n   * @param {AuditLogsApiGetDetailedAuditLogRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuditLogsApi\n   */\n  public getDetailedAuditLog(\n    requestParameters: AuditLogsApiGetDetailedAuditLogRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return AuditLogsApiFp(this.configuration)\n      .getDetailedAuditLog(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.logId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary List Audit Logs\n   * @param {AuditLogsApiListAuditLogsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuditLogsApi\n   */\n  public listAuditLogs(\n    requestParameters: AuditLogsApiListAuditLogsRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return AuditLogsApiFp(this.configuration)\n      .listAuditLogs(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.pdpId,\n        requestParameters.users,\n        requestParameters.decision,\n        requestParameters.resources,\n        requestParameters.tenant,\n        requestParameters.action,\n        requestParameters.timestampFrom,\n        requestParameters.timestampTo,\n        requestParameters.sortBy,\n        requestParameters.page,\n        requestParameters.perPage,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Configuration } from './configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\n\nexport const BASE_PATH = 'http://localhost'.replace(/\\/+$/, '');\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n  csv: ',',\n  ssv: ' ',\n  tsv: '\\t',\n  pipes: '|',\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n  url: string;\n  options: AxiosRequestConfig;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n  protected configuration: Configuration | undefined;\n\n  constructor(\n    configuration?: Configuration,\n    protected basePath: string = BASE_PATH,\n    protected axios: AxiosInstance = globalAxios,\n  ) {\n    if (configuration) {\n      this.configuration = configuration;\n      this.basePath = configuration.basePath || this.basePath;\n    }\n  }\n}\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n  name: 'RequiredError' = 'RequiredError';\n  constructor(public field: string, msg?: string) {\n    super(msg);\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Configuration } from './configuration';\nimport { RequiredError, RequestArgs } from './base';\nimport { AxiosInstance, AxiosResponse } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com';\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (\n  functionName: string,\n  paramName: string,\n  paramValue: unknown,\n) {\n  if (paramValue === null || paramValue === undefined) {\n    throw new RequiredError(\n      paramName,\n      `Required parameter ${paramName} was null or undefined when calling ${functionName}.`,\n    );\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (\n  object: any,\n  keyParamName: string,\n  configuration?: Configuration,\n) {\n  if (configuration && configuration.apiKey) {\n    const localVarApiKeyValue =\n      typeof configuration.apiKey === 'function'\n        ? await configuration.apiKey(keyParamName)\n        : await configuration.apiKey;\n    object[keyParamName] = localVarApiKeyValue;\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n  if (configuration && (configuration.username || configuration.password)) {\n    object['auth'] = { username: configuration.username, password: configuration.password };\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n  if (configuration && configuration.accessToken) {\n    const accessToken =\n      typeof configuration.accessToken === 'function'\n        ? await configuration.accessToken()\n        : await configuration.accessToken;\n    object['Authorization'] = 'Bearer ' + accessToken;\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (\n  object: any,\n  name: string,\n  scopes: string[],\n  configuration?: Configuration,\n) {\n  if (configuration && configuration.accessToken) {\n    const localVarAccessTokenValue =\n      typeof configuration.accessToken === 'function'\n        ? await configuration.accessToken(name, scopes)\n        : await configuration.accessToken;\n    object['Authorization'] = 'Bearer ' + localVarAccessTokenValue;\n  }\n};\n\nfunction setFlattenedQueryParams(\n  urlSearchParams: URLSearchParams,\n  parameter: any,\n  key: string = '',\n): void {\n  if (typeof parameter === 'object') {\n    if (Array.isArray(parameter)) {\n      (parameter as any[]).forEach((item) => setFlattenedQueryParams(urlSearchParams, item, key));\n    } else {\n      Object.keys(parameter).forEach((currentKey) =>\n        setFlattenedQueryParams(\n          urlSearchParams,\n          parameter[currentKey],\n          `${key}${key !== '' ? '.' : ''}${currentKey}`,\n        ),\n      );\n    }\n  } else {\n    if (urlSearchParams.has(key)) {\n      urlSearchParams.append(key, parameter);\n    } else {\n      urlSearchParams.set(key, parameter);\n    }\n  }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n  const searchParams = new URLSearchParams(url.search);\n  setFlattenedQueryParams(searchParams, objects);\n  url.search = searchParams.toString();\n};\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (\n  value: any,\n  requestOptions: any,\n  configuration?: Configuration,\n) {\n  const nonString = typeof value !== 'string';\n  const needsSerialization =\n    nonString && configuration && configuration.isJsonMime\n      ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n      : nonString;\n  return needsSerialization ? JSON.stringify(value !== undefined ? value : {}) : value || '';\n};\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n  return url.pathname + url.search + url.hash;\n};\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (\n  axiosArgs: RequestArgs,\n  globalAxios: AxiosInstance,\n  BASE_PATH: string,\n  configuration?: Configuration,\n) {\n  return <T = unknown, R = AxiosResponse<T>>(\n    axios: AxiosInstance = globalAxios,\n    basePath: string = BASE_PATH,\n  ) => {\n    const axiosRequestArgs = {\n      ...axiosArgs.options,\n      url: (configuration?.basePath || basePath) + axiosArgs.url,\n    };\n    return axios.request<T, R>(axiosRequestArgs);\n  };\n};\n"],"mappings":"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","names":["import_axios","globalAxios","globalAxios","BASE_PATH","globalAxios"]}