// src/openapi/api/users-elements-data-api.ts
import globalAxios2 from "axios";

// src/openapi/base.ts
import globalAxios from "axios";
var BASE_PATH = "http://localhost".replace(/\/+$/, "");
var BaseAPI = class {
  constructor(configuration, basePath = BASE_PATH, axios = globalAxios) {
    this.basePath = basePath;
    this.axios = axios;
    if (configuration) {
      this.configuration = configuration;
      this.basePath = configuration.basePath || this.basePath;
    }
  }
};
var RequiredError = class extends Error {
  constructor(field, msg) {
    super(msg);
    this.field = field;
    this.name = "RequiredError";
  }
};

// src/openapi/common.ts
var DUMMY_BASE_URL = "https://example.com";
var assertParamExists = function(functionName, paramName, paramValue) {
  if (paramValue === null || paramValue === void 0) {
    throw new RequiredError(
      paramName,
      `Required parameter ${paramName} was null or undefined when calling ${functionName}.`
    );
  }
};
var setBearerAuthToObject = async function(object, configuration) {
  if (configuration && configuration.accessToken) {
    const accessToken = typeof configuration.accessToken === "function" ? await configuration.accessToken() : await configuration.accessToken;
    object["Authorization"] = "Bearer " + accessToken;
  }
};
function setFlattenedQueryParams(urlSearchParams, parameter, key = "") {
  if (typeof parameter === "object") {
    if (Array.isArray(parameter)) {
      parameter.forEach((item) => setFlattenedQueryParams(urlSearchParams, item, key));
    } else {
      Object.keys(parameter).forEach(
        (currentKey) => setFlattenedQueryParams(
          urlSearchParams,
          parameter[currentKey],
          `${key}${key !== "" ? "." : ""}${currentKey}`
        )
      );
    }
  } else {
    if (urlSearchParams.has(key)) {
      urlSearchParams.append(key, parameter);
    } else {
      urlSearchParams.set(key, parameter);
    }
  }
}
var setSearchParams = function(url, ...objects) {
  const searchParams = new URLSearchParams(url.search);
  setFlattenedQueryParams(searchParams, objects);
  url.search = searchParams.toString();
};
var serializeDataIfNeeded = function(value, requestOptions, configuration) {
  const nonString = typeof value !== "string";
  const needsSerialization = nonString && configuration && configuration.isJsonMime ? configuration.isJsonMime(requestOptions.headers["Content-Type"]) : nonString;
  return needsSerialization ? JSON.stringify(value !== void 0 ? value : {}) : value || "";
};
var toPathString = function(url) {
  return url.pathname + url.search + url.hash;
};
var createRequestFunction = function(axiosArgs, globalAxios3, BASE_PATH2, configuration) {
  return (axios = globalAxios3, basePath = BASE_PATH2) => {
    const axiosRequestArgs = {
      ...axiosArgs.options,
      url: ((configuration == null ? void 0 : configuration.basePath) || basePath) + axiosArgs.url
    };
    return axios.request(axiosRequestArgs);
  };
};

// src/openapi/api/users-elements-data-api.ts
var UsersElementsDataApiAxiosParamCreator = function(configuration) {
  return {
    /**
     * Assigns a role to the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
     * @summary Assign role to user
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
     * @param {ElementsUserRoleCreate} elementsUserRoleCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    elementsAssignRoleToUser: async (projId, envId, elementsConfigId, userId, elementsUserRoleCreate, options = {}) => {
      assertParamExists("elementsAssignRoleToUser", "projId", projId);
      assertParamExists("elementsAssignRoleToUser", "envId", envId);
      assertParamExists("elementsAssignRoleToUser", "elementsConfigId", elementsConfigId);
      assertParamExists("elementsAssignRoleToUser", "userId", userId);
      assertParamExists(
        "elementsAssignRoleToUser",
        "elementsUserRoleCreate",
        elementsUserRoleCreate
      );
      const localVarPath = `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/users/{user_id}/roles`.replace(`{${"proj_id"}}`, encodeURIComponent(String(projId))).replace(`{${"env_id"}}`, encodeURIComponent(String(envId))).replace(`{${"elements_config_id"}}`, encodeURIComponent(String(elementsConfigId))).replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        elementsUserRoleCreate,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Creates a new user inside the Permit.io system, from that point forward you may run permission checks on that user.  If the user is already created: will return 200 instead of 201, and will return the existing user object in the response body.
     * @summary Create user
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {ElementsUserCreate} elementsUserCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    elementsCreateUser: async (projId, envId, elementsConfigId, elementsUserCreate, options = {}) => {
      assertParamExists("elementsCreateUser", "projId", projId);
      assertParamExists("elementsCreateUser", "envId", envId);
      assertParamExists("elementsCreateUser", "elementsConfigId", elementsConfigId);
      assertParamExists("elementsCreateUser", "elementsUserCreate", elementsUserCreate);
      const localVarPath = `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/users`.replace(`{${"proj_id"}}`, encodeURIComponent(String(projId))).replace(`{${"env_id"}}`, encodeURIComponent(String(envId))).replace(`{${"elements_config_id"}}`, encodeURIComponent(String(elementsConfigId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        elementsUserCreate,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary Delete user
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    elementsDeleteUser: async (projId, envId, elementsConfigId, userId, options = {}) => {
      assertParamExists("elementsDeleteUser", "projId", projId);
      assertParamExists("elementsDeleteUser", "envId", envId);
      assertParamExists("elementsDeleteUser", "elementsConfigId", elementsConfigId);
      assertParamExists("elementsDeleteUser", "userId", userId);
      const localVarPath = `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/users/{user_id}`.replace(`{${"proj_id"}}`, encodeURIComponent(String(projId))).replace(`{${"env_id"}}`, encodeURIComponent(String(envId))).replace(`{${"elements_config_id"}}`, encodeURIComponent(String(elementsConfigId))).replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Lists all the users defined within an environment.
     * @summary List roles
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {string} [search] Text search for the email field
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    elementsListRoles: async (projId, envId, elementsConfigId, search, page, perPage, options = {}) => {
      assertParamExists("elementsListRoles", "projId", projId);
      assertParamExists("elementsListRoles", "envId", envId);
      assertParamExists("elementsListRoles", "elementsConfigId", elementsConfigId);
      const localVarPath = `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/roles`.replace(`{${"proj_id"}}`, encodeURIComponent(String(projId))).replace(`{${"env_id"}}`, encodeURIComponent(String(envId))).replace(`{${"elements_config_id"}}`, encodeURIComponent(String(elementsConfigId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (search !== void 0) {
        localVarQueryParameter["search"] = search;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (perPage !== void 0) {
        localVarQueryParameter["per_page"] = perPage;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Lists all the users defined within an environment.
     * @summary List users
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {string} [search] Text search for the email field
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    elementsListUsers: async (projId, envId, elementsConfigId, search, page, perPage, options = {}) => {
      assertParamExists("elementsListUsers", "projId", projId);
      assertParamExists("elementsListUsers", "envId", envId);
      assertParamExists("elementsListUsers", "elementsConfigId", elementsConfigId);
      const localVarPath = `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/users`.replace(`{${"proj_id"}}`, encodeURIComponent(String(projId))).replace(`{${"env_id"}}`, encodeURIComponent(String(envId))).replace(`{${"elements_config_id"}}`, encodeURIComponent(String(elementsConfigId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (search !== void 0) {
        localVarQueryParameter["search"] = search;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (perPage !== void 0) {
        localVarQueryParameter["per_page"] = perPage;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Unassigns the role from the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.
     * @summary Unassign role from user
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
     * @param {ElementsUserRoleRemove} elementsUserRoleRemove
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    elementsUnassignRoleFromUser: async (projId, envId, elementsConfigId, userId, elementsUserRoleRemove, options = {}) => {
      assertParamExists("elementsUnassignRoleFromUser", "projId", projId);
      assertParamExists("elementsUnassignRoleFromUser", "envId", envId);
      assertParamExists("elementsUnassignRoleFromUser", "elementsConfigId", elementsConfigId);
      assertParamExists("elementsUnassignRoleFromUser", "userId", userId);
      assertParamExists(
        "elementsUnassignRoleFromUser",
        "elementsUserRoleRemove",
        elementsUserRoleRemove
      );
      const localVarPath = `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/users/{user_id}/roles`.replace(`{${"proj_id"}}`, encodeURIComponent(String(projId))).replace(`{${"env_id"}}`, encodeURIComponent(String(envId))).replace(`{${"elements_config_id"}}`, encodeURIComponent(String(elementsConfigId))).replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        elementsUserRoleRemove,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Updates the embed_config.
     * @summary Set Config Active
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setConfigActive: async (elementsConfigId, projId, envId, options = {}) => {
      assertParamExists("setConfigActive", "elementsConfigId", elementsConfigId);
      assertParamExists("setConfigActive", "projId", projId);
      assertParamExists("setConfigActive", "envId", envId);
      const localVarPath = `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/active`.replace(`{${"elements_config_id"}}`, encodeURIComponent(String(elementsConfigId))).replace(`{${"proj_id"}}`, encodeURIComponent(String(projId))).replace(`{${"env_id"}}`, encodeURIComponent(String(envId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
var UsersElementsDataApiFp = function(configuration) {
  const localVarAxiosParamCreator = UsersElementsDataApiAxiosParamCreator(configuration);
  return {
    /**
     * Assigns a role to the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
     * @summary Assign role to user
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
     * @param {ElementsUserRoleCreate} elementsUserRoleCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async elementsAssignRoleToUser(projId, envId, elementsConfigId, userId, elementsUserRoleCreate, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.elementsAssignRoleToUser(
        projId,
        envId,
        elementsConfigId,
        userId,
        elementsUserRoleCreate,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    },
    /**
     * Creates a new user inside the Permit.io system, from that point forward you may run permission checks on that user.  If the user is already created: will return 200 instead of 201, and will return the existing user object in the response body.
     * @summary Create user
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {ElementsUserCreate} elementsUserCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async elementsCreateUser(projId, envId, elementsConfigId, elementsUserCreate, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.elementsCreateUser(
        projId,
        envId,
        elementsConfigId,
        elementsUserCreate,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Delete user
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async elementsDeleteUser(projId, envId, elementsConfigId, userId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.elementsDeleteUser(
        projId,
        envId,
        elementsConfigId,
        userId,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    },
    /**
     * Lists all the users defined within an environment.
     * @summary List roles
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {string} [search] Text search for the email field
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async elementsListRoles(projId, envId, elementsConfigId, search, page, perPage, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.elementsListRoles(
        projId,
        envId,
        elementsConfigId,
        search,
        page,
        perPage,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    },
    /**
     * Lists all the users defined within an environment.
     * @summary List users
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {string} [search] Text search for the email field
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async elementsListUsers(projId, envId, elementsConfigId, search, page, perPage, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.elementsListUsers(
        projId,
        envId,
        elementsConfigId,
        search,
        page,
        perPage,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    },
    /**
     * Unassigns the role from the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.
     * @summary Unassign role from user
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
     * @param {ElementsUserRoleRemove} elementsUserRoleRemove
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async elementsUnassignRoleFromUser(projId, envId, elementsConfigId, userId, elementsUserRoleRemove, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.elementsUnassignRoleFromUser(
        projId,
        envId,
        elementsConfigId,
        userId,
        elementsUserRoleRemove,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    },
    /**
     * Updates the embed_config.
     * @summary Set Config Active
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async setConfigActive(elementsConfigId, projId, envId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.setConfigActive(
        elementsConfigId,
        projId,
        envId,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    }
  };
};
var UsersElementsDataApiFactory = function(configuration, basePath, axios) {
  const localVarFp = UsersElementsDataApiFp(configuration);
  return {
    /**
     * Assigns a role to the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
     * @summary Assign role to user
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
     * @param {ElementsUserRoleCreate} elementsUserRoleCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    elementsAssignRoleToUser(projId, envId, elementsConfigId, userId, elementsUserRoleCreate, options) {
      return localVarFp.elementsAssignRoleToUser(
        projId,
        envId,
        elementsConfigId,
        userId,
        elementsUserRoleCreate,
        options
      ).then((request) => request(axios, basePath));
    },
    /**
     * Creates a new user inside the Permit.io system, from that point forward you may run permission checks on that user.  If the user is already created: will return 200 instead of 201, and will return the existing user object in the response body.
     * @summary Create user
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {ElementsUserCreate} elementsUserCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    elementsCreateUser(projId, envId, elementsConfigId, elementsUserCreate, options) {
      return localVarFp.elementsCreateUser(projId, envId, elementsConfigId, elementsUserCreate, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete user
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    elementsDeleteUser(projId, envId, elementsConfigId, userId, options) {
      return localVarFp.elementsDeleteUser(projId, envId, elementsConfigId, userId, options).then((request) => request(axios, basePath));
    },
    /**
     * Lists all the users defined within an environment.
     * @summary List roles
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {string} [search] Text search for the email field
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    elementsListRoles(projId, envId, elementsConfigId, search, page, perPage, options) {
      return localVarFp.elementsListRoles(projId, envId, elementsConfigId, search, page, perPage, options).then((request) => request(axios, basePath));
    },
    /**
     * Lists all the users defined within an environment.
     * @summary List users
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {string} [search] Text search for the email field
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    elementsListUsers(projId, envId, elementsConfigId, search, page, perPage, options) {
      return localVarFp.elementsListUsers(projId, envId, elementsConfigId, search, page, perPage, options).then((request) => request(axios, basePath));
    },
    /**
     * Unassigns the role from the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.
     * @summary Unassign role from user
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
     * @param {ElementsUserRoleRemove} elementsUserRoleRemove
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    elementsUnassignRoleFromUser(projId, envId, elementsConfigId, userId, elementsUserRoleRemove, options) {
      return localVarFp.elementsUnassignRoleFromUser(
        projId,
        envId,
        elementsConfigId,
        userId,
        elementsUserRoleRemove,
        options
      ).then((request) => request(axios, basePath));
    },
    /**
     * Updates the embed_config.
     * @summary Set Config Active
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setConfigActive(elementsConfigId, projId, envId, options) {
      return localVarFp.setConfigActive(elementsConfigId, projId, envId, options).then((request) => request(axios, basePath));
    }
  };
};
var UsersElementsDataApi = class extends BaseAPI {
  /**
   * Assigns a role to the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
   * @summary Assign role to user
   * @param {UsersElementsDataApiElementsAssignRoleToUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersElementsDataApi
   */
  elementsAssignRoleToUser(requestParameters, options) {
    return UsersElementsDataApiFp(this.configuration).elementsAssignRoleToUser(
      requestParameters.projId,
      requestParameters.envId,
      requestParameters.elementsConfigId,
      requestParameters.userId,
      requestParameters.elementsUserRoleCreate,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  /**
   * Creates a new user inside the Permit.io system, from that point forward you may run permission checks on that user.  If the user is already created: will return 200 instead of 201, and will return the existing user object in the response body.
   * @summary Create user
   * @param {UsersElementsDataApiElementsCreateUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersElementsDataApi
   */
  elementsCreateUser(requestParameters, options) {
    return UsersElementsDataApiFp(this.configuration).elementsCreateUser(
      requestParameters.projId,
      requestParameters.envId,
      requestParameters.elementsConfigId,
      requestParameters.elementsUserCreate,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Delete user
   * @param {UsersElementsDataApiElementsDeleteUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersElementsDataApi
   */
  elementsDeleteUser(requestParameters, options) {
    return UsersElementsDataApiFp(this.configuration).elementsDeleteUser(
      requestParameters.projId,
      requestParameters.envId,
      requestParameters.elementsConfigId,
      requestParameters.userId,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  /**
   * Lists all the users defined within an environment.
   * @summary List roles
   * @param {UsersElementsDataApiElementsListRolesRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersElementsDataApi
   */
  elementsListRoles(requestParameters, options) {
    return UsersElementsDataApiFp(this.configuration).elementsListRoles(
      requestParameters.projId,
      requestParameters.envId,
      requestParameters.elementsConfigId,
      requestParameters.search,
      requestParameters.page,
      requestParameters.perPage,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  /**
   * Lists all the users defined within an environment.
   * @summary List users
   * @param {UsersElementsDataApiElementsListUsersRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersElementsDataApi
   */
  elementsListUsers(requestParameters, options) {
    return UsersElementsDataApiFp(this.configuration).elementsListUsers(
      requestParameters.projId,
      requestParameters.envId,
      requestParameters.elementsConfigId,
      requestParameters.search,
      requestParameters.page,
      requestParameters.perPage,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  /**
   * Unassigns the role from the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.
   * @summary Unassign role from user
   * @param {UsersElementsDataApiElementsUnassignRoleFromUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersElementsDataApi
   */
  elementsUnassignRoleFromUser(requestParameters, options) {
    return UsersElementsDataApiFp(this.configuration).elementsUnassignRoleFromUser(
      requestParameters.projId,
      requestParameters.envId,
      requestParameters.elementsConfigId,
      requestParameters.userId,
      requestParameters.elementsUserRoleRemove,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  /**
   * Updates the embed_config.
   * @summary Set Config Active
   * @param {UsersElementsDataApiSetConfigActiveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersElementsDataApi
   */
  setConfigActive(requestParameters, options) {
    return UsersElementsDataApiFp(this.configuration).setConfigActive(
      requestParameters.elementsConfigId,
      requestParameters.projId,
      requestParameters.envId,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
};
export {
  UsersElementsDataApi,
  UsersElementsDataApiAxiosParamCreator,
  UsersElementsDataApiFactory,
  UsersElementsDataApiFp
};
//# sourceMappingURL=users-elements-data-api.mjs.map