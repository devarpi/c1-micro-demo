// src/openapi/api/elements-configs-api.ts
import globalAxios2 from "axios";

// src/openapi/base.ts
import globalAxios from "axios";
var BASE_PATH = "http://localhost".replace(/\/+$/, "");
var BaseAPI = class {
  constructor(configuration, basePath = BASE_PATH, axios = globalAxios) {
    this.basePath = basePath;
    this.axios = axios;
    if (configuration) {
      this.configuration = configuration;
      this.basePath = configuration.basePath || this.basePath;
    }
  }
};
var RequiredError = class extends Error {
  constructor(field, msg) {
    super(msg);
    this.field = field;
    this.name = "RequiredError";
  }
};

// src/openapi/common.ts
var DUMMY_BASE_URL = "https://example.com";
var assertParamExists = function(functionName, paramName, paramValue) {
  if (paramValue === null || paramValue === void 0) {
    throw new RequiredError(
      paramName,
      `Required parameter ${paramName} was null or undefined when calling ${functionName}.`
    );
  }
};
var setBearerAuthToObject = async function(object, configuration) {
  if (configuration && configuration.accessToken) {
    const accessToken = typeof configuration.accessToken === "function" ? await configuration.accessToken() : await configuration.accessToken;
    object["Authorization"] = "Bearer " + accessToken;
  }
};
function setFlattenedQueryParams(urlSearchParams, parameter, key = "") {
  if (typeof parameter === "object") {
    if (Array.isArray(parameter)) {
      parameter.forEach((item) => setFlattenedQueryParams(urlSearchParams, item, key));
    } else {
      Object.keys(parameter).forEach(
        (currentKey) => setFlattenedQueryParams(
          urlSearchParams,
          parameter[currentKey],
          `${key}${key !== "" ? "." : ""}${currentKey}`
        )
      );
    }
  } else {
    if (urlSearchParams.has(key)) {
      urlSearchParams.append(key, parameter);
    } else {
      urlSearchParams.set(key, parameter);
    }
  }
}
var setSearchParams = function(url, ...objects) {
  const searchParams = new URLSearchParams(url.search);
  setFlattenedQueryParams(searchParams, objects);
  url.search = searchParams.toString();
};
var serializeDataIfNeeded = function(value, requestOptions, configuration) {
  const nonString = typeof value !== "string";
  const needsSerialization = nonString && configuration && configuration.isJsonMime ? configuration.isJsonMime(requestOptions.headers["Content-Type"]) : nonString;
  return needsSerialization ? JSON.stringify(value !== void 0 ? value : {}) : value || "";
};
var toPathString = function(url) {
  return url.pathname + url.search + url.hash;
};
var createRequestFunction = function(axiosArgs, globalAxios3, BASE_PATH2, configuration) {
  return (axios = globalAxios3, basePath = BASE_PATH2) => {
    const axiosRequestArgs = {
      ...axiosArgs.options,
      url: ((configuration == null ? void 0 : configuration.basePath) || basePath) + axiosArgs.url
    };
    return axios.request(axiosRequestArgs);
  };
};

// src/openapi/api/elements-configs-api.ts
var ElementsConfigsApiAxiosParamCreator = function(configuration) {
  return {
    /**
     * Creates a new elements_config under the active organization.
     * @summary Create Elements Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ElementsConfigCreate} elementsConfigCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createElementsConfig: async (projId, envId, elementsConfigCreate, options = {}) => {
      assertParamExists("createElementsConfig", "projId", projId);
      assertParamExists("createElementsConfig", "envId", envId);
      assertParamExists("createElementsConfig", "elementsConfigCreate", elementsConfigCreate);
      const localVarPath = `/v2/elements/{proj_id}/{env_id}/config`.replace(`{${"proj_id"}}`, encodeURIComponent(String(projId))).replace(`{${"env_id"}}`, encodeURIComponent(String(envId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        elementsConfigCreate,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Deletes the elements_config and all its related data.
     * @summary Delete Elements Config
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteElementsConfig: async (elementsConfigId, projId, envId, options = {}) => {
      assertParamExists("deleteElementsConfig", "elementsConfigId", elementsConfigId);
      assertParamExists("deleteElementsConfig", "projId", projId);
      assertParamExists("deleteElementsConfig", "envId", envId);
      const localVarPath = `/v2/elements/{proj_id}/{env_id}/{elements_config_id}`.replace(`{${"elements_config_id"}}`, encodeURIComponent(String(elementsConfigId))).replace(`{${"proj_id"}}`, encodeURIComponent(String(projId))).replace(`{${"env_id"}}`, encodeURIComponent(String(envId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.
     * @summary Get Elements Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getElementsConfig: async (projId, envId, elementsConfigId, options = {}) => {
      assertParamExists("getElementsConfig", "projId", projId);
      assertParamExists("getElementsConfig", "envId", envId);
      assertParamExists("getElementsConfig", "elementsConfigId", elementsConfigId);
      const localVarPath = `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}`.replace(`{${"proj_id"}}`, encodeURIComponent(String(projId))).replace(`{${"env_id"}}`, encodeURIComponent(String(envId))).replace(`{${"elements_config_id"}}`, encodeURIComponent(String(elementsConfigId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.
     * @summary Get Elements Config Runtime
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getElementsConfigRuntime: async (projId, envId, elementsConfigId, options = {}) => {
      assertParamExists("getElementsConfigRuntime", "projId", projId);
      assertParamExists("getElementsConfigRuntime", "envId", envId);
      assertParamExists("getElementsConfigRuntime", "elementsConfigId", elementsConfigId);
      const localVarPath = `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/runtime`.replace(`{${"proj_id"}}`, encodeURIComponent(String(projId))).replace(`{${"env_id"}}`, encodeURIComponent(String(envId))).replace(`{${"elements_config_id"}}`, encodeURIComponent(String(elementsConfigId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary Get Elements Type Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ElementsType} elementType Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getElementsTypeConfig: async (projId, envId, elementType, options = {}) => {
      assertParamExists("getElementsTypeConfig", "projId", projId);
      assertParamExists("getElementsTypeConfig", "envId", envId);
      assertParamExists("getElementsTypeConfig", "elementType", elementType);
      const localVarPath = `/v2/elements/{proj_id}/{env_id}/{element_type}`.replace(`{${"proj_id"}}`, encodeURIComponent(String(projId))).replace(`{${"env_id"}}`, encodeURIComponent(String(envId))).replace(`{${"element_type"}}`, encodeURIComponent(String(elementType)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Lists all the elements_configs under the active organization.
     * @summary List Elements Configs
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listElementsConfigs: async (projId, envId, page, perPage, options = {}) => {
      assertParamExists("listElementsConfigs", "projId", projId);
      assertParamExists("listElementsConfigs", "envId", envId);
      const localVarPath = `/v2/elements/{proj_id}/{env_id}/config`.replace(`{${"proj_id"}}`, encodeURIComponent(String(projId))).replace(`{${"env_id"}}`, encodeURIComponent(String(envId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (perPage !== void 0) {
        localVarQueryParameter["per_page"] = perPage;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Updates the elements_config.
     * @summary Update Elements Config
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ElementsConfigUpdate} elementsConfigUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateElementsConfig: async (elementsConfigId, projId, envId, elementsConfigUpdate, options = {}) => {
      assertParamExists("updateElementsConfig", "elementsConfigId", elementsConfigId);
      assertParamExists("updateElementsConfig", "projId", projId);
      assertParamExists("updateElementsConfig", "envId", envId);
      assertParamExists("updateElementsConfig", "elementsConfigUpdate", elementsConfigUpdate);
      const localVarPath = `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}`.replace(`{${"elements_config_id"}}`, encodeURIComponent(String(elementsConfigId))).replace(`{${"proj_id"}}`, encodeURIComponent(String(projId))).replace(`{${"env_id"}}`, encodeURIComponent(String(envId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        elementsConfigUpdate,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary Update Elements Type Permissions
     * @param {ElementsType} elementType Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ElementsEnvTypeUpdate} elementsEnvTypeUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateElementsTypePermissions: async (elementType, projId, envId, elementsEnvTypeUpdate, options = {}) => {
      assertParamExists("updateElementsTypePermissions", "elementType", elementType);
      assertParamExists("updateElementsTypePermissions", "projId", projId);
      assertParamExists("updateElementsTypePermissions", "envId", envId);
      assertParamExists(
        "updateElementsTypePermissions",
        "elementsEnvTypeUpdate",
        elementsEnvTypeUpdate
      );
      const localVarPath = `/v2/elements/{proj_id}/{env_id}/{element_type}`.replace(`{${"element_type"}}`, encodeURIComponent(String(elementType))).replace(`{${"proj_id"}}`, encodeURIComponent(String(projId))).replace(`{${"env_id"}}`, encodeURIComponent(String(envId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        elementsEnvTypeUpdate,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
var ElementsConfigsApiFp = function(configuration) {
  const localVarAxiosParamCreator = ElementsConfigsApiAxiosParamCreator(configuration);
  return {
    /**
     * Creates a new elements_config under the active organization.
     * @summary Create Elements Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ElementsConfigCreate} elementsConfigCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createElementsConfig(projId, envId, elementsConfigCreate, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createElementsConfig(
        projId,
        envId,
        elementsConfigCreate,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    },
    /**
     * Deletes the elements_config and all its related data.
     * @summary Delete Elements Config
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteElementsConfig(elementsConfigId, projId, envId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteElementsConfig(
        elementsConfigId,
        projId,
        envId,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    },
    /**
     * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.
     * @summary Get Elements Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getElementsConfig(projId, envId, elementsConfigId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getElementsConfig(
        projId,
        envId,
        elementsConfigId,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    },
    /**
     * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.
     * @summary Get Elements Config Runtime
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getElementsConfigRuntime(projId, envId, elementsConfigId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getElementsConfigRuntime(
        projId,
        envId,
        elementsConfigId,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Get Elements Type Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ElementsType} elementType Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getElementsTypeConfig(projId, envId, elementType, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getElementsTypeConfig(
        projId,
        envId,
        elementType,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    },
    /**
     * Lists all the elements_configs under the active organization.
     * @summary List Elements Configs
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listElementsConfigs(projId, envId, page, perPage, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listElementsConfigs(
        projId,
        envId,
        page,
        perPage,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    },
    /**
     * Updates the elements_config.
     * @summary Update Elements Config
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ElementsConfigUpdate} elementsConfigUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateElementsConfig(elementsConfigId, projId, envId, elementsConfigUpdate, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateElementsConfig(
        elementsConfigId,
        projId,
        envId,
        elementsConfigUpdate,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Update Elements Type Permissions
     * @param {ElementsType} elementType Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ElementsEnvTypeUpdate} elementsEnvTypeUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateElementsTypePermissions(elementType, projId, envId, elementsEnvTypeUpdate, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateElementsTypePermissions(
        elementType,
        projId,
        envId,
        elementsEnvTypeUpdate,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    }
  };
};
var ElementsConfigsApiFactory = function(configuration, basePath, axios) {
  const localVarFp = ElementsConfigsApiFp(configuration);
  return {
    /**
     * Creates a new elements_config under the active organization.
     * @summary Create Elements Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ElementsConfigCreate} elementsConfigCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createElementsConfig(projId, envId, elementsConfigCreate, options) {
      return localVarFp.createElementsConfig(projId, envId, elementsConfigCreate, options).then((request) => request(axios, basePath));
    },
    /**
     * Deletes the elements_config and all its related data.
     * @summary Delete Elements Config
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteElementsConfig(elementsConfigId, projId, envId, options) {
      return localVarFp.deleteElementsConfig(elementsConfigId, projId, envId, options).then((request) => request(axios, basePath));
    },
    /**
     * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.
     * @summary Get Elements Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getElementsConfig(projId, envId, elementsConfigId, options) {
      return localVarFp.getElementsConfig(projId, envId, elementsConfigId, options).then((request) => request(axios, basePath));
    },
    /**
     * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.
     * @summary Get Elements Config Runtime
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getElementsConfigRuntime(projId, envId, elementsConfigId, options) {
      return localVarFp.getElementsConfigRuntime(projId, envId, elementsConfigId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get Elements Type Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ElementsType} elementType Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getElementsTypeConfig(projId, envId, elementType, options) {
      return localVarFp.getElementsTypeConfig(projId, envId, elementType, options).then((request) => request(axios, basePath));
    },
    /**
     * Lists all the elements_configs under the active organization.
     * @summary List Elements Configs
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listElementsConfigs(projId, envId, page, perPage, options) {
      return localVarFp.listElementsConfigs(projId, envId, page, perPage, options).then((request) => request(axios, basePath));
    },
    /**
     * Updates the elements_config.
     * @summary Update Elements Config
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ElementsConfigUpdate} elementsConfigUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateElementsConfig(elementsConfigId, projId, envId, elementsConfigUpdate, options) {
      return localVarFp.updateElementsConfig(elementsConfigId, projId, envId, elementsConfigUpdate, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update Elements Type Permissions
     * @param {ElementsType} elementType Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ElementsEnvTypeUpdate} elementsEnvTypeUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateElementsTypePermissions(elementType, projId, envId, elementsEnvTypeUpdate, options) {
      return localVarFp.updateElementsTypePermissions(elementType, projId, envId, elementsEnvTypeUpdate, options).then((request) => request(axios, basePath));
    }
  };
};
var ElementsConfigsApi = class extends BaseAPI {
  /**
   * Creates a new elements_config under the active organization.
   * @summary Create Elements Config
   * @param {ElementsConfigsApiCreateElementsConfigRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ElementsConfigsApi
   */
  createElementsConfig(requestParameters, options) {
    return ElementsConfigsApiFp(this.configuration).createElementsConfig(
      requestParameters.projId,
      requestParameters.envId,
      requestParameters.elementsConfigCreate,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  /**
   * Deletes the elements_config and all its related data.
   * @summary Delete Elements Config
   * @param {ElementsConfigsApiDeleteElementsConfigRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ElementsConfigsApi
   */
  deleteElementsConfig(requestParameters, options) {
    return ElementsConfigsApiFp(this.configuration).deleteElementsConfig(
      requestParameters.elementsConfigId,
      requestParameters.projId,
      requestParameters.envId,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  /**
   * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.
   * @summary Get Elements Config
   * @param {ElementsConfigsApiGetElementsConfigRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ElementsConfigsApi
   */
  getElementsConfig(requestParameters, options) {
    return ElementsConfigsApiFp(this.configuration).getElementsConfig(
      requestParameters.projId,
      requestParameters.envId,
      requestParameters.elementsConfigId,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  /**
   * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.
   * @summary Get Elements Config Runtime
   * @param {ElementsConfigsApiGetElementsConfigRuntimeRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ElementsConfigsApi
   */
  getElementsConfigRuntime(requestParameters, options) {
    return ElementsConfigsApiFp(this.configuration).getElementsConfigRuntime(
      requestParameters.projId,
      requestParameters.envId,
      requestParameters.elementsConfigId,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get Elements Type Config
   * @param {ElementsConfigsApiGetElementsTypeConfigRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ElementsConfigsApi
   */
  getElementsTypeConfig(requestParameters, options) {
    return ElementsConfigsApiFp(this.configuration).getElementsTypeConfig(
      requestParameters.projId,
      requestParameters.envId,
      requestParameters.elementType,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  /**
   * Lists all the elements_configs under the active organization.
   * @summary List Elements Configs
   * @param {ElementsConfigsApiListElementsConfigsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ElementsConfigsApi
   */
  listElementsConfigs(requestParameters, options) {
    return ElementsConfigsApiFp(this.configuration).listElementsConfigs(
      requestParameters.projId,
      requestParameters.envId,
      requestParameters.page,
      requestParameters.perPage,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  /**
   * Updates the elements_config.
   * @summary Update Elements Config
   * @param {ElementsConfigsApiUpdateElementsConfigRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ElementsConfigsApi
   */
  updateElementsConfig(requestParameters, options) {
    return ElementsConfigsApiFp(this.configuration).updateElementsConfig(
      requestParameters.elementsConfigId,
      requestParameters.projId,
      requestParameters.envId,
      requestParameters.elementsConfigUpdate,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Update Elements Type Permissions
   * @param {ElementsConfigsApiUpdateElementsTypePermissionsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ElementsConfigsApi
   */
  updateElementsTypePermissions(requestParameters, options) {
    return ElementsConfigsApiFp(this.configuration).updateElementsTypePermissions(
      requestParameters.elementType,
      requestParameters.projId,
      requestParameters.envId,
      requestParameters.elementsEnvTypeUpdate,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
};
export {
  ElementsConfigsApi,
  ElementsConfigsApiAxiosParamCreator,
  ElementsConfigsApiFactory,
  ElementsConfigsApiFp
};
//# sourceMappingURL=elements-configs-api.mjs.map