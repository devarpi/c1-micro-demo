// src/openapi/api/members-api.ts
import globalAxios2 from "axios";

// src/openapi/base.ts
import globalAxios from "axios";
var BASE_PATH = "http://localhost".replace(/\/+$/, "");
var BaseAPI = class {
  constructor(configuration, basePath = BASE_PATH, axios = globalAxios) {
    this.basePath = basePath;
    this.axios = axios;
    if (configuration) {
      this.configuration = configuration;
      this.basePath = configuration.basePath || this.basePath;
    }
  }
};
var RequiredError = class extends Error {
  constructor(field, msg) {
    super(msg);
    this.field = field;
    this.name = "RequiredError";
  }
};

// src/openapi/common.ts
var DUMMY_BASE_URL = "https://example.com";
var assertParamExists = function(functionName, paramName, paramValue) {
  if (paramValue === null || paramValue === void 0) {
    throw new RequiredError(
      paramName,
      `Required parameter ${paramName} was null or undefined when calling ${functionName}.`
    );
  }
};
var setBearerAuthToObject = async function(object, configuration) {
  if (configuration && configuration.accessToken) {
    const accessToken = typeof configuration.accessToken === "function" ? await configuration.accessToken() : await configuration.accessToken;
    object["Authorization"] = "Bearer " + accessToken;
  }
};
function setFlattenedQueryParams(urlSearchParams, parameter, key = "") {
  if (typeof parameter === "object") {
    if (Array.isArray(parameter)) {
      parameter.forEach((item) => setFlattenedQueryParams(urlSearchParams, item, key));
    } else {
      Object.keys(parameter).forEach(
        (currentKey) => setFlattenedQueryParams(
          urlSearchParams,
          parameter[currentKey],
          `${key}${key !== "" ? "." : ""}${currentKey}`
        )
      );
    }
  } else {
    if (urlSearchParams.has(key)) {
      urlSearchParams.append(key, parameter);
    } else {
      urlSearchParams.set(key, parameter);
    }
  }
}
var setSearchParams = function(url, ...objects) {
  const searchParams = new URLSearchParams(url.search);
  setFlattenedQueryParams(searchParams, objects);
  url.search = searchParams.toString();
};
var serializeDataIfNeeded = function(value, requestOptions, configuration) {
  const nonString = typeof value !== "string";
  const needsSerialization = nonString && configuration && configuration.isJsonMime ? configuration.isJsonMime(requestOptions.headers["Content-Type"]) : nonString;
  return needsSerialization ? JSON.stringify(value !== void 0 ? value : {}) : value || "";
};
var toPathString = function(url) {
  return url.pathname + url.search + url.hash;
};
var createRequestFunction = function(axiosArgs, globalAxios3, BASE_PATH2, configuration) {
  return (axios = globalAxios3, basePath = BASE_PATH2) => {
    const axiosRequestArgs = {
      ...axiosArgs.options,
      url: ((configuration == null ? void 0 : configuration.basePath) || basePath) + axiosArgs.url
    };
    return axios.request(axiosRequestArgs);
  };
};

// src/openapi/api/members-api.ts
var MembersApiAxiosParamCreator = function(configuration) {
  return {
    /**
     * Create an organization member if needed, and grant it permissions.  The member can be specified either by ID (for an existing member), or by email (for either an existing member or a new one).  For a new member, an invite will be sent.
     * @summary Create Organization Members
     * @param {OrgMemberCreate} orgMemberCreate
     * @param {string} [inviterName]
     * @param {string} [inviterEmail]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganizationMembers: async (orgMemberCreate, inviterName, inviterEmail, options = {}) => {
      assertParamExists("createOrganizationMembers", "orgMemberCreate", orgMemberCreate);
      const localVarPath = `/v2/members`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (inviterName !== void 0) {
        localVarQueryParameter["inviter_name"] = inviterName;
      }
      if (inviterEmail !== void 0) {
        localVarQueryParameter["inviter_email"] = inviterEmail;
      }
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        orgMemberCreate,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Deletes an account member matching the given id or email address. The member will be removed from the active account in permit.io.  If the member is the only member in its account (organization), returns 400 (bad request), due to nobody remains with access to the account, meaning deletion of the entire account (org). To completely remove an account, call DELETE `/orgs/{org}`.
     * @summary Delete Organization Member
     * @param {string} memberId Either the unique id (UUID) of the account member, or the email address of the account member.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganizationMember: async (memberId, options = {}) => {
      assertParamExists("deleteOrganizationMember", "memberId", memberId);
      const localVarPath = `/v2/members/{member_id}`.replace(
        `{${"member_id"}}`,
        encodeURIComponent(String(memberId))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Remove permissions from a member. If the last permissions a member has are removed, the member is also deleted.
     * @summary Delete Organization Permissions
     * @param {OrgMemberRemovePermissions} orgMemberRemovePermissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganizationPermissions: async (orgMemberRemovePermissions, options = {}) => {
      assertParamExists(
        "deleteOrganizationPermissions",
        "orgMemberRemovePermissions",
        orgMemberRemovePermissions
      );
      const localVarPath = `/v2/members`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        orgMemberRemovePermissions,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Gets the authenticated account member\'s details.
     * @summary Get the authenticated account member
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthenticatedMember: async (options = {}) => {
      const localVarPath = `/v2/members/me`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Gets a single account member by its id or email address. matching the given member, if no such member exists under the current active account (organization), returns 404.
     * @summary Get Organization Member
     * @param {string} memberId Either the unique id (UUID) of the account member, or the email address of the account member.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationMember: async (memberId, options = {}) => {
      assertParamExists("getOrganizationMember", "memberId", memberId);
      const localVarPath = `/v2/members/{member_id}`.replace(
        `{${"member_id"}}`,
        encodeURIComponent(String(memberId))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Lists all the account members that current active account has access to, optionally filtering by project or environment. The active account/organization is determined by the API Key used or by the authenticated session id.
     * @summary List Organization Members
     * @param {string} [projectId]
     * @param {string} [envId]
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizationMembers: async (projectId, envId, page, perPage, options = {}) => {
      const localVarPath = `/v2/members`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (projectId !== void 0) {
        localVarQueryParameter["project_id"] = projectId;
      }
      if (envId !== void 0) {
        localVarQueryParameter["env_id"] = envId;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (perPage !== void 0) {
        localVarQueryParameter["per_page"] = perPage;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Updates an account member\'s settings.
     * @summary Update Organization Member
     * @param {string} memberId Either the unique id (UUID) of the account member, or the email address of the account member.
     * @param {OrgMemberUpdate} orgMemberUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganizationMember: async (memberId, orgMemberUpdate, options = {}) => {
      assertParamExists("updateOrganizationMember", "memberId", memberId);
      assertParamExists("updateOrganizationMember", "orgMemberUpdate", orgMemberUpdate);
      const localVarPath = `/v2/members/{member_id}`.replace(
        `{${"member_id"}}`,
        encodeURIComponent(String(memberId))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        orgMemberUpdate,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
var MembersApiFp = function(configuration) {
  const localVarAxiosParamCreator = MembersApiAxiosParamCreator(configuration);
  return {
    /**
     * Create an organization member if needed, and grant it permissions.  The member can be specified either by ID (for an existing member), or by email (for either an existing member or a new one).  For a new member, an invite will be sent.
     * @summary Create Organization Members
     * @param {OrgMemberCreate} orgMemberCreate
     * @param {string} [inviterName]
     * @param {string} [inviterEmail]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createOrganizationMembers(orgMemberCreate, inviterName, inviterEmail, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createOrganizationMembers(
        orgMemberCreate,
        inviterName,
        inviterEmail,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    },
    /**
     * Deletes an account member matching the given id or email address. The member will be removed from the active account in permit.io.  If the member is the only member in its account (organization), returns 400 (bad request), due to nobody remains with access to the account, meaning deletion of the entire account (org). To completely remove an account, call DELETE `/orgs/{org}`.
     * @summary Delete Organization Member
     * @param {string} memberId Either the unique id (UUID) of the account member, or the email address of the account member.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteOrganizationMember(memberId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrganizationMember(
        memberId,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    },
    /**
     * Remove permissions from a member. If the last permissions a member has are removed, the member is also deleted.
     * @summary Delete Organization Permissions
     * @param {OrgMemberRemovePermissions} orgMemberRemovePermissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteOrganizationPermissions(orgMemberRemovePermissions, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrganizationPermissions(
        orgMemberRemovePermissions,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    },
    /**
     * Gets the authenticated account member\'s details.
     * @summary Get the authenticated account member
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAuthenticatedMember(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthenticatedMember(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    },
    /**
     * Gets a single account member by its id or email address. matching the given member, if no such member exists under the current active account (organization), returns 404.
     * @summary Get Organization Member
     * @param {string} memberId Either the unique id (UUID) of the account member, or the email address of the account member.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOrganizationMember(memberId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationMember(
        memberId,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    },
    /**
     * Lists all the account members that current active account has access to, optionally filtering by project or environment. The active account/organization is determined by the API Key used or by the authenticated session id.
     * @summary List Organization Members
     * @param {string} [projectId]
     * @param {string} [envId]
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listOrganizationMembers(projectId, envId, page, perPage, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listOrganizationMembers(
        projectId,
        envId,
        page,
        perPage,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    },
    /**
     * Updates an account member\'s settings.
     * @summary Update Organization Member
     * @param {string} memberId Either the unique id (UUID) of the account member, or the email address of the account member.
     * @param {OrgMemberUpdate} orgMemberUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateOrganizationMember(memberId, orgMemberUpdate, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrganizationMember(
        memberId,
        orgMemberUpdate,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    }
  };
};
var MembersApiFactory = function(configuration, basePath, axios) {
  const localVarFp = MembersApiFp(configuration);
  return {
    /**
     * Create an organization member if needed, and grant it permissions.  The member can be specified either by ID (for an existing member), or by email (for either an existing member or a new one).  For a new member, an invite will be sent.
     * @summary Create Organization Members
     * @param {OrgMemberCreate} orgMemberCreate
     * @param {string} [inviterName]
     * @param {string} [inviterEmail]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganizationMembers(orgMemberCreate, inviterName, inviterEmail, options) {
      return localVarFp.createOrganizationMembers(orgMemberCreate, inviterName, inviterEmail, options).then((request) => request(axios, basePath));
    },
    /**
     * Deletes an account member matching the given id or email address. The member will be removed from the active account in permit.io.  If the member is the only member in its account (organization), returns 400 (bad request), due to nobody remains with access to the account, meaning deletion of the entire account (org). To completely remove an account, call DELETE `/orgs/{org}`.
     * @summary Delete Organization Member
     * @param {string} memberId Either the unique id (UUID) of the account member, or the email address of the account member.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganizationMember(memberId, options) {
      return localVarFp.deleteOrganizationMember(memberId, options).then((request) => request(axios, basePath));
    },
    /**
     * Remove permissions from a member. If the last permissions a member has are removed, the member is also deleted.
     * @summary Delete Organization Permissions
     * @param {OrgMemberRemovePermissions} orgMemberRemovePermissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganizationPermissions(orgMemberRemovePermissions, options) {
      return localVarFp.deleteOrganizationPermissions(orgMemberRemovePermissions, options).then((request) => request(axios, basePath));
    },
    /**
     * Gets the authenticated account member\'s details.
     * @summary Get the authenticated account member
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthenticatedMember(options) {
      return localVarFp.getAuthenticatedMember(options).then((request) => request(axios, basePath));
    },
    /**
     * Gets a single account member by its id or email address. matching the given member, if no such member exists under the current active account (organization), returns 404.
     * @summary Get Organization Member
     * @param {string} memberId Either the unique id (UUID) of the account member, or the email address of the account member.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationMember(memberId, options) {
      return localVarFp.getOrganizationMember(memberId, options).then((request) => request(axios, basePath));
    },
    /**
     * Lists all the account members that current active account has access to, optionally filtering by project or environment. The active account/organization is determined by the API Key used or by the authenticated session id.
     * @summary List Organization Members
     * @param {string} [projectId]
     * @param {string} [envId]
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizationMembers(projectId, envId, page, perPage, options) {
      return localVarFp.listOrganizationMembers(projectId, envId, page, perPage, options).then((request) => request(axios, basePath));
    },
    /**
     * Updates an account member\'s settings.
     * @summary Update Organization Member
     * @param {string} memberId Either the unique id (UUID) of the account member, or the email address of the account member.
     * @param {OrgMemberUpdate} orgMemberUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganizationMember(memberId, orgMemberUpdate, options) {
      return localVarFp.updateOrganizationMember(memberId, orgMemberUpdate, options).then((request) => request(axios, basePath));
    }
  };
};
var MembersApi = class extends BaseAPI {
  /**
   * Create an organization member if needed, and grant it permissions.  The member can be specified either by ID (for an existing member), or by email (for either an existing member or a new one).  For a new member, an invite will be sent.
   * @summary Create Organization Members
   * @param {MembersApiCreateOrganizationMembersRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MembersApi
   */
  createOrganizationMembers(requestParameters, options) {
    return MembersApiFp(this.configuration).createOrganizationMembers(
      requestParameters.orgMemberCreate,
      requestParameters.inviterName,
      requestParameters.inviterEmail,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  /**
   * Deletes an account member matching the given id or email address. The member will be removed from the active account in permit.io.  If the member is the only member in its account (organization), returns 400 (bad request), due to nobody remains with access to the account, meaning deletion of the entire account (org). To completely remove an account, call DELETE `/orgs/{org}`.
   * @summary Delete Organization Member
   * @param {MembersApiDeleteOrganizationMemberRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MembersApi
   */
  deleteOrganizationMember(requestParameters, options) {
    return MembersApiFp(this.configuration).deleteOrganizationMember(requestParameters.memberId, options).then((request) => request(this.axios, this.basePath));
  }
  /**
   * Remove permissions from a member. If the last permissions a member has are removed, the member is also deleted.
   * @summary Delete Organization Permissions
   * @param {MembersApiDeleteOrganizationPermissionsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MembersApi
   */
  deleteOrganizationPermissions(requestParameters, options) {
    return MembersApiFp(this.configuration).deleteOrganizationPermissions(requestParameters.orgMemberRemovePermissions, options).then((request) => request(this.axios, this.basePath));
  }
  /**
   * Gets the authenticated account member\'s details.
   * @summary Get the authenticated account member
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MembersApi
   */
  getAuthenticatedMember(options) {
    return MembersApiFp(this.configuration).getAuthenticatedMember(options).then((request) => request(this.axios, this.basePath));
  }
  /**
   * Gets a single account member by its id or email address. matching the given member, if no such member exists under the current active account (organization), returns 404.
   * @summary Get Organization Member
   * @param {MembersApiGetOrganizationMemberRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MembersApi
   */
  getOrganizationMember(requestParameters, options) {
    return MembersApiFp(this.configuration).getOrganizationMember(requestParameters.memberId, options).then((request) => request(this.axios, this.basePath));
  }
  /**
   * Lists all the account members that current active account has access to, optionally filtering by project or environment. The active account/organization is determined by the API Key used or by the authenticated session id.
   * @summary List Organization Members
   * @param {MembersApiListOrganizationMembersRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MembersApi
   */
  listOrganizationMembers(requestParameters = {}, options) {
    return MembersApiFp(this.configuration).listOrganizationMembers(
      requestParameters.projectId,
      requestParameters.envId,
      requestParameters.page,
      requestParameters.perPage,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  /**
   * Updates an account member\'s settings.
   * @summary Update Organization Member
   * @param {MembersApiUpdateOrganizationMemberRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MembersApi
   */
  updateOrganizationMember(requestParameters, options) {
    return MembersApiFp(this.configuration).updateOrganizationMember(
      requestParameters.memberId,
      requestParameters.orgMemberUpdate,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
};
export {
  MembersApi,
  MembersApiAxiosParamCreator,
  MembersApiFactory,
  MembersApiFp
};
//# sourceMappingURL=members-api.mjs.map