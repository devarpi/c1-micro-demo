{"version":3,"sources":["../../../src/openapi/api/roles-api.ts","../../../src/openapi/base.ts","../../../src/openapi/common.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { AddRolePermissions, PaginatedResultRoleRead } from '../types';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n// @ts-ignore\nimport { RemoveRolePermissions } from '../types';\n// @ts-ignore\nimport { RoleCreate } from '../types';\n// @ts-ignore\nimport { RoleRead } from '../types';\n// @ts-ignore\nimport { RoleUpdate } from '../types';\n/**\n * RolesApi - axios parameter creator\n * @export\n */\nexport const RolesApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     * This endpoint is part of the role hierarchy feature.  Makes role with id `role_id` extend the role with id `parent_role_id`. In other words, `role_id` will automatically be assigned any permissions that are granted to `parent_role_id`.  We can say the `role_id` **extends** `parent_role_id` or **inherits** from `parent_role_id`.  If `role_id` is already an ancestor of `parent_role_id`, the request will fail with HTTP 400 to prevent a cycle in the role hierarchy.\n     * @summary Add Parent Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} parentRoleId Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    addParentRole: async (\n      projId: string,\n      envId: string,\n      roleId: string,\n      parentRoleId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('addParentRole', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('addParentRole', 'envId', envId);\n      // verify required parameter 'roleId' is not null or undefined\n      assertParamExists('addParentRole', 'roleId', roleId);\n      // verify required parameter 'parentRoleId' is not null or undefined\n      assertParamExists('addParentRole', 'parentRoleId', parentRoleId);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/roles/{role_id}/parents/{parent_role_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)))\n        .replace(`{${'parent_role_id'}}`, encodeURIComponent(String(parentRoleId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Assign permissions to role.  If some of the permissions specified are already assigned, will skip them.\n     * @summary Assign Permissions To Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {AddRolePermissions} addRolePermissions\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    assignPermissionsToRole: async (\n      projId: string,\n      envId: string,\n      roleId: string,\n      addRolePermissions: AddRolePermissions,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('assignPermissionsToRole', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('assignPermissionsToRole', 'envId', envId);\n      // verify required parameter 'roleId' is not null or undefined\n      assertParamExists('assignPermissionsToRole', 'roleId', roleId);\n      // verify required parameter 'addRolePermissions' is not null or undefined\n      assertParamExists('assignPermissionsToRole', 'addRolePermissions', addRolePermissions);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/roles/{role_id}/permissions`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        addRolePermissions,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Creates a new tenant role.\n     * @summary Create Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {RoleCreate} roleCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createRole: async (\n      projId: string,\n      envId: string,\n      roleCreate: RoleCreate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('createRole', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('createRole', 'envId', envId);\n      // verify required parameter 'roleCreate' is not null or undefined\n      assertParamExists('createRole', 'roleCreate', roleCreate);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/roles`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        roleCreate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Deletes a tenant role and all its related data. This includes any permissions granted to said role.\n     * @summary Delete Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteRole: async (\n      projId: string,\n      envId: string,\n      roleId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('deleteRole', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('deleteRole', 'envId', envId);\n      // verify required parameter 'roleId' is not null or undefined\n      assertParamExists('deleteRole', 'roleId', roleId);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/roles/{role_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Gets a single tenant role, if such role exists.\n     * @summary Get Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getRole: async (\n      projId: string,\n      envId: string,\n      roleId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getRole', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getRole', 'envId', envId);\n      // verify required parameter 'roleId' is not null or undefined\n      assertParamExists('getRole', 'roleId', roleId);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/roles/{role_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Lists all tenant roles.\n     * @summary List Roles\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {boolean} [includeTotalCount] Include total count in response (default to false)\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listRoles: async (\n      projId: string,\n      envId: string,\n      page?: number,\n      perPage?: number,\n      includeTotalCount?: boolean,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('listRoles', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('listRoles', 'envId', envId);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/roles`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions: Record<string, unknown> = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter: Record<string, unknown> = {};\n      const localVarQueryParameter: Record<string, unknown> = {};\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      if (includeTotalCount !== undefined) {\n        localVarQueryParameter['include_total_count'] = includeTotalCount;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * This endpoint is part of the role hierarchy feature.  Removes `parent_role_id` from the list of parent roles of role with id `role_id`. In other words, `role_id` will no longer be automatically assigned permissions that are granted to `parent_role_id`.  We can say the `role_id` **not longer extends** `parent_role_id` or **no longer inherits** from `parent_role_id`.\n     * @summary Remove Parent Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} parentRoleId Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    removeParentRole: async (\n      projId: string,\n      envId: string,\n      roleId: string,\n      parentRoleId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('removeParentRole', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('removeParentRole', 'envId', envId);\n      // verify required parameter 'roleId' is not null or undefined\n      assertParamExists('removeParentRole', 'roleId', roleId);\n      // verify required parameter 'parentRoleId' is not null or undefined\n      assertParamExists('removeParentRole', 'parentRoleId', parentRoleId);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/roles/{role_id}/parents/{parent_role_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)))\n        .replace(`{${'parent_role_id'}}`, encodeURIComponent(String(parentRoleId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Remove permissions from role.  If some of the permissions specified are already unassigned, will skip them.\n     * @summary Remove Permissions From Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {RemoveRolePermissions} removeRolePermissions\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    removePermissionsFromRole: async (\n      projId: string,\n      envId: string,\n      roleId: string,\n      removeRolePermissions: RemoveRolePermissions,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('removePermissionsFromRole', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('removePermissionsFromRole', 'envId', envId);\n      // verify required parameter 'roleId' is not null or undefined\n      assertParamExists('removePermissionsFromRole', 'roleId', roleId);\n      // verify required parameter 'removeRolePermissions' is not null or undefined\n      assertParamExists(\n        'removePermissionsFromRole',\n        'removeRolePermissions',\n        removeRolePermissions,\n      );\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/roles/{role_id}/permissions`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        removeRolePermissions,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Partially updates a tenant role. Fields that will be provided will be completely overwritten.\n     * @summary Update Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {RoleUpdate} roleUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateRole: async (\n      projId: string,\n      envId: string,\n      roleId: string,\n      roleUpdate: RoleUpdate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('updateRole', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('updateRole', 'envId', envId);\n      // verify required parameter 'roleId' is not null or undefined\n      assertParamExists('updateRole', 'roleId', roleId);\n      // verify required parameter 'roleUpdate' is not null or undefined\n      assertParamExists('updateRole', 'roleUpdate', roleUpdate);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/roles/{role_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        roleUpdate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * RolesApi - functional programming interface\n * @export\n */\nexport const RolesApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = RolesApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * This endpoint is part of the role hierarchy feature.  Makes role with id `role_id` extend the role with id `parent_role_id`. In other words, `role_id` will automatically be assigned any permissions that are granted to `parent_role_id`.  We can say the `role_id` **extends** `parent_role_id` or **inherits** from `parent_role_id`.  If `role_id` is already an ancestor of `parent_role_id`, the request will fail with HTTP 400 to prevent a cycle in the role hierarchy.\n     * @summary Add Parent Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} parentRoleId Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async addParentRole(\n      projId: string,\n      envId: string,\n      roleId: string,\n      parentRoleId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.addParentRole(\n        projId,\n        envId,\n        roleId,\n        parentRoleId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Assign permissions to role.  If some of the permissions specified are already assigned, will skip them.\n     * @summary Assign Permissions To Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {AddRolePermissions} addRolePermissions\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async assignPermissionsToRole(\n      projId: string,\n      envId: string,\n      roleId: string,\n      addRolePermissions: AddRolePermissions,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.assignPermissionsToRole(\n        projId,\n        envId,\n        roleId,\n        addRolePermissions,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Creates a new tenant role.\n     * @summary Create Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {RoleCreate} roleCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async createRole(\n      projId: string,\n      envId: string,\n      roleCreate: RoleCreate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.createRole(\n        projId,\n        envId,\n        roleCreate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Deletes a tenant role and all its related data. This includes any permissions granted to said role.\n     * @summary Delete Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async deleteRole(\n      projId: string,\n      envId: string,\n      roleId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRole(\n        projId,\n        envId,\n        roleId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Gets a single tenant role, if such role exists.\n     * @summary Get Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getRole(\n      projId: string,\n      envId: string,\n      roleId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getRole(\n        projId,\n        envId,\n        roleId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Lists all tenant roles.\n     * @summary List Roles\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {boolean} [includeTotalCount] Include total count in response (default to false)\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async listRoles(\n      projId: string,\n      envId: string,\n      page?: number,\n      perPage?: number,\n      includeTotalCount?: boolean,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (\n        axios?: AxiosInstance,\n        basePath?: string,\n      ) => AxiosPromise<Array<RoleRead> | PaginatedResultRoleRead>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.listRoles(\n        projId,\n        envId,\n        page,\n        perPage,\n        includeTotalCount,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * This endpoint is part of the role hierarchy feature.  Removes `parent_role_id` from the list of parent roles of role with id `role_id`. In other words, `role_id` will no longer be automatically assigned permissions that are granted to `parent_role_id`.  We can say the `role_id` **not longer extends** `parent_role_id` or **no longer inherits** from `parent_role_id`.\n     * @summary Remove Parent Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} parentRoleId Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async removeParentRole(\n      projId: string,\n      envId: string,\n      roleId: string,\n      parentRoleId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.removeParentRole(\n        projId,\n        envId,\n        roleId,\n        parentRoleId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Remove permissions from role.  If some of the permissions specified are already unassigned, will skip them.\n     * @summary Remove Permissions From Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {RemoveRolePermissions} removeRolePermissions\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async removePermissionsFromRole(\n      projId: string,\n      envId: string,\n      roleId: string,\n      removeRolePermissions: RemoveRolePermissions,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.removePermissionsFromRole(\n        projId,\n        envId,\n        roleId,\n        removeRolePermissions,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Partially updates a tenant role. Fields that will be provided will be completely overwritten.\n     * @summary Update Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {RoleUpdate} roleUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async updateRole(\n      projId: string,\n      envId: string,\n      roleId: string,\n      roleUpdate: RoleUpdate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.updateRole(\n        projId,\n        envId,\n        roleId,\n        roleUpdate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * RolesApi - factory interface\n * @export\n */\nexport const RolesApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = RolesApiFp(configuration);\n  return {\n    /**\n     * This endpoint is part of the role hierarchy feature.  Makes role with id `role_id` extend the role with id `parent_role_id`. In other words, `role_id` will automatically be assigned any permissions that are granted to `parent_role_id`.  We can say the `role_id` **extends** `parent_role_id` or **inherits** from `parent_role_id`.  If `role_id` is already an ancestor of `parent_role_id`, the request will fail with HTTP 400 to prevent a cycle in the role hierarchy.\n     * @summary Add Parent Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} parentRoleId Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    addParentRole(\n      projId: string,\n      envId: string,\n      roleId: string,\n      parentRoleId: string,\n      options?: any,\n    ): AxiosPromise<RoleRead> {\n      return localVarFp\n        .addParentRole(projId, envId, roleId, parentRoleId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Assign permissions to role.  If some of the permissions specified are already assigned, will skip them.\n     * @summary Assign Permissions To Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {AddRolePermissions} addRolePermissions\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    assignPermissionsToRole(\n      projId: string,\n      envId: string,\n      roleId: string,\n      addRolePermissions: AddRolePermissions,\n      options?: any,\n    ): AxiosPromise<RoleRead> {\n      return localVarFp\n        .assignPermissionsToRole(projId, envId, roleId, addRolePermissions, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Creates a new tenant role.\n     * @summary Create Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {RoleCreate} roleCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createRole(\n      projId: string,\n      envId: string,\n      roleCreate: RoleCreate,\n      options?: any,\n    ): AxiosPromise<RoleRead> {\n      return localVarFp\n        .createRole(projId, envId, roleCreate, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Deletes a tenant role and all its related data. This includes any permissions granted to said role.\n     * @summary Delete Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteRole(projId: string, envId: string, roleId: string, options?: any): AxiosPromise<void> {\n      return localVarFp\n        .deleteRole(projId, envId, roleId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Gets a single tenant role, if such role exists.\n     * @summary Get Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getRole(projId: string, envId: string, roleId: string, options?: any): AxiosPromise<RoleRead> {\n      return localVarFp\n        .getRole(projId, envId, roleId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Lists all tenant roles.\n     * @summary List Roles\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listRoles(\n      projId: string,\n      envId: string,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<Array<RoleRead> | PaginatedResultRoleRead> {\n      return localVarFp\n        .listRoles(projId, envId, page, perPage, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * This endpoint is part of the role hierarchy feature.  Removes `parent_role_id` from the list of parent roles of role with id `role_id`. In other words, `role_id` will no longer be automatically assigned permissions that are granted to `parent_role_id`.  We can say the `role_id` **not longer extends** `parent_role_id` or **no longer inherits** from `parent_role_id`.\n     * @summary Remove Parent Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} parentRoleId Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    removeParentRole(\n      projId: string,\n      envId: string,\n      roleId: string,\n      parentRoleId: string,\n      options?: any,\n    ): AxiosPromise<RoleRead> {\n      return localVarFp\n        .removeParentRole(projId, envId, roleId, parentRoleId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Remove permissions from role.  If some of the permissions specified are already unassigned, will skip them.\n     * @summary Remove Permissions From Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {RemoveRolePermissions} removeRolePermissions\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    removePermissionsFromRole(\n      projId: string,\n      envId: string,\n      roleId: string,\n      removeRolePermissions: RemoveRolePermissions,\n      options?: any,\n    ): AxiosPromise<RoleRead> {\n      return localVarFp\n        .removePermissionsFromRole(projId, envId, roleId, removeRolePermissions, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Partially updates a tenant role. Fields that will be provided will be completely overwritten.\n     * @summary Update Role\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n     * @param {RoleUpdate} roleUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateRole(\n      projId: string,\n      envId: string,\n      roleId: string,\n      roleUpdate: RoleUpdate,\n      options?: any,\n    ): AxiosPromise<RoleRead> {\n      return localVarFp\n        .updateRole(projId, envId, roleId, roleUpdate, options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for addParentRole operation in RolesApi.\n * @export\n * @interface RolesApiAddParentRoleRequest\n */\nexport interface RolesApiAddParentRoleRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiAddParentRole\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiAddParentRole\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiAddParentRole\n   */\n  readonly roleId: string;\n\n  /**\n   * Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiAddParentRole\n   */\n  readonly parentRoleId: string;\n}\n\n/**\n * Request parameters for assignPermissionsToRole operation in RolesApi.\n * @export\n * @interface RolesApiAssignPermissionsToRoleRequest\n */\nexport interface RolesApiAssignPermissionsToRoleRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiAssignPermissionsToRole\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiAssignPermissionsToRole\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiAssignPermissionsToRole\n   */\n  readonly roleId: string;\n\n  /**\n   *\n   * @type {AddRolePermissions}\n   * @memberof RolesApiAssignPermissionsToRole\n   */\n  readonly addRolePermissions: AddRolePermissions;\n}\n\n/**\n * Request parameters for createRole operation in RolesApi.\n * @export\n * @interface RolesApiCreateRoleRequest\n */\nexport interface RolesApiCreateRoleRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiCreateRole\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiCreateRole\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {RoleCreate}\n   * @memberof RolesApiCreateRole\n   */\n  readonly roleCreate: RoleCreate;\n}\n\n/**\n * Request parameters for deleteRole operation in RolesApi.\n * @export\n * @interface RolesApiDeleteRoleRequest\n */\nexport interface RolesApiDeleteRoleRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiDeleteRole\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiDeleteRole\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiDeleteRole\n   */\n  readonly roleId: string;\n}\n\n/**\n * Request parameters for getRole operation in RolesApi.\n * @export\n * @interface RolesApiGetRoleRequest\n */\nexport interface RolesApiGetRoleRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiGetRole\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiGetRole\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiGetRole\n   */\n  readonly roleId: string;\n}\n\n/**\n * Request parameters for listRoles operation in RolesApi.\n * @export\n * @interface RolesApiListRolesRequest\n */\nexport interface RolesApiListRolesRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiListRoles\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiListRoles\n   */\n  readonly envId: string;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof RolesApiListRoles\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof RolesApiListRoles\n   */\n  readonly perPage?: number;\n\n  /**\n   * Include total count in response\n   * @type {boolean}\n   * @memberof RolesApiListRoles\n   * @default false\n   */\n  readonly includeTotalCount?: boolean;\n}\n\n/**\n * Request parameters for removeParentRole operation in RolesApi.\n * @export\n * @interface RolesApiRemoveParentRoleRequest\n */\nexport interface RolesApiRemoveParentRoleRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiRemoveParentRole\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiRemoveParentRole\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiRemoveParentRole\n   */\n  readonly roleId: string;\n\n  /**\n   * Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiRemoveParentRole\n   */\n  readonly parentRoleId: string;\n}\n\n/**\n * Request parameters for removePermissionsFromRole operation in RolesApi.\n * @export\n * @interface RolesApiRemovePermissionsFromRoleRequest\n */\nexport interface RolesApiRemovePermissionsFromRoleRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiRemovePermissionsFromRole\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiRemovePermissionsFromRole\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiRemovePermissionsFromRole\n   */\n  readonly roleId: string;\n\n  /**\n   *\n   * @type {RemoveRolePermissions}\n   * @memberof RolesApiRemovePermissionsFromRole\n   */\n  readonly removeRolePermissions: RemoveRolePermissions;\n}\n\n/**\n * Request parameters for updateRole operation in RolesApi.\n * @export\n * @interface RolesApiUpdateRoleRequest\n */\nexport interface RolesApiUpdateRoleRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiUpdateRole\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiUpdateRole\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the role, or the URL-friendly key of the role (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof RolesApiUpdateRole\n   */\n  readonly roleId: string;\n\n  /**\n   *\n   * @type {RoleUpdate}\n   * @memberof RolesApiUpdateRole\n   */\n  readonly roleUpdate: RoleUpdate;\n}\n\n/**\n * RolesApi - object-oriented interface\n * @export\n * @class RolesApi\n * @extends {BaseAPI}\n */\nexport class RolesApi extends BaseAPI {\n  /**\n   * This endpoint is part of the role hierarchy feature.  Makes role with id `role_id` extend the role with id `parent_role_id`. In other words, `role_id` will automatically be assigned any permissions that are granted to `parent_role_id`.  We can say the `role_id` **extends** `parent_role_id` or **inherits** from `parent_role_id`.  If `role_id` is already an ancestor of `parent_role_id`, the request will fail with HTTP 400 to prevent a cycle in the role hierarchy.\n   * @summary Add Parent Role\n   * @param {RolesApiAddParentRoleRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RolesApi\n   */\n  public addParentRole(\n    requestParameters: RolesApiAddParentRoleRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return RolesApiFp(this.configuration)\n      .addParentRole(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.roleId,\n        requestParameters.parentRoleId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Assign permissions to role.  If some of the permissions specified are already assigned, will skip them.\n   * @summary Assign Permissions To Role\n   * @param {RolesApiAssignPermissionsToRoleRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RolesApi\n   */\n  public assignPermissionsToRole(\n    requestParameters: RolesApiAssignPermissionsToRoleRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return RolesApiFp(this.configuration)\n      .assignPermissionsToRole(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.roleId,\n        requestParameters.addRolePermissions,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Creates a new tenant role.\n   * @summary Create Role\n   * @param {RolesApiCreateRoleRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RolesApi\n   */\n  public createRole(requestParameters: RolesApiCreateRoleRequest, options?: AxiosRequestConfig) {\n    return RolesApiFp(this.configuration)\n      .createRole(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.roleCreate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Deletes a tenant role and all its related data. This includes any permissions granted to said role.\n   * @summary Delete Role\n   * @param {RolesApiDeleteRoleRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RolesApi\n   */\n  public deleteRole(requestParameters: RolesApiDeleteRoleRequest, options?: AxiosRequestConfig) {\n    return RolesApiFp(this.configuration)\n      .deleteRole(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.roleId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Gets a single tenant role, if such role exists.\n   * @summary Get Role\n   * @param {RolesApiGetRoleRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RolesApi\n   */\n  public getRole(requestParameters: RolesApiGetRoleRequest, options?: AxiosRequestConfig) {\n    return RolesApiFp(this.configuration)\n      .getRole(requestParameters.projId, requestParameters.envId, requestParameters.roleId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Lists all tenant roles.\n   * @summary List Roles\n   * @param {RolesApiListRolesRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RolesApi\n   */\n  public listRoles(requestParameters: RolesApiListRolesRequest, options?: AxiosRequestConfig) {\n    return RolesApiFp(this.configuration)\n      .listRoles(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.page,\n        requestParameters.perPage,\n        requestParameters.includeTotalCount,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * This endpoint is part of the role hierarchy feature.  Removes `parent_role_id` from the list of parent roles of role with id `role_id`. In other words, `role_id` will no longer be automatically assigned permissions that are granted to `parent_role_id`.  We can say the `role_id` **not longer extends** `parent_role_id` or **no longer inherits** from `parent_role_id`.\n   * @summary Remove Parent Role\n   * @param {RolesApiRemoveParentRoleRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RolesApi\n   */\n  public removeParentRole(\n    requestParameters: RolesApiRemoveParentRoleRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return RolesApiFp(this.configuration)\n      .removeParentRole(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.roleId,\n        requestParameters.parentRoleId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Remove permissions from role.  If some of the permissions specified are already unassigned, will skip them.\n   * @summary Remove Permissions From Role\n   * @param {RolesApiRemovePermissionsFromRoleRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RolesApi\n   */\n  public removePermissionsFromRole(\n    requestParameters: RolesApiRemovePermissionsFromRoleRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return RolesApiFp(this.configuration)\n      .removePermissionsFromRole(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.roleId,\n        requestParameters.removeRolePermissions,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Partially updates a tenant role. Fields that will be provided will be completely overwritten.\n   * @summary Update Role\n   * @param {RolesApiUpdateRoleRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RolesApi\n   */\n  public updateRole(requestParameters: RolesApiUpdateRoleRequest, options?: AxiosRequestConfig) {\n    return RolesApiFp(this.configuration)\n      .updateRole(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.roleId,\n        requestParameters.roleUpdate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Configuration } from './configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\n\nexport const BASE_PATH = 'http://localhost'.replace(/\\/+$/, '');\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n  csv: ',',\n  ssv: ' ',\n  tsv: '\\t',\n  pipes: '|',\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n  url: string;\n  options: AxiosRequestConfig;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n  protected configuration: Configuration | undefined;\n\n  constructor(\n    configuration?: Configuration,\n    protected basePath: string = BASE_PATH,\n    protected axios: AxiosInstance = globalAxios,\n  ) {\n    if (configuration) {\n      this.configuration = configuration;\n      this.basePath = configuration.basePath || this.basePath;\n    }\n  }\n}\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n  name: 'RequiredError' = 'RequiredError';\n  constructor(public field: string, msg?: string) {\n    super(msg);\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Configuration } from './configuration';\nimport { RequiredError, RequestArgs } from './base';\nimport { AxiosInstance, AxiosResponse } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com';\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (\n  functionName: string,\n  paramName: string,\n  paramValue: unknown,\n) {\n  if (paramValue === null || paramValue === undefined) {\n    throw new RequiredError(\n      paramName,\n      `Required parameter ${paramName} was null or undefined when calling ${functionName}.`,\n    );\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (\n  object: any,\n  keyParamName: string,\n  configuration?: Configuration,\n) {\n  if (configuration && configuration.apiKey) {\n    const localVarApiKeyValue =\n      typeof configuration.apiKey === 'function'\n        ? await configuration.apiKey(keyParamName)\n        : await configuration.apiKey;\n    object[keyParamName] = localVarApiKeyValue;\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n  if (configuration && (configuration.username || configuration.password)) {\n    object['auth'] = { username: configuration.username, password: configuration.password };\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n  if (configuration && configuration.accessToken) {\n    const accessToken =\n      typeof configuration.accessToken === 'function'\n        ? await configuration.accessToken()\n        : await configuration.accessToken;\n    object['Authorization'] = 'Bearer ' + accessToken;\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (\n  object: any,\n  name: string,\n  scopes: string[],\n  configuration?: Configuration,\n) {\n  if (configuration && configuration.accessToken) {\n    const localVarAccessTokenValue =\n      typeof configuration.accessToken === 'function'\n        ? await configuration.accessToken(name, scopes)\n        : await configuration.accessToken;\n    object['Authorization'] = 'Bearer ' + localVarAccessTokenValue;\n  }\n};\n\nfunction setFlattenedQueryParams(\n  urlSearchParams: URLSearchParams,\n  parameter: any,\n  key: string = '',\n): void {\n  if (typeof parameter === 'object') {\n    if (Array.isArray(parameter)) {\n      (parameter as any[]).forEach((item) => setFlattenedQueryParams(urlSearchParams, item, key));\n    } else {\n      Object.keys(parameter).forEach((currentKey) =>\n        setFlattenedQueryParams(\n          urlSearchParams,\n          parameter[currentKey],\n          `${key}${key !== '' ? '.' : ''}${currentKey}`,\n        ),\n      );\n    }\n  } else {\n    if (urlSearchParams.has(key)) {\n      urlSearchParams.append(key, parameter);\n    } else {\n      urlSearchParams.set(key, parameter);\n    }\n  }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n  const searchParams = new URLSearchParams(url.search);\n  setFlattenedQueryParams(searchParams, objects);\n  url.search = searchParams.toString();\n};\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (\n  value: any,\n  requestOptions: any,\n  configuration?: Configuration,\n) {\n  const nonString = typeof value !== 'string';\n  const needsSerialization =\n    nonString && configuration && configuration.isJsonMime\n      ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n      : nonString;\n  return needsSerialization ? JSON.stringify(value !== undefined ? value : {}) : value || '';\n};\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n  return url.pathname + url.search + url.hash;\n};\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (\n  axiosArgs: RequestArgs,\n  globalAxios: AxiosInstance,\n  BASE_PATH: string,\n  configuration?: Configuration,\n) {\n  return <T = unknown, R = AxiosResponse<T>>(\n    axios: AxiosInstance = globalAxios,\n    basePath: string = BASE_PATH,\n  ) => {\n    const axiosRequestArgs = {\n      ...axiosArgs.options,\n      url: (configuration?.basePath || basePath) + axiosArgs.url,\n    };\n    return axios.request<T, R>(axiosRequestArgs);\n  };\n};\n"],"mappings":"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","names":["globalAxios","globalAxios","BASE_PATH","globalAxios"]}