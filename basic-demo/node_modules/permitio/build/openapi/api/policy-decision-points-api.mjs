// src/openapi/api/policy-decision-points-api.ts
import globalAxios2 from "axios";

// src/openapi/base.ts
import globalAxios from "axios";
var BASE_PATH = "http://localhost".replace(/\/+$/, "");
var BaseAPI = class {
  constructor(configuration, basePath = BASE_PATH, axios = globalAxios) {
    this.basePath = basePath;
    this.axios = axios;
    if (configuration) {
      this.configuration = configuration;
      this.basePath = configuration.basePath || this.basePath;
    }
  }
};
var RequiredError = class extends Error {
  constructor(field, msg) {
    super(msg);
    this.field = field;
    this.name = "RequiredError";
  }
};

// src/openapi/common.ts
var DUMMY_BASE_URL = "https://example.com";
var assertParamExists = function(functionName, paramName, paramValue) {
  if (paramValue === null || paramValue === void 0) {
    throw new RequiredError(
      paramName,
      `Required parameter ${paramName} was null or undefined when calling ${functionName}.`
    );
  }
};
var setBearerAuthToObject = async function(object, configuration) {
  if (configuration && configuration.accessToken) {
    const accessToken = typeof configuration.accessToken === "function" ? await configuration.accessToken() : await configuration.accessToken;
    object["Authorization"] = "Bearer " + accessToken;
  }
};
function setFlattenedQueryParams(urlSearchParams, parameter, key = "") {
  if (typeof parameter === "object") {
    if (Array.isArray(parameter)) {
      parameter.forEach((item) => setFlattenedQueryParams(urlSearchParams, item, key));
    } else {
      Object.keys(parameter).forEach(
        (currentKey) => setFlattenedQueryParams(
          urlSearchParams,
          parameter[currentKey],
          `${key}${key !== "" ? "." : ""}${currentKey}`
        )
      );
    }
  } else {
    if (urlSearchParams.has(key)) {
      urlSearchParams.append(key, parameter);
    } else {
      urlSearchParams.set(key, parameter);
    }
  }
}
var setSearchParams = function(url, ...objects) {
  const searchParams = new URLSearchParams(url.search);
  setFlattenedQueryParams(searchParams, objects);
  url.search = searchParams.toString();
};
var serializeDataIfNeeded = function(value, requestOptions, configuration) {
  const nonString = typeof value !== "string";
  const needsSerialization = nonString && configuration && configuration.isJsonMime ? configuration.isJsonMime(requestOptions.headers["Content-Type"]) : nonString;
  return needsSerialization ? JSON.stringify(value !== void 0 ? value : {}) : value || "";
};
var toPathString = function(url) {
  return url.pathname + url.search + url.hash;
};
var createRequestFunction = function(axiosArgs, globalAxios3, BASE_PATH2, configuration) {
  return (axios = globalAxios3, basePath = BASE_PATH2) => {
    const axiosRequestArgs = {
      ...axiosArgs.options,
      url: ((configuration == null ? void 0 : configuration.basePath) || basePath) + axiosArgs.url
    };
    return axios.request(axiosRequestArgs);
  };
};

// src/openapi/api/policy-decision-points-api.ts
var PolicyDecisionPointsApiAxiosParamCreator = function(configuration) {
  return {
    /**
     * Gets the configuration values for the currently authenticated PDP container.  The PDP authenticates with an API key scoped to a given Permit.io environment. The system identifies the PDP via its API key and then returns all the configuration values required for the container to run correctly.  The config values returned are considered \"overrides\", meaning they are overriding any default values given to the container by the user.
     * @summary Get connected PDP configuration and push state
     * @param {PDPStateUpdate} pDPStateUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthenticatingPdpConfigValues: async (pDPStateUpdate, options = {}) => {
      assertParamExists("getAuthenticatingPdpConfigValues", "pDPStateUpdate", pDPStateUpdate);
      const localVarPath = `/v2/pdps/me/config`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        pDPStateUpdate,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Gets the configuration values for the currently authenticated PDP container.  The PDP authenticates with an API key scoped to a given Permit.io environment. The system identifies the PDP via its API key and then returns all the configuration values required for the container to run correctly.  The config values returned are considered \"overrides\", meaning they are overriding any default values given to the container by the user.
     * @summary Get connected PDP configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthenticatingPdpConfigValuesLegacy: async (options = {}) => {
      const localVarPath = `/v2/pdps/me/config`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Gets the configuration values for the PDP container with id `pdp_id`.  The config values returned are considered \"overrides\", meaning they are overriding any default values given to the container by the user.
     * @summary Get PDP configuration
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} pdpId The unique id of the pdp
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPdpConfigValues: async (projId, envId, pdpId, options = {}) => {
      assertParamExists("getPdpConfigValues", "projId", projId);
      assertParamExists("getPdpConfigValues", "envId", envId);
      assertParamExists("getPdpConfigValues", "pdpId", pdpId);
      const localVarPath = `/v2/pdps/{proj_id}/{env_id}/configs/{pdp_id}/values`.replace(`{${"proj_id"}}`, encodeURIComponent(String(projId))).replace(`{${"env_id"}}`, encodeURIComponent(String(envId))).replace(`{${"pdp_id"}}`, encodeURIComponent(String(pdpId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary List PDP configurations
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPdpConfigs: async (projId, envId, page, perPage, options = {}) => {
      assertParamExists("listPdpConfigs", "projId", projId);
      assertParamExists("listPdpConfigs", "envId", envId);
      const localVarPath = `/v2/pdps/{proj_id}/{env_id}/configs`.replace(`{${"proj_id"}}`, encodeURIComponent(String(projId))).replace(`{${"env_id"}}`, encodeURIComponent(String(envId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (perPage !== void 0) {
        localVarQueryParameter["per_page"] = perPage;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary Accept a PDP data callback
     * @param {string} xPermitInstanceId
     * @param {DataUpdateReport} dataUpdateReport
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    opalDataCallback: async (xPermitInstanceId, dataUpdateReport, options = {}) => {
      assertParamExists("opalDataCallback", "xPermitInstanceId", xPermitInstanceId);
      assertParamExists("opalDataCallback", "dataUpdateReport", dataUpdateReport);
      const localVarPath = `/v2/pdps/me/opal_data_callback`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (xPermitInstanceId != null) {
        localVarHeaderParameter["x-permit-instance-id"] = String(xPermitInstanceId);
      }
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        dataUpdateReport,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Push a PDP state update.
     * @summary Push PDP state
     * @param {PDPStateUpdate} pDPStateUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pushPdpState: async (pDPStateUpdate, options = {}) => {
      assertParamExists("pushPdpState", "pDPStateUpdate", pDPStateUpdate);
      const localVarPath = `/v2/pdps/me/state`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        pDPStateUpdate,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Rotates the API key of the PDP container with id `pdp_id`.  The rotation of the API key revokes the old API key and issues a new API key to the PDP.
     * @summary Rotate PDP API Key
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} pdpId The unique id of the pdp
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rotatePdpApiKey: async (projId, envId, pdpId, options = {}) => {
      assertParamExists("rotatePdpApiKey", "projId", projId);
      assertParamExists("rotatePdpApiKey", "envId", envId);
      assertParamExists("rotatePdpApiKey", "pdpId", pdpId);
      const localVarPath = `/v2/pdps/{proj_id}/{env_id}/configs/{pdp_id}/rotate-api-key`.replace(`{${"proj_id"}}`, encodeURIComponent(String(projId))).replace(`{${"env_id"}}`, encodeURIComponent(String(envId))).replace(`{${"pdp_id"}}`, encodeURIComponent(String(pdpId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
var PolicyDecisionPointsApiFp = function(configuration) {
  const localVarAxiosParamCreator = PolicyDecisionPointsApiAxiosParamCreator(configuration);
  return {
    /**
     * Gets the configuration values for the currently authenticated PDP container.  The PDP authenticates with an API key scoped to a given Permit.io environment. The system identifies the PDP via its API key and then returns all the configuration values required for the container to run correctly.  The config values returned are considered \"overrides\", meaning they are overriding any default values given to the container by the user.
     * @summary Get connected PDP configuration and push state
     * @param {PDPStateUpdate} pDPStateUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAuthenticatingPdpConfigValues(pDPStateUpdate, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthenticatingPdpConfigValues(
        pDPStateUpdate,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    },
    /**
     * Gets the configuration values for the currently authenticated PDP container.  The PDP authenticates with an API key scoped to a given Permit.io environment. The system identifies the PDP via its API key and then returns all the configuration values required for the container to run correctly.  The config values returned are considered \"overrides\", meaning they are overriding any default values given to the container by the user.
     * @summary Get connected PDP configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAuthenticatingPdpConfigValuesLegacy(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthenticatingPdpConfigValuesLegacy(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    },
    /**
     * Gets the configuration values for the PDP container with id `pdp_id`.  The config values returned are considered \"overrides\", meaning they are overriding any default values given to the container by the user.
     * @summary Get PDP configuration
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} pdpId The unique id of the pdp
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPdpConfigValues(projId, envId, pdpId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPdpConfigValues(
        projId,
        envId,
        pdpId,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    },
    /**
     *
     * @summary List PDP configurations
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listPdpConfigs(projId, envId, page, perPage, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listPdpConfigs(
        projId,
        envId,
        page,
        perPage,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Accept a PDP data callback
     * @param {string} xPermitInstanceId
     * @param {DataUpdateReport} dataUpdateReport
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async opalDataCallback(xPermitInstanceId, dataUpdateReport, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.opalDataCallback(
        xPermitInstanceId,
        dataUpdateReport,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    },
    /**
     * Push a PDP state update.
     * @summary Push PDP state
     * @param {PDPStateUpdate} pDPStateUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async pushPdpState(pDPStateUpdate, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.pushPdpState(
        pDPStateUpdate,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    },
    /**
     * Rotates the API key of the PDP container with id `pdp_id`.  The rotation of the API key revokes the old API key and issues a new API key to the PDP.
     * @summary Rotate PDP API Key
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} pdpId The unique id of the pdp
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async rotatePdpApiKey(projId, envId, pdpId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.rotatePdpApiKey(
        projId,
        envId,
        pdpId,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    }
  };
};
var PolicyDecisionPointsApiFactory = function(configuration, basePath, axios) {
  const localVarFp = PolicyDecisionPointsApiFp(configuration);
  return {
    /**
     * Gets the configuration values for the currently authenticated PDP container.  The PDP authenticates with an API key scoped to a given Permit.io environment. The system identifies the PDP via its API key and then returns all the configuration values required for the container to run correctly.  The config values returned are considered \"overrides\", meaning they are overriding any default values given to the container by the user.
     * @summary Get connected PDP configuration and push state
     * @param {PDPStateUpdate} pDPStateUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthenticatingPdpConfigValues(pDPStateUpdate, options) {
      return localVarFp.getAuthenticatingPdpConfigValues(pDPStateUpdate, options).then((request) => request(axios, basePath));
    },
    /**
     * Gets the configuration values for the currently authenticated PDP container.  The PDP authenticates with an API key scoped to a given Permit.io environment. The system identifies the PDP via its API key and then returns all the configuration values required for the container to run correctly.  The config values returned are considered \"overrides\", meaning they are overriding any default values given to the container by the user.
     * @summary Get connected PDP configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthenticatingPdpConfigValuesLegacy(options) {
      return localVarFp.getAuthenticatingPdpConfigValuesLegacy(options).then((request) => request(axios, basePath));
    },
    /**
     * Gets the configuration values for the PDP container with id `pdp_id`.  The config values returned are considered \"overrides\", meaning they are overriding any default values given to the container by the user.
     * @summary Get PDP configuration
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} pdpId The unique id of the pdp
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPdpConfigValues(projId, envId, pdpId, options) {
      return localVarFp.getPdpConfigValues(projId, envId, pdpId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary List PDP configurations
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPdpConfigs(projId, envId, page, perPage, options) {
      return localVarFp.listPdpConfigs(projId, envId, page, perPage, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Accept a PDP data callback
     * @param {string} xPermitInstanceId
     * @param {DataUpdateReport} dataUpdateReport
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    opalDataCallback(xPermitInstanceId, dataUpdateReport, options) {
      return localVarFp.opalDataCallback(xPermitInstanceId, dataUpdateReport, options).then((request) => request(axios, basePath));
    },
    /**
     * Push a PDP state update.
     * @summary Push PDP state
     * @param {PDPStateUpdate} pDPStateUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pushPdpState(pDPStateUpdate, options) {
      return localVarFp.pushPdpState(pDPStateUpdate, options).then((request) => request(axios, basePath));
    },
    /**
     * Rotates the API key of the PDP container with id `pdp_id`.  The rotation of the API key revokes the old API key and issues a new API key to the PDP.
     * @summary Rotate PDP API Key
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} pdpId The unique id of the pdp
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rotatePdpApiKey(projId, envId, pdpId, options) {
      return localVarFp.rotatePdpApiKey(projId, envId, pdpId, options).then((request) => request(axios, basePath));
    }
  };
};
var PolicyDecisionPointsApi = class extends BaseAPI {
  /**
   * Gets the configuration values for the currently authenticated PDP container.  The PDP authenticates with an API key scoped to a given Permit.io environment. The system identifies the PDP via its API key and then returns all the configuration values required for the container to run correctly.  The config values returned are considered \"overrides\", meaning they are overriding any default values given to the container by the user.
   * @summary Get connected PDP configuration and push state
   * @param {PolicyDecisionPointsApiGetAuthenticatingPdpConfigValuesRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PolicyDecisionPointsApi
   */
  getAuthenticatingPdpConfigValues(requestParameters, options) {
    return PolicyDecisionPointsApiFp(this.configuration).getAuthenticatingPdpConfigValues(requestParameters.pDPStateUpdate, options).then((request) => request(this.axios, this.basePath));
  }
  /**
   * Gets the configuration values for the currently authenticated PDP container.  The PDP authenticates with an API key scoped to a given Permit.io environment. The system identifies the PDP via its API key and then returns all the configuration values required for the container to run correctly.  The config values returned are considered \"overrides\", meaning they are overriding any default values given to the container by the user.
   * @summary Get connected PDP configuration
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PolicyDecisionPointsApi
   */
  getAuthenticatingPdpConfigValuesLegacy(options) {
    return PolicyDecisionPointsApiFp(this.configuration).getAuthenticatingPdpConfigValuesLegacy(options).then((request) => request(this.axios, this.basePath));
  }
  /**
   * Gets the configuration values for the PDP container with id `pdp_id`.  The config values returned are considered \"overrides\", meaning they are overriding any default values given to the container by the user.
   * @summary Get PDP configuration
   * @param {PolicyDecisionPointsApiGetPdpConfigValuesRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PolicyDecisionPointsApi
   */
  getPdpConfigValues(requestParameters, options) {
    return PolicyDecisionPointsApiFp(this.configuration).getPdpConfigValues(
      requestParameters.projId,
      requestParameters.envId,
      requestParameters.pdpId,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary List PDP configurations
   * @param {PolicyDecisionPointsApiListPdpConfigsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PolicyDecisionPointsApi
   */
  listPdpConfigs(requestParameters, options) {
    return PolicyDecisionPointsApiFp(this.configuration).listPdpConfigs(
      requestParameters.projId,
      requestParameters.envId,
      requestParameters.page,
      requestParameters.perPage,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Accept a PDP data callback
   * @param {PolicyDecisionPointsApiOpalDataCallbackRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PolicyDecisionPointsApi
   */
  opalDataCallback(requestParameters, options) {
    return PolicyDecisionPointsApiFp(this.configuration).opalDataCallback(
      requestParameters.xPermitInstanceId,
      requestParameters.dataUpdateReport,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  /**
   * Push a PDP state update.
   * @summary Push PDP state
   * @param {PolicyDecisionPointsApiPushPdpStateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PolicyDecisionPointsApi
   */
  pushPdpState(requestParameters, options) {
    return PolicyDecisionPointsApiFp(this.configuration).pushPdpState(requestParameters.pDPStateUpdate, options).then((request) => request(this.axios, this.basePath));
  }
  /**
   * Rotates the API key of the PDP container with id `pdp_id`.  The rotation of the API key revokes the old API key and issues a new API key to the PDP.
   * @summary Rotate PDP API Key
   * @param {PolicyDecisionPointsApiRotatePdpApiKeyRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PolicyDecisionPointsApi
   */
  rotatePdpApiKey(requestParameters, options) {
    return PolicyDecisionPointsApiFp(this.configuration).rotatePdpApiKey(
      requestParameters.projId,
      requestParameters.envId,
      requestParameters.pdpId,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
};
export {
  PolicyDecisionPointsApi,
  PolicyDecisionPointsApiAxiosParamCreator,
  PolicyDecisionPointsApiFactory,
  PolicyDecisionPointsApiFp
};
//# sourceMappingURL=policy-decision-points-api.mjs.map