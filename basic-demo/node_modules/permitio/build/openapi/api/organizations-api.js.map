{"version":3,"sources":["../../../src/openapi/api/organizations-api.ts","../../../src/openapi/base.ts","../../../src/openapi/common.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n// @ts-ignore\nimport { InviteCreate } from '../types';\n// @ts-ignore\nimport { InviteRead } from '../types';\n// @ts-ignore\nimport { MultiInviteResult } from '../types';\n// @ts-ignore\nimport { OrganizationCreate } from '../types';\n// @ts-ignore\nimport { OrganizationRead } from '../types';\n// @ts-ignore\nimport { OrganizationReadWithAPIKey } from '../types';\n// @ts-ignore\nimport { OrganizationUpdate } from '../types';\n/**\n * OrganizationsApi - axios parameter creator\n * @export\n */\nexport const OrganizationsApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     * Cancels an invite that was sent to a new member.\n     * @summary Cancel Invite\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} inviteId Id of the invite to cancel\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    cancelInvite: async (\n      orgId: string,\n      inviteId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('cancelInvite', 'orgId', orgId);\n      // verify required parameter 'inviteId' is not null or undefined\n      assertParamExists('cancelInvite', 'inviteId', inviteId);\n      const localVarPath = `/v2/orgs/{org_id}/invites/{invite_id}`\n        .replace(`{${'org_id'}}`, encodeURIComponent(String(orgId)))\n        .replace(`{${'invite_id'}}`, encodeURIComponent(String(inviteId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Creates a new organization that will be owned by the authenticated actor (i.e: human team member or api key).\n     * @summary Create Organization\n     * @param {OrganizationCreate} organizationCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createOrganization: async (\n      organizationCreate: OrganizationCreate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'organizationCreate' is not null or undefined\n      assertParamExists('createOrganization', 'organizationCreate', organizationCreate);\n      const localVarPath = `/v2/orgs`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        organizationCreate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Deletes an organization (Permit.io account) and all its related data.\n     * @summary Delete Organization\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteOrganization: async (\n      orgId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('deleteOrganization', 'orgId', orgId);\n      const localVarPath = `/v2/orgs/{org_id}`.replace(\n        `{${'org_id'}}`,\n        encodeURIComponent(String(orgId)),\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.\n     * @summary Get Active Organization\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getActiveOrganization: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n      const localVarPath = `/v2/orgs/active/org`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.\n     * @summary Get Organization\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getOrganization: async (\n      orgId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('getOrganization', 'orgId', orgId);\n      const localVarPath = `/v2/orgs/{org_id}`.replace(\n        `{${'org_id'}}`,\n        encodeURIComponent(String(orgId)),\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Invite new members into the organization.\n     * @summary Invite Members To Organization\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {Array<InviteCreate>} inviteCreate\n     * @param {string} [inviterName]\n     * @param {string} [inviterEmail]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    inviteMembersToOrganization: async (\n      orgId: string,\n      inviteCreate: Array<InviteCreate>,\n      inviterName?: string,\n      inviterEmail?: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('inviteMembersToOrganization', 'orgId', orgId);\n      // verify required parameter 'inviteCreate' is not null or undefined\n      assertParamExists('inviteMembersToOrganization', 'inviteCreate', inviteCreate);\n      const localVarPath = `/v2/orgs/{org_id}/invites`.replace(\n        `{${'org_id'}}`,\n        encodeURIComponent(String(orgId)),\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (inviterName !== undefined) {\n        localVarQueryParameter['inviter_name'] = inviterName;\n      }\n\n      if (inviterEmail !== undefined) {\n        localVarQueryParameter['inviter_email'] = inviterEmail;\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        inviteCreate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Lists pending organization invites\n     * @summary List Organization Invites\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listOrganizationInvites: async (\n      orgId: string,\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('listOrganizationInvites', 'orgId', orgId);\n      const localVarPath = `/v2/orgs/{org_id}/invites`.replace(\n        `{${'org_id'}}`,\n        encodeURIComponent(String(orgId)),\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Lists all the organizations that can be accessed by the authenticated actor (i.e: human team member or api key).\n     * @summary List Organizations\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listOrganizations: async (\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/v2/orgs`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Updates the organization\\'s profile.\n     * @summary Update Organization\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {OrganizationUpdate} organizationUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateOrganization: async (\n      orgId: string,\n      organizationUpdate: OrganizationUpdate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('updateOrganization', 'orgId', orgId);\n      // verify required parameter 'organizationUpdate' is not null or undefined\n      assertParamExists('updateOrganization', 'organizationUpdate', organizationUpdate);\n      const localVarPath = `/v2/orgs/{org_id}`.replace(\n        `{${'org_id'}}`,\n        encodeURIComponent(String(orgId)),\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        organizationUpdate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * OrganizationsApi - functional programming interface\n * @export\n */\nexport const OrganizationsApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = OrganizationsApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * Cancels an invite that was sent to a new member.\n     * @summary Cancel Invite\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} inviteId Id of the invite to cancel\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async cancelInvite(\n      orgId: string,\n      inviteId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.cancelInvite(\n        orgId,\n        inviteId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Creates a new organization that will be owned by the authenticated actor (i.e: human team member or api key).\n     * @summary Create Organization\n     * @param {OrganizationCreate} organizationCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async createOrganization(\n      organizationCreate: OrganizationCreate,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationReadWithAPIKey>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.createOrganization(\n        organizationCreate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Deletes an organization (Permit.io account) and all its related data.\n     * @summary Delete Organization\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async deleteOrganization(\n      orgId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrganization(orgId, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.\n     * @summary Get Active Organization\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getActiveOrganization(\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getActiveOrganization(options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.\n     * @summary Get Organization\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getOrganization(\n      orgId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganization(orgId, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Invite new members into the organization.\n     * @summary Invite Members To Organization\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {Array<InviteCreate>} inviteCreate\n     * @param {string} [inviterName]\n     * @param {string} [inviterEmail]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async inviteMembersToOrganization(\n      orgId: string,\n      inviteCreate: Array<InviteCreate>,\n      inviterName?: string,\n      inviterEmail?: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MultiInviteResult>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.inviteMembersToOrganization(\n        orgId,\n        inviteCreate,\n        inviterName,\n        inviterEmail,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Lists pending organization invites\n     * @summary List Organization Invites\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async listOrganizationInvites(\n      orgId: string,\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InviteRead>>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.listOrganizationInvites(\n        orgId,\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Lists all the organizations that can be accessed by the authenticated actor (i.e: human team member or api key).\n     * @summary List Organizations\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async listOrganizations(\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrganizationRead>>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.listOrganizations(\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Updates the organization\\'s profile.\n     * @summary Update Organization\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {OrganizationUpdate} organizationUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async updateOrganization(\n      orgId: string,\n      organizationUpdate: OrganizationUpdate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrganization(\n        orgId,\n        organizationUpdate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * OrganizationsApi - factory interface\n * @export\n */\nexport const OrganizationsApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = OrganizationsApiFp(configuration);\n  return {\n    /**\n     * Cancels an invite that was sent to a new member.\n     * @summary Cancel Invite\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} inviteId Id of the invite to cancel\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    cancelInvite(orgId: string, inviteId: string, options?: any): AxiosPromise<void> {\n      return localVarFp\n        .cancelInvite(orgId, inviteId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Creates a new organization that will be owned by the authenticated actor (i.e: human team member or api key).\n     * @summary Create Organization\n     * @param {OrganizationCreate} organizationCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createOrganization(\n      organizationCreate: OrganizationCreate,\n      options?: any,\n    ): AxiosPromise<OrganizationReadWithAPIKey> {\n      return localVarFp\n        .createOrganization(organizationCreate, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Deletes an organization (Permit.io account) and all its related data.\n     * @summary Delete Organization\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteOrganization(orgId: string, options?: any): AxiosPromise<void> {\n      return localVarFp\n        .deleteOrganization(orgId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.\n     * @summary Get Active Organization\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getActiveOrganization(options?: any): AxiosPromise<OrganizationRead> {\n      return localVarFp.getActiveOrganization(options).then((request) => request(axios, basePath));\n    },\n    /**\n     * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.\n     * @summary Get Organization\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getOrganization(orgId: string, options?: any): AxiosPromise<OrganizationRead> {\n      return localVarFp.getOrganization(orgId, options).then((request) => request(axios, basePath));\n    },\n    /**\n     * Invite new members into the organization.\n     * @summary Invite Members To Organization\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {Array<InviteCreate>} inviteCreate\n     * @param {string} [inviterName]\n     * @param {string} [inviterEmail]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    inviteMembersToOrganization(\n      orgId: string,\n      inviteCreate: Array<InviteCreate>,\n      inviterName?: string,\n      inviterEmail?: string,\n      options?: any,\n    ): AxiosPromise<MultiInviteResult> {\n      return localVarFp\n        .inviteMembersToOrganization(orgId, inviteCreate, inviterName, inviterEmail, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Lists pending organization invites\n     * @summary List Organization Invites\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listOrganizationInvites(\n      orgId: string,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<Array<InviteRead>> {\n      return localVarFp\n        .listOrganizationInvites(orgId, page, perPage, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Lists all the organizations that can be accessed by the authenticated actor (i.e: human team member or api key).\n     * @summary List Organizations\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listOrganizations(\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<Array<OrganizationRead>> {\n      return localVarFp\n        .listOrganizations(page, perPage, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Updates the organization\\'s profile.\n     * @summary Update Organization\n     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n     * @param {OrganizationUpdate} organizationUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateOrganization(\n      orgId: string,\n      organizationUpdate: OrganizationUpdate,\n      options?: any,\n    ): AxiosPromise<OrganizationRead> {\n      return localVarFp\n        .updateOrganization(orgId, organizationUpdate, options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for cancelInvite operation in OrganizationsApi.\n * @export\n * @interface OrganizationsApiCancelInviteRequest\n */\nexport interface OrganizationsApiCancelInviteRequest {\n  /**\n   * Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OrganizationsApiCancelInvite\n   */\n  readonly orgId: string;\n\n  /**\n   * Id of the invite to cancel\n   * @type {string}\n   * @memberof OrganizationsApiCancelInvite\n   */\n  readonly inviteId: string;\n}\n\n/**\n * Request parameters for createOrganization operation in OrganizationsApi.\n * @export\n * @interface OrganizationsApiCreateOrganizationRequest\n */\nexport interface OrganizationsApiCreateOrganizationRequest {\n  /**\n   *\n   * @type {OrganizationCreate}\n   * @memberof OrganizationsApiCreateOrganization\n   */\n  readonly organizationCreate: OrganizationCreate;\n}\n\n/**\n * Request parameters for deleteOrganization operation in OrganizationsApi.\n * @export\n * @interface OrganizationsApiDeleteOrganizationRequest\n */\nexport interface OrganizationsApiDeleteOrganizationRequest {\n  /**\n   * Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OrganizationsApiDeleteOrganization\n   */\n  readonly orgId: string;\n}\n\n/**\n * Request parameters for getOrganization operation in OrganizationsApi.\n * @export\n * @interface OrganizationsApiGetOrganizationRequest\n */\nexport interface OrganizationsApiGetOrganizationRequest {\n  /**\n   * Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OrganizationsApiGetOrganization\n   */\n  readonly orgId: string;\n}\n\n/**\n * Request parameters for inviteMembersToOrganization operation in OrganizationsApi.\n * @export\n * @interface OrganizationsApiInviteMembersToOrganizationRequest\n */\nexport interface OrganizationsApiInviteMembersToOrganizationRequest {\n  /**\n   * Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OrganizationsApiInviteMembersToOrganization\n   */\n  readonly orgId: string;\n\n  /**\n   *\n   * @type {Array<InviteCreate>}\n   * @memberof OrganizationsApiInviteMembersToOrganization\n   */\n  readonly inviteCreate: Array<InviteCreate>;\n\n  /**\n   *\n   * @type {string}\n   * @memberof OrganizationsApiInviteMembersToOrganization\n   */\n  readonly inviterName?: string;\n\n  /**\n   *\n   * @type {string}\n   * @memberof OrganizationsApiInviteMembersToOrganization\n   */\n  readonly inviterEmail?: string;\n}\n\n/**\n * Request parameters for listOrganizationInvites operation in OrganizationsApi.\n * @export\n * @interface OrganizationsApiListOrganizationInvitesRequest\n */\nexport interface OrganizationsApiListOrganizationInvitesRequest {\n  /**\n   * Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OrganizationsApiListOrganizationInvites\n   */\n  readonly orgId: string;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof OrganizationsApiListOrganizationInvites\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof OrganizationsApiListOrganizationInvites\n   */\n  readonly perPage?: number;\n}\n\n/**\n * Request parameters for listOrganizations operation in OrganizationsApi.\n * @export\n * @interface OrganizationsApiListOrganizationsRequest\n */\nexport interface OrganizationsApiListOrganizationsRequest {\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof OrganizationsApiListOrganizations\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof OrganizationsApiListOrganizations\n   */\n  readonly perPage?: number;\n}\n\n/**\n * Request parameters for updateOrganization operation in OrganizationsApi.\n * @export\n * @interface OrganizationsApiUpdateOrganizationRequest\n */\nexport interface OrganizationsApiUpdateOrganizationRequest {\n  /**\n   * Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof OrganizationsApiUpdateOrganization\n   */\n  readonly orgId: string;\n\n  /**\n   *\n   * @type {OrganizationUpdate}\n   * @memberof OrganizationsApiUpdateOrganization\n   */\n  readonly organizationUpdate: OrganizationUpdate;\n}\n\n/**\n * OrganizationsApi - object-oriented interface\n * @export\n * @class OrganizationsApi\n * @extends {BaseAPI}\n */\nexport class OrganizationsApi extends BaseAPI {\n  /**\n   * Cancels an invite that was sent to a new member.\n   * @summary Cancel Invite\n   * @param {OrganizationsApiCancelInviteRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OrganizationsApi\n   */\n  public cancelInvite(\n    requestParameters: OrganizationsApiCancelInviteRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return OrganizationsApiFp(this.configuration)\n      .cancelInvite(requestParameters.orgId, requestParameters.inviteId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Creates a new organization that will be owned by the authenticated actor (i.e: human team member or api key).\n   * @summary Create Organization\n   * @param {OrganizationsApiCreateOrganizationRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OrganizationsApi\n   */\n  public createOrganization(\n    requestParameters: OrganizationsApiCreateOrganizationRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return OrganizationsApiFp(this.configuration)\n      .createOrganization(requestParameters.organizationCreate, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Deletes an organization (Permit.io account) and all its related data.\n   * @summary Delete Organization\n   * @param {OrganizationsApiDeleteOrganizationRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OrganizationsApi\n   */\n  public deleteOrganization(\n    requestParameters: OrganizationsApiDeleteOrganizationRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return OrganizationsApiFp(this.configuration)\n      .deleteOrganization(requestParameters.orgId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.\n   * @summary Get Active Organization\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OrganizationsApi\n   */\n  public getActiveOrganization(options?: AxiosRequestConfig) {\n    return OrganizationsApiFp(this.configuration)\n      .getActiveOrganization(options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.\n   * @summary Get Organization\n   * @param {OrganizationsApiGetOrganizationRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OrganizationsApi\n   */\n  public getOrganization(\n    requestParameters: OrganizationsApiGetOrganizationRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return OrganizationsApiFp(this.configuration)\n      .getOrganization(requestParameters.orgId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Invite new members into the organization.\n   * @summary Invite Members To Organization\n   * @param {OrganizationsApiInviteMembersToOrganizationRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OrganizationsApi\n   */\n  public inviteMembersToOrganization(\n    requestParameters: OrganizationsApiInviteMembersToOrganizationRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return OrganizationsApiFp(this.configuration)\n      .inviteMembersToOrganization(\n        requestParameters.orgId,\n        requestParameters.inviteCreate,\n        requestParameters.inviterName,\n        requestParameters.inviterEmail,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Lists pending organization invites\n   * @summary List Organization Invites\n   * @param {OrganizationsApiListOrganizationInvitesRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OrganizationsApi\n   */\n  public listOrganizationInvites(\n    requestParameters: OrganizationsApiListOrganizationInvitesRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return OrganizationsApiFp(this.configuration)\n      .listOrganizationInvites(\n        requestParameters.orgId,\n        requestParameters.page,\n        requestParameters.perPage,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Lists all the organizations that can be accessed by the authenticated actor (i.e: human team member or api key).\n   * @summary List Organizations\n   * @param {OrganizationsApiListOrganizationsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OrganizationsApi\n   */\n  public listOrganizations(\n    requestParameters: OrganizationsApiListOrganizationsRequest = {},\n    options?: AxiosRequestConfig,\n  ) {\n    return OrganizationsApiFp(this.configuration)\n      .listOrganizations(requestParameters.page, requestParameters.perPage, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Updates the organization\\'s profile.\n   * @summary Update Organization\n   * @param {OrganizationsApiUpdateOrganizationRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OrganizationsApi\n   */\n  public updateOrganization(\n    requestParameters: OrganizationsApiUpdateOrganizationRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return OrganizationsApiFp(this.configuration)\n      .updateOrganization(requestParameters.orgId, requestParameters.organizationUpdate, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Configuration } from './configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\n\nexport const BASE_PATH = 'http://localhost'.replace(/\\/+$/, '');\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n  csv: ',',\n  ssv: ' ',\n  tsv: '\\t',\n  pipes: '|',\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n  url: string;\n  options: AxiosRequestConfig;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n  protected configuration: Configuration | undefined;\n\n  constructor(\n    configuration?: Configuration,\n    protected basePath: string = BASE_PATH,\n    protected axios: AxiosInstance = globalAxios,\n  ) {\n    if (configuration) {\n      this.configuration = configuration;\n      this.basePath = configuration.basePath || this.basePath;\n    }\n  }\n}\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n  name: 'RequiredError' = 'RequiredError';\n  constructor(public field: string, msg?: string) {\n    super(msg);\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Configuration } from './configuration';\nimport { RequiredError, RequestArgs } from './base';\nimport { AxiosInstance, AxiosResponse } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com';\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (\n  functionName: string,\n  paramName: string,\n  paramValue: unknown,\n) {\n  if (paramValue === null || paramValue === undefined) {\n    throw new RequiredError(\n      paramName,\n      `Required parameter ${paramName} was null or undefined when calling ${functionName}.`,\n    );\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (\n  object: any,\n  keyParamName: string,\n  configuration?: Configuration,\n) {\n  if (configuration && configuration.apiKey) {\n    const localVarApiKeyValue =\n      typeof configuration.apiKey === 'function'\n        ? await configuration.apiKey(keyParamName)\n        : await configuration.apiKey;\n    object[keyParamName] = localVarApiKeyValue;\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n  if (configuration && (configuration.username || configuration.password)) {\n    object['auth'] = { username: configuration.username, password: configuration.password };\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n  if (configuration && configuration.accessToken) {\n    const accessToken =\n      typeof configuration.accessToken === 'function'\n        ? await configuration.accessToken()\n        : await configuration.accessToken;\n    object['Authorization'] = 'Bearer ' + accessToken;\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (\n  object: any,\n  name: string,\n  scopes: string[],\n  configuration?: Configuration,\n) {\n  if (configuration && configuration.accessToken) {\n    const localVarAccessTokenValue =\n      typeof configuration.accessToken === 'function'\n        ? await configuration.accessToken(name, scopes)\n        : await configuration.accessToken;\n    object['Authorization'] = 'Bearer ' + localVarAccessTokenValue;\n  }\n};\n\nfunction setFlattenedQueryParams(\n  urlSearchParams: URLSearchParams,\n  parameter: any,\n  key: string = '',\n): void {\n  if (typeof parameter === 'object') {\n    if (Array.isArray(parameter)) {\n      (parameter as any[]).forEach((item) => setFlattenedQueryParams(urlSearchParams, item, key));\n    } else {\n      Object.keys(parameter).forEach((currentKey) =>\n        setFlattenedQueryParams(\n          urlSearchParams,\n          parameter[currentKey],\n          `${key}${key !== '' ? '.' : ''}${currentKey}`,\n        ),\n      );\n    }\n  } else {\n    if (urlSearchParams.has(key)) {\n      urlSearchParams.append(key, parameter);\n    } else {\n      urlSearchParams.set(key, parameter);\n    }\n  }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n  const searchParams = new URLSearchParams(url.search);\n  setFlattenedQueryParams(searchParams, objects);\n  url.search = searchParams.toString();\n};\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (\n  value: any,\n  requestOptions: any,\n  configuration?: Configuration,\n) {\n  const nonString = typeof value !== 'string';\n  const needsSerialization =\n    nonString && configuration && configuration.isJsonMime\n      ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n      : nonString;\n  return needsSerialization ? JSON.stringify(value !== undefined ? value : {}) : value || '';\n};\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n  return url.pathname + url.search + url.hash;\n};\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (\n  axiosArgs: RequestArgs,\n  globalAxios: AxiosInstance,\n  BASE_PATH: string,\n  configuration?: Configuration,\n) {\n  return <T = unknown, R = AxiosResponse<T>>(\n    axios: AxiosInstance = globalAxios,\n    basePath: string = BASE_PATH,\n  ) => {\n    const axiosRequestArgs = {\n      ...axiosArgs.options,\n      url: (configuration?.basePath || basePath) + axiosArgs.url,\n    };\n    return axios.request<T, R>(axiosRequestArgs);\n  };\n};\n"],"mappings":"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","names":["import_axios","globalAxios","globalAxios","BASE_PATH","globalAxios"]}