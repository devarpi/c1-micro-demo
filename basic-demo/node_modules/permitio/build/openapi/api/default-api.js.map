{"version":3,"sources":["../../../src/openapi/api/default-api.ts","../../../src/openapi/base.ts","../../../src/openapi/common.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n// @ts-ignore\nimport { OrganizationRead } from '../types';\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     *\n     * @summary Dummy\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    dummy: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n      const localVarPath = `/v2/stress/dummy`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Dummy Db\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    dummyDb: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n      const localVarPath = `/v2/stress/db/dummy`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get Organization\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getOrganizationV2StressDbOrganizationGet: async (\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/v2/stress/db/organization`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get Organization With Authn\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getOrganizationWithAuthn: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n      const localVarPath = `/v2/stress/db/organization_auth`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get Organization With Authz\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getOrganizationWithAuthz: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n      const localVarPath = `/v2/stress/db/organization_authz`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);\n  return {\n    /**\n     *\n     * @summary Dummy\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async dummy(\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.dummy(options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Dummy Db\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async dummyDb(\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.dummyDb(options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get Organization\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getOrganizationV2StressDbOrganizationGet(\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationRead>> {\n      const localVarAxiosArgs =\n        await localVarAxiosParamCreator.getOrganizationV2StressDbOrganizationGet(options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get Organization With Authn\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getOrganizationWithAuthn(\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationWithAuthn(options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get Organization With Authz\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getOrganizationWithAuthz(\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationWithAuthz(options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = DefaultApiFp(configuration);\n  return {\n    /**\n     *\n     * @summary Dummy\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    dummy(options?: any): AxiosPromise<any> {\n      return localVarFp.dummy(options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Dummy Db\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    dummyDb(options?: any): AxiosPromise<any> {\n      return localVarFp.dummyDb(options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get Organization\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getOrganizationV2StressDbOrganizationGet(options?: any): AxiosPromise<OrganizationRead> {\n      return localVarFp\n        .getOrganizationV2StressDbOrganizationGet(options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get Organization With Authn\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getOrganizationWithAuthn(options?: any): AxiosPromise<OrganizationRead> {\n      return localVarFp\n        .getOrganizationWithAuthn(options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get Organization With Authz\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getOrganizationWithAuthz(options?: any): AxiosPromise<OrganizationRead> {\n      return localVarFp\n        .getOrganizationWithAuthz(options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI {\n  /**\n   *\n   * @summary Dummy\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public dummy(options?: AxiosRequestConfig) {\n    return DefaultApiFp(this.configuration)\n      .dummy(options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Dummy Db\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public dummyDb(options?: AxiosRequestConfig) {\n    return DefaultApiFp(this.configuration)\n      .dummyDb(options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get Organization\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public getOrganizationV2StressDbOrganizationGet(options?: AxiosRequestConfig) {\n    return DefaultApiFp(this.configuration)\n      .getOrganizationV2StressDbOrganizationGet(options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get Organization With Authn\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public getOrganizationWithAuthn(options?: AxiosRequestConfig) {\n    return DefaultApiFp(this.configuration)\n      .getOrganizationWithAuthn(options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get Organization With Authz\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public getOrganizationWithAuthz(options?: AxiosRequestConfig) {\n    return DefaultApiFp(this.configuration)\n      .getOrganizationWithAuthz(options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Configuration } from './configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\n\nexport const BASE_PATH = 'http://localhost'.replace(/\\/+$/, '');\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n  csv: ',',\n  ssv: ' ',\n  tsv: '\\t',\n  pipes: '|',\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n  url: string;\n  options: AxiosRequestConfig;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n  protected configuration: Configuration | undefined;\n\n  constructor(\n    configuration?: Configuration,\n    protected basePath: string = BASE_PATH,\n    protected axios: AxiosInstance = globalAxios,\n  ) {\n    if (configuration) {\n      this.configuration = configuration;\n      this.basePath = configuration.basePath || this.basePath;\n    }\n  }\n}\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n  name: 'RequiredError' = 'RequiredError';\n  constructor(public field: string, msg?: string) {\n    super(msg);\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Configuration } from './configuration';\nimport { RequiredError, RequestArgs } from './base';\nimport { AxiosInstance, AxiosResponse } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com';\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (\n  functionName: string,\n  paramName: string,\n  paramValue: unknown,\n) {\n  if (paramValue === null || paramValue === undefined) {\n    throw new RequiredError(\n      paramName,\n      `Required parameter ${paramName} was null or undefined when calling ${functionName}.`,\n    );\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (\n  object: any,\n  keyParamName: string,\n  configuration?: Configuration,\n) {\n  if (configuration && configuration.apiKey) {\n    const localVarApiKeyValue =\n      typeof configuration.apiKey === 'function'\n        ? await configuration.apiKey(keyParamName)\n        : await configuration.apiKey;\n    object[keyParamName] = localVarApiKeyValue;\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n  if (configuration && (configuration.username || configuration.password)) {\n    object['auth'] = { username: configuration.username, password: configuration.password };\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n  if (configuration && configuration.accessToken) {\n    const accessToken =\n      typeof configuration.accessToken === 'function'\n        ? await configuration.accessToken()\n        : await configuration.accessToken;\n    object['Authorization'] = 'Bearer ' + accessToken;\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (\n  object: any,\n  name: string,\n  scopes: string[],\n  configuration?: Configuration,\n) {\n  if (configuration && configuration.accessToken) {\n    const localVarAccessTokenValue =\n      typeof configuration.accessToken === 'function'\n        ? await configuration.accessToken(name, scopes)\n        : await configuration.accessToken;\n    object['Authorization'] = 'Bearer ' + localVarAccessTokenValue;\n  }\n};\n\nfunction setFlattenedQueryParams(\n  urlSearchParams: URLSearchParams,\n  parameter: any,\n  key: string = '',\n): void {\n  if (typeof parameter === 'object') {\n    if (Array.isArray(parameter)) {\n      (parameter as any[]).forEach((item) => setFlattenedQueryParams(urlSearchParams, item, key));\n    } else {\n      Object.keys(parameter).forEach((currentKey) =>\n        setFlattenedQueryParams(\n          urlSearchParams,\n          parameter[currentKey],\n          `${key}${key !== '' ? '.' : ''}${currentKey}`,\n        ),\n      );\n    }\n  } else {\n    if (urlSearchParams.has(key)) {\n      urlSearchParams.append(key, parameter);\n    } else {\n      urlSearchParams.set(key, parameter);\n    }\n  }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n  const searchParams = new URLSearchParams(url.search);\n  setFlattenedQueryParams(searchParams, objects);\n  url.search = searchParams.toString();\n};\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (\n  value: any,\n  requestOptions: any,\n  configuration?: Configuration,\n) {\n  const nonString = typeof value !== 'string';\n  const needsSerialization =\n    nonString && configuration && configuration.isJsonMime\n      ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n      : nonString;\n  return needsSerialization ? JSON.stringify(value !== undefined ? value : {}) : value || '';\n};\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n  return url.pathname + url.search + url.hash;\n};\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (\n  axiosArgs: RequestArgs,\n  globalAxios: AxiosInstance,\n  BASE_PATH: string,\n  configuration?: Configuration,\n) {\n  return <T = unknown, R = AxiosResponse<T>>(\n    axios: AxiosInstance = globalAxios,\n    basePath: string = BASE_PATH,\n  ) => {\n    const axiosRequestArgs = {\n      ...axiosArgs.options,\n      url: (configuration?.basePath || basePath) + axiosArgs.url,\n    };\n    return axios.request<T, R>(axiosRequestArgs);\n  };\n};\n"],"mappings":"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","names":["import_axios","globalAxios","globalAxios","BASE_PATH","globalAxios"]}