{"version":3,"sources":["../../../src/openapi/api/users-api.ts","../../../src/openapi/base.ts","../../../src/openapi/common.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n// @ts-ignore\nimport { PaginatedResultUserRead } from '../types';\n// @ts-ignore\nimport { RoleAssignmentRead } from '../types';\n// @ts-ignore\nimport { UserCreate } from '../types';\n// @ts-ignore\nimport { UserRead } from '../types';\n// @ts-ignore\nimport { UserRoleCreate } from '../types';\n// @ts-ignore\nimport { UserRoleRemove } from '../types';\n// @ts-ignore\nimport { UserUpdate } from '../types';\n/**\n * UsersApi - axios parameter creator\n * @export\n */\nexport const UsersApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     * Assigns a role to the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.\n     * @summary Assign Role To User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {UserRoleCreate} userRoleCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    assignRoleToUser: async (\n      projId: string,\n      envId: string,\n      userId: string,\n      userRoleCreate: UserRoleCreate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('assignRoleToUser', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('assignRoleToUser', 'envId', envId);\n      // verify required parameter 'userId' is not null or undefined\n      assertParamExists('assignRoleToUser', 'userId', userId);\n      // verify required parameter 'userRoleCreate' is not null or undefined\n      assertParamExists('assignRoleToUser', 'userRoleCreate', userRoleCreate);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/users/{user_id}/roles`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'user_id'}}`, encodeURIComponent(String(userId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        userRoleCreate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Creates a new user inside the Permit.io system, from that point forward you may run permission checks on that user.  If the user is already created: will return 200 instead of 201, and will return the existing user object in the response body.\n     * @summary Create User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {UserCreate} userCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createUser: async (\n      projId: string,\n      envId: string,\n      userCreate: UserCreate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('createUser', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('createUser', 'envId', envId);\n      // verify required parameter 'userCreate' is not null or undefined\n      assertParamExists('createUser', 'userCreate', userCreate);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/users`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        userCreate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Deletes the user and all its related data.\n     * @summary Delete User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteUser: async (\n      projId: string,\n      envId: string,\n      userId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('deleteUser', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('deleteUser', 'envId', envId);\n      // verify required parameter 'userId' is not null or undefined\n      assertParamExists('deleteUser', 'userId', userId);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/users/{user_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'user_id'}}`, encodeURIComponent(String(userId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Gets a user, if such user exists. Otherwise returns 404.\n     * @summary Get User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getUser: async (\n      projId: string,\n      envId: string,\n      userId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getUser', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getUser', 'envId', envId);\n      // verify required parameter 'userId' is not null or undefined\n      assertParamExists('getUser', 'userId', userId);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/users/{user_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'user_id'}}`, encodeURIComponent(String(userId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Lists all the users defined within an environment.\n     * @summary List Users\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [search] Text search for the email field\n     * @param {string} [role] Match users with a specific role\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listUsers: async (\n      projId: string,\n      envId: string,\n      search?: string,\n      role?: string,\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('listUsers', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('listUsers', 'envId', envId);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/users`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (role !== undefined) {\n        localVarQueryParameter['role'] = role;\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Replace User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {UserCreate} userCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    replaceUser: async (\n      projId: string,\n      envId: string,\n      userId: string,\n      userCreate: UserCreate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('replaceUser', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('replaceUser', 'envId', envId);\n      // verify required parameter 'userId' is not null or undefined\n      assertParamExists('replaceUser', 'userId', userId);\n      // verify required parameter 'userCreate' is not null or undefined\n      assertParamExists('replaceUser', 'userCreate', userCreate);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/users/{user_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'user_id'}}`, encodeURIComponent(String(userId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        userCreate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Unassigns the role from the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.\n     * @summary Unassign Role From User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {UserRoleRemove} userRoleRemove\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    unassignRoleFromUser: async (\n      projId: string,\n      envId: string,\n      userId: string,\n      userRoleRemove: UserRoleRemove,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('unassignRoleFromUser', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('unassignRoleFromUser', 'envId', envId);\n      // verify required parameter 'userId' is not null or undefined\n      assertParamExists('unassignRoleFromUser', 'userId', userId);\n      // verify required parameter 'userRoleRemove' is not null or undefined\n      assertParamExists('unassignRoleFromUser', 'userRoleRemove', userRoleRemove);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/users/{user_id}/roles`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'user_id'}}`, encodeURIComponent(String(userId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        userRoleRemove,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Partially updates the user definition. Fields that will be provided will be completely overwritten.\n     * @summary Update User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {UserUpdate} userUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateUser: async (\n      projId: string,\n      envId: string,\n      userId: string,\n      userUpdate: UserUpdate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('updateUser', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('updateUser', 'envId', envId);\n      // verify required parameter 'userId' is not null or undefined\n      assertParamExists('updateUser', 'userId', userId);\n      // verify required parameter 'userUpdate' is not null or undefined\n      assertParamExists('updateUser', 'userUpdate', userUpdate);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/users/{user_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'user_id'}}`, encodeURIComponent(String(userId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        userUpdate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * UsersApi - functional programming interface\n * @export\n */\nexport const UsersApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * Assigns a role to the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.\n     * @summary Assign Role To User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {UserRoleCreate} userRoleCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async assignRoleToUser(\n      projId: string,\n      envId: string,\n      userId: string,\n      userRoleCreate: UserRoleCreate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleAssignmentRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.assignRoleToUser(\n        projId,\n        envId,\n        userId,\n        userRoleCreate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Creates a new user inside the Permit.io system, from that point forward you may run permission checks on that user.  If the user is already created: will return 200 instead of 201, and will return the existing user object in the response body.\n     * @summary Create User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {UserCreate} userCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async createUser(\n      projId: string,\n      envId: string,\n      userCreate: UserCreate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(\n        projId,\n        envId,\n        userCreate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Deletes the user and all its related data.\n     * @summary Delete User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async deleteUser(\n      projId: string,\n      envId: string,\n      userId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(\n        projId,\n        envId,\n        userId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Gets a user, if such user exists. Otherwise returns 404.\n     * @summary Get User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getUser(\n      projId: string,\n      envId: string,\n      userId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(\n        projId,\n        envId,\n        userId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Lists all the users defined within an environment.\n     * @summary List Users\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [search] Text search for the email field\n     * @param {string} [role] Match users with a specific role\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async listUsers(\n      projId: string,\n      envId: string,\n      search?: string,\n      role?: string,\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResultUserRead>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.listUsers(\n        projId,\n        envId,\n        search,\n        role,\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Replace User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {UserCreate} userCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async replaceUser(\n      projId: string,\n      envId: string,\n      userId: string,\n      userCreate: UserCreate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.replaceUser(\n        projId,\n        envId,\n        userId,\n        userCreate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Unassigns the role from the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.\n     * @summary Unassign Role From User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {UserRoleRemove} userRoleRemove\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async unassignRoleFromUser(\n      projId: string,\n      envId: string,\n      userId: string,\n      userRoleRemove: UserRoleRemove,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.unassignRoleFromUser(\n        projId,\n        envId,\n        userId,\n        userRoleRemove,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Partially updates the user definition. Fields that will be provided will be completely overwritten.\n     * @summary Update User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {UserUpdate} userUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async updateUser(\n      projId: string,\n      envId: string,\n      userId: string,\n      userUpdate: UserUpdate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(\n        projId,\n        envId,\n        userId,\n        userUpdate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * UsersApi - factory interface\n * @export\n */\nexport const UsersApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = UsersApiFp(configuration);\n  return {\n    /**\n     * Assigns a role to the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.\n     * @summary Assign Role To User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {UserRoleCreate} userRoleCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    assignRoleToUser(\n      projId: string,\n      envId: string,\n      userId: string,\n      userRoleCreate: UserRoleCreate,\n      options?: any,\n    ): AxiosPromise<RoleAssignmentRead> {\n      return localVarFp\n        .assignRoleToUser(projId, envId, userId, userRoleCreate, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Creates a new user inside the Permit.io system, from that point forward you may run permission checks on that user.  If the user is already created: will return 200 instead of 201, and will return the existing user object in the response body.\n     * @summary Create User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {UserCreate} userCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createUser(\n      projId: string,\n      envId: string,\n      userCreate: UserCreate,\n      options?: any,\n    ): AxiosPromise<UserRead> {\n      return localVarFp\n        .createUser(projId, envId, userCreate, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Deletes the user and all its related data.\n     * @summary Delete User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteUser(projId: string, envId: string, userId: string, options?: any): AxiosPromise<void> {\n      return localVarFp\n        .deleteUser(projId, envId, userId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Gets a user, if such user exists. Otherwise returns 404.\n     * @summary Get User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getUser(projId: string, envId: string, userId: string, options?: any): AxiosPromise<UserRead> {\n      return localVarFp\n        .getUser(projId, envId, userId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Lists all the users defined within an environment.\n     * @summary List Users\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [search] Text search for the email field\n     * @param {string} [role] Match users with a specific role\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listUsers(\n      projId: string,\n      envId: string,\n      search?: string,\n      role?: string,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<PaginatedResultUserRead> {\n      return localVarFp\n        .listUsers(projId, envId, search, role, page, perPage, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Replace User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {UserCreate} userCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    replaceUser(\n      projId: string,\n      envId: string,\n      userId: string,\n      userCreate: UserCreate,\n      options?: any,\n    ): AxiosPromise<UserRead> {\n      return localVarFp\n        .replaceUser(projId, envId, userId, userCreate, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Unassigns the role from the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.\n     * @summary Unassign Role From User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {UserRoleRemove} userRoleRemove\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    unassignRoleFromUser(\n      projId: string,\n      envId: string,\n      userId: string,\n      userRoleRemove: UserRoleRemove,\n      options?: any,\n    ): AxiosPromise<void> {\n      return localVarFp\n        .unassignRoleFromUser(projId, envId, userId, userRoleRemove, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Partially updates the user definition. Fields that will be provided will be completely overwritten.\n     * @summary Update User\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {UserUpdate} userUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateUser(\n      projId: string,\n      envId: string,\n      userId: string,\n      userUpdate: UserUpdate,\n      options?: any,\n    ): AxiosPromise<UserRead> {\n      return localVarFp\n        .updateUser(projId, envId, userId, userUpdate, options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for assignRoleToUser operation in UsersApi.\n * @export\n * @interface UsersApiAssignRoleToUserRequest\n */\nexport interface UsersApiAssignRoleToUserRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiAssignRoleToUser\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiAssignRoleToUser\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiAssignRoleToUser\n   */\n  readonly userId: string;\n\n  /**\n   *\n   * @type {UserRoleCreate}\n   * @memberof UsersApiAssignRoleToUser\n   */\n  readonly userRoleCreate: UserRoleCreate;\n}\n\n/**\n * Request parameters for createUser operation in UsersApi.\n * @export\n * @interface UsersApiCreateUserRequest\n */\nexport interface UsersApiCreateUserRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiCreateUser\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiCreateUser\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {UserCreate}\n   * @memberof UsersApiCreateUser\n   */\n  readonly userCreate: UserCreate;\n}\n\n/**\n * Request parameters for deleteUser operation in UsersApi.\n * @export\n * @interface UsersApiDeleteUserRequest\n */\nexport interface UsersApiDeleteUserRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiDeleteUser\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiDeleteUser\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiDeleteUser\n   */\n  readonly userId: string;\n}\n\n/**\n * Request parameters for getUser operation in UsersApi.\n * @export\n * @interface UsersApiGetUserRequest\n */\nexport interface UsersApiGetUserRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiGetUser\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiGetUser\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiGetUser\n   */\n  readonly userId: string;\n}\n\n/**\n * Request parameters for listUsers operation in UsersApi.\n * @export\n * @interface UsersApiListUsersRequest\n */\nexport interface UsersApiListUsersRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiListUsers\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiListUsers\n   */\n  readonly envId: string;\n\n  /**\n   * Text search for the email field\n   * @type {string}\n   * @memberof UsersApiListUsers\n   */\n  readonly search?: string;\n\n  /**\n   * Match users with a specific role\n   * @type {string}\n   * @memberof UsersApiListUsers\n   */\n  readonly role?: string;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof UsersApiListUsers\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof UsersApiListUsers\n   */\n  readonly perPage?: number;\n}\n\n/**\n * Request parameters for replaceUser operation in UsersApi.\n * @export\n * @interface UsersApiReplaceUserRequest\n */\nexport interface UsersApiReplaceUserRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiReplaceUser\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiReplaceUser\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiReplaceUser\n   */\n  readonly userId: string;\n\n  /**\n   *\n   * @type {UserCreate}\n   * @memberof UsersApiReplaceUser\n   */\n  readonly userCreate: UserCreate;\n}\n\n/**\n * Request parameters for unassignRoleFromUser operation in UsersApi.\n * @export\n * @interface UsersApiUnassignRoleFromUserRequest\n */\nexport interface UsersApiUnassignRoleFromUserRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiUnassignRoleFromUser\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiUnassignRoleFromUser\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiUnassignRoleFromUser\n   */\n  readonly userId: string;\n\n  /**\n   *\n   * @type {UserRoleRemove}\n   * @memberof UsersApiUnassignRoleFromUser\n   */\n  readonly userRoleRemove: UserRoleRemove;\n}\n\n/**\n * Request parameters for updateUser operation in UsersApi.\n * @export\n * @interface UsersApiUpdateUserRequest\n */\nexport interface UsersApiUpdateUserRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiUpdateUser\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiUpdateUser\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersApiUpdateUser\n   */\n  readonly userId: string;\n\n  /**\n   *\n   * @type {UserUpdate}\n   * @memberof UsersApiUpdateUser\n   */\n  readonly userUpdate: UserUpdate;\n}\n\n/**\n * UsersApi - object-oriented interface\n * @export\n * @class UsersApi\n * @extends {BaseAPI}\n */\nexport class UsersApi extends BaseAPI {\n  /**\n   * Assigns a role to the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.\n   * @summary Assign Role To User\n   * @param {UsersApiAssignRoleToUserRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof UsersApi\n   */\n  public assignRoleToUser(\n    requestParameters: UsersApiAssignRoleToUserRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return UsersApiFp(this.configuration)\n      .assignRoleToUser(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.userId,\n        requestParameters.userRoleCreate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Creates a new user inside the Permit.io system, from that point forward you may run permission checks on that user.  If the user is already created: will return 200 instead of 201, and will return the existing user object in the response body.\n   * @summary Create User\n   * @param {UsersApiCreateUserRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof UsersApi\n   */\n  public createUser(requestParameters: UsersApiCreateUserRequest, options?: AxiosRequestConfig) {\n    return UsersApiFp(this.configuration)\n      .createUser(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.userCreate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Deletes the user and all its related data.\n   * @summary Delete User\n   * @param {UsersApiDeleteUserRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof UsersApi\n   */\n  public deleteUser(requestParameters: UsersApiDeleteUserRequest, options?: AxiosRequestConfig) {\n    return UsersApiFp(this.configuration)\n      .deleteUser(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.userId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Gets a user, if such user exists. Otherwise returns 404.\n   * @summary Get User\n   * @param {UsersApiGetUserRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof UsersApi\n   */\n  public getUser(requestParameters: UsersApiGetUserRequest, options?: AxiosRequestConfig) {\n    return UsersApiFp(this.configuration)\n      .getUser(requestParameters.projId, requestParameters.envId, requestParameters.userId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Lists all the users defined within an environment.\n   * @summary List Users\n   * @param {UsersApiListUsersRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof UsersApi\n   */\n  public listUsers(requestParameters: UsersApiListUsersRequest, options?: AxiosRequestConfig) {\n    return UsersApiFp(this.configuration)\n      .listUsers(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.search,\n        requestParameters.role,\n        requestParameters.page,\n        requestParameters.perPage,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Replace User\n   * @param {UsersApiReplaceUserRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof UsersApi\n   */\n  public replaceUser(requestParameters: UsersApiReplaceUserRequest, options?: AxiosRequestConfig) {\n    return UsersApiFp(this.configuration)\n      .replaceUser(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.userId,\n        requestParameters.userCreate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Unassigns the role from the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.\n   * @summary Unassign Role From User\n   * @param {UsersApiUnassignRoleFromUserRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof UsersApi\n   */\n  public unassignRoleFromUser(\n    requestParameters: UsersApiUnassignRoleFromUserRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return UsersApiFp(this.configuration)\n      .unassignRoleFromUser(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.userId,\n        requestParameters.userRoleRemove,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Partially updates the user definition. Fields that will be provided will be completely overwritten.\n   * @summary Update User\n   * @param {UsersApiUpdateUserRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof UsersApi\n   */\n  public updateUser(requestParameters: UsersApiUpdateUserRequest, options?: AxiosRequestConfig) {\n    return UsersApiFp(this.configuration)\n      .updateUser(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.userId,\n        requestParameters.userUpdate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Configuration } from './configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\n\nexport const BASE_PATH = 'http://localhost'.replace(/\\/+$/, '');\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n  csv: ',',\n  ssv: ' ',\n  tsv: '\\t',\n  pipes: '|',\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n  url: string;\n  options: AxiosRequestConfig;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n  protected configuration: Configuration | undefined;\n\n  constructor(\n    configuration?: Configuration,\n    protected basePath: string = BASE_PATH,\n    protected axios: AxiosInstance = globalAxios,\n  ) {\n    if (configuration) {\n      this.configuration = configuration;\n      this.basePath = configuration.basePath || this.basePath;\n    }\n  }\n}\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n  name: 'RequiredError' = 'RequiredError';\n  constructor(public field: string, msg?: string) {\n    super(msg);\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Configuration } from './configuration';\nimport { RequiredError, RequestArgs } from './base';\nimport { AxiosInstance, AxiosResponse } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com';\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (\n  functionName: string,\n  paramName: string,\n  paramValue: unknown,\n) {\n  if (paramValue === null || paramValue === undefined) {\n    throw new RequiredError(\n      paramName,\n      `Required parameter ${paramName} was null or undefined when calling ${functionName}.`,\n    );\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (\n  object: any,\n  keyParamName: string,\n  configuration?: Configuration,\n) {\n  if (configuration && configuration.apiKey) {\n    const localVarApiKeyValue =\n      typeof configuration.apiKey === 'function'\n        ? await configuration.apiKey(keyParamName)\n        : await configuration.apiKey;\n    object[keyParamName] = localVarApiKeyValue;\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n  if (configuration && (configuration.username || configuration.password)) {\n    object['auth'] = { username: configuration.username, password: configuration.password };\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n  if (configuration && configuration.accessToken) {\n    const accessToken =\n      typeof configuration.accessToken === 'function'\n        ? await configuration.accessToken()\n        : await configuration.accessToken;\n    object['Authorization'] = 'Bearer ' + accessToken;\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (\n  object: any,\n  name: string,\n  scopes: string[],\n  configuration?: Configuration,\n) {\n  if (configuration && configuration.accessToken) {\n    const localVarAccessTokenValue =\n      typeof configuration.accessToken === 'function'\n        ? await configuration.accessToken(name, scopes)\n        : await configuration.accessToken;\n    object['Authorization'] = 'Bearer ' + localVarAccessTokenValue;\n  }\n};\n\nfunction setFlattenedQueryParams(\n  urlSearchParams: URLSearchParams,\n  parameter: any,\n  key: string = '',\n): void {\n  if (typeof parameter === 'object') {\n    if (Array.isArray(parameter)) {\n      (parameter as any[]).forEach((item) => setFlattenedQueryParams(urlSearchParams, item, key));\n    } else {\n      Object.keys(parameter).forEach((currentKey) =>\n        setFlattenedQueryParams(\n          urlSearchParams,\n          parameter[currentKey],\n          `${key}${key !== '' ? '.' : ''}${currentKey}`,\n        ),\n      );\n    }\n  } else {\n    if (urlSearchParams.has(key)) {\n      urlSearchParams.append(key, parameter);\n    } else {\n      urlSearchParams.set(key, parameter);\n    }\n  }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n  const searchParams = new URLSearchParams(url.search);\n  setFlattenedQueryParams(searchParams, objects);\n  url.search = searchParams.toString();\n};\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (\n  value: any,\n  requestOptions: any,\n  configuration?: Configuration,\n) {\n  const nonString = typeof value !== 'string';\n  const needsSerialization =\n    nonString && configuration && configuration.isJsonMime\n      ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n      : nonString;\n  return needsSerialization ? JSON.stringify(value !== undefined ? value : {}) : value || '';\n};\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n  return url.pathname + url.search + url.hash;\n};\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (\n  axiosArgs: RequestArgs,\n  globalAxios: AxiosInstance,\n  BASE_PATH: string,\n  configuration?: Configuration,\n) {\n  return <T = unknown, R = AxiosResponse<T>>(\n    axios: AxiosInstance = globalAxios,\n    basePath: string = BASE_PATH,\n  ) => {\n    const axiosRequestArgs = {\n      ...axiosArgs.options,\n      url: (configuration?.basePath || basePath) + axiosArgs.url,\n    };\n    return axios.request<T, R>(axiosRequestArgs);\n  };\n};\n"],"mappings":"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","names":["import_axios","globalAxios","globalAxios","BASE_PATH","globalAxios"]}