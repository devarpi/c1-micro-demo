// src/openapi/api/opaldata-api.ts
import globalAxios2 from "axios";

// src/openapi/base.ts
import globalAxios from "axios";
var BASE_PATH = "http://localhost".replace(/\/+$/, "");
var BaseAPI = class {
  constructor(configuration, basePath = BASE_PATH, axios = globalAxios) {
    this.basePath = basePath;
    this.axios = axios;
    if (configuration) {
      this.configuration = configuration;
      this.basePath = configuration.basePath || this.basePath;
    }
  }
};
var RequiredError = class extends Error {
  constructor(field, msg) {
    super(msg);
    this.field = field;
    this.name = "RequiredError";
  }
};

// src/openapi/common.ts
var DUMMY_BASE_URL = "https://example.com";
var assertParamExists = function(functionName, paramName, paramValue) {
  if (paramValue === null || paramValue === void 0) {
    throw new RequiredError(
      paramName,
      `Required parameter ${paramName} was null or undefined when calling ${functionName}.`
    );
  }
};
var setBearerAuthToObject = async function(object, configuration) {
  if (configuration && configuration.accessToken) {
    const accessToken = typeof configuration.accessToken === "function" ? await configuration.accessToken() : await configuration.accessToken;
    object["Authorization"] = "Bearer " + accessToken;
  }
};
function setFlattenedQueryParams(urlSearchParams, parameter, key = "") {
  if (typeof parameter === "object") {
    if (Array.isArray(parameter)) {
      parameter.forEach((item) => setFlattenedQueryParams(urlSearchParams, item, key));
    } else {
      Object.keys(parameter).forEach(
        (currentKey) => setFlattenedQueryParams(
          urlSearchParams,
          parameter[currentKey],
          `${key}${key !== "" ? "." : ""}${currentKey}`
        )
      );
    }
  } else {
    if (urlSearchParams.has(key)) {
      urlSearchParams.append(key, parameter);
    } else {
      urlSearchParams.set(key, parameter);
    }
  }
}
var setSearchParams = function(url, ...objects) {
  const searchParams = new URLSearchParams(url.search);
  setFlattenedQueryParams(searchParams, objects);
  url.search = searchParams.toString();
};
var toPathString = function(url) {
  return url.pathname + url.search + url.hash;
};
var createRequestFunction = function(axiosArgs, globalAxios3, BASE_PATH2, configuration) {
  return (axios = globalAxios3, basePath = BASE_PATH2) => {
    const axiosRequestArgs = {
      ...axiosArgs.options,
      url: ((configuration == null ? void 0 : configuration.basePath) || basePath) + axiosArgs.url
    };
    return axios.request(axiosRequestArgs);
  };
};

// src/openapi/api/opaldata-api.ts
var OPALDataApiAxiosParamCreator = function(configuration) {
  return {
    /**
     *
     * @summary Get All Data
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {boolean} [internalUpdateCache]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllData: async (orgId, projId, envId, internalUpdateCache, options = {}) => {
      assertParamExists("getAllData", "orgId", orgId);
      assertParamExists("getAllData", "projId", projId);
      assertParamExists("getAllData", "envId", envId);
      const localVarPath = `/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}`.replace(`{${"org_id"}}`, encodeURIComponent(String(orgId))).replace(`{${"proj_id"}}`, encodeURIComponent(String(projId))).replace(`{${"env_id"}}`, encodeURIComponent(String(envId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (internalUpdateCache !== void 0) {
        localVarQueryParameter["__internal_update_cache"] = internalUpdateCache;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary Get Data For Condition Set
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} conditionSetId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataForConditionSet: async (orgId, projId, envId, conditionSetId, options = {}) => {
      assertParamExists("getDataForConditionSet", "orgId", orgId);
      assertParamExists("getDataForConditionSet", "projId", projId);
      assertParamExists("getDataForConditionSet", "envId", envId);
      assertParamExists("getDataForConditionSet", "conditionSetId", conditionSetId);
      const localVarPath = `/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/condition_sets/{condition_set_id}`.replace(`{${"org_id"}}`, encodeURIComponent(String(orgId))).replace(`{${"proj_id"}}`, encodeURIComponent(String(projId))).replace(`{${"env_id"}}`, encodeURIComponent(String(envId))).replace(`{${"condition_set_id"}}`, encodeURIComponent(String(conditionSetId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary Get Data For Resource
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataForResource: async (orgId, projId, envId, resourceId, options = {}) => {
      assertParamExists("getDataForResource", "orgId", orgId);
      assertParamExists("getDataForResource", "projId", projId);
      assertParamExists("getDataForResource", "envId", envId);
      assertParamExists("getDataForResource", "resourceId", resourceId);
      const localVarPath = `/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/resource_types/{resource_id}`.replace(`{${"org_id"}}`, encodeURIComponent(String(orgId))).replace(`{${"proj_id"}}`, encodeURIComponent(String(projId))).replace(`{${"env_id"}}`, encodeURIComponent(String(envId))).replace(`{${"resource_id"}}`, encodeURIComponent(String(resourceId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary Get Data For Role
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataForRole: async (orgId, projId, envId, roleId, options = {}) => {
      assertParamExists("getDataForRole", "orgId", orgId);
      assertParamExists("getDataForRole", "projId", projId);
      assertParamExists("getDataForRole", "envId", envId);
      assertParamExists("getDataForRole", "roleId", roleId);
      const localVarPath = `/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/roles/{role_id}`.replace(`{${"org_id"}}`, encodeURIComponent(String(orgId))).replace(`{${"proj_id"}}`, encodeURIComponent(String(projId))).replace(`{${"env_id"}}`, encodeURIComponent(String(envId))).replace(`{${"role_id"}}`, encodeURIComponent(String(roleId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * return permission assignment data between user sets and resource sets (i.e: condition set rules data)
     * @summary Get Data For Set Rule
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} userSetId
     * @param {string} resourceSetId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataForSetRule: async (orgId, projId, envId, userSetId, resourceSetId, options = {}) => {
      assertParamExists("getDataForSetRule", "orgId", orgId);
      assertParamExists("getDataForSetRule", "projId", projId);
      assertParamExists("getDataForSetRule", "envId", envId);
      assertParamExists("getDataForSetRule", "userSetId", userSetId);
      assertParamExists("getDataForSetRule", "resourceSetId", resourceSetId);
      const localVarPath = `/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/condition_set_rules/{user_set_id}/{resource_set_id}`.replace(`{${"org_id"}}`, encodeURIComponent(String(orgId))).replace(`{${"proj_id"}}`, encodeURIComponent(String(projId))).replace(`{${"env_id"}}`, encodeURIComponent(String(envId))).replace(`{${"user_set_id"}}`, encodeURIComponent(String(userSetId))).replace(`{${"resource_set_id"}}`, encodeURIComponent(String(resourceSetId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary Get Data For Tenant
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} tenantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataForTenant: async (orgId, projId, envId, tenantId, options = {}) => {
      assertParamExists("getDataForTenant", "orgId", orgId);
      assertParamExists("getDataForTenant", "projId", projId);
      assertParamExists("getDataForTenant", "envId", envId);
      assertParamExists("getDataForTenant", "tenantId", tenantId);
      const localVarPath = `/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/tenants/{tenant_id}`.replace(`{${"org_id"}}`, encodeURIComponent(String(orgId))).replace(`{${"proj_id"}}`, encodeURIComponent(String(projId))).replace(`{${"env_id"}}`, encodeURIComponent(String(envId))).replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary Get Data For User
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataForUser: async (orgId, projId, envId, userId, options = {}) => {
      assertParamExists("getDataForUser", "orgId", orgId);
      assertParamExists("getDataForUser", "projId", projId);
      assertParamExists("getDataForUser", "envId", envId);
      assertParamExists("getDataForUser", "userId", userId);
      const localVarPath = `/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/users/{user_id}`.replace(`{${"org_id"}}`, encodeURIComponent(String(orgId))).replace(`{${"proj_id"}}`, encodeURIComponent(String(projId))).replace(`{${"env_id"}}`, encodeURIComponent(String(envId))).replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
var OPALDataApiFp = function(configuration) {
  const localVarAxiosParamCreator = OPALDataApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Get All Data
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {boolean} [internalUpdateCache]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllData(orgId, projId, envId, internalUpdateCache, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllData(
        orgId,
        projId,
        envId,
        internalUpdateCache,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Get Data For Condition Set
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} conditionSetId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDataForConditionSet(orgId, projId, envId, conditionSetId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getDataForConditionSet(
        orgId,
        projId,
        envId,
        conditionSetId,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Get Data For Resource
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDataForResource(orgId, projId, envId, resourceId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getDataForResource(
        orgId,
        projId,
        envId,
        resourceId,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Get Data For Role
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDataForRole(orgId, projId, envId, roleId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getDataForRole(
        orgId,
        projId,
        envId,
        roleId,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    },
    /**
     * return permission assignment data between user sets and resource sets (i.e: condition set rules data)
     * @summary Get Data For Set Rule
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} userSetId
     * @param {string} resourceSetId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDataForSetRule(orgId, projId, envId, userSetId, resourceSetId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getDataForSetRule(
        orgId,
        projId,
        envId,
        userSetId,
        resourceSetId,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Get Data For Tenant
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} tenantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDataForTenant(orgId, projId, envId, tenantId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getDataForTenant(
        orgId,
        projId,
        envId,
        tenantId,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Get Data For User
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDataForUser(orgId, projId, envId, userId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getDataForUser(
        orgId,
        projId,
        envId,
        userId,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    }
  };
};
var OPALDataApiFactory = function(configuration, basePath, axios) {
  const localVarFp = OPALDataApiFp(configuration);
  return {
    /**
     *
     * @summary Get All Data
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {boolean} [internalUpdateCache]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllData(orgId, projId, envId, internalUpdateCache, options) {
      return localVarFp.getAllData(orgId, projId, envId, internalUpdateCache, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get Data For Condition Set
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} conditionSetId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataForConditionSet(orgId, projId, envId, conditionSetId, options) {
      return localVarFp.getDataForConditionSet(orgId, projId, envId, conditionSetId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get Data For Resource
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataForResource(orgId, projId, envId, resourceId, options) {
      return localVarFp.getDataForResource(orgId, projId, envId, resourceId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get Data For Role
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataForRole(orgId, projId, envId, roleId, options) {
      return localVarFp.getDataForRole(orgId, projId, envId, roleId, options).then((request) => request(axios, basePath));
    },
    /**
     * return permission assignment data between user sets and resource sets (i.e: condition set rules data)
     * @summary Get Data For Set Rule
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} userSetId
     * @param {string} resourceSetId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataForSetRule(orgId, projId, envId, userSetId, resourceSetId, options) {
      return localVarFp.getDataForSetRule(orgId, projId, envId, userSetId, resourceSetId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get Data For Tenant
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} tenantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataForTenant(orgId, projId, envId, tenantId, options) {
      return localVarFp.getDataForTenant(orgId, projId, envId, tenantId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get Data For User
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataForUser(orgId, projId, envId, userId, options) {
      return localVarFp.getDataForUser(orgId, projId, envId, userId, options).then((request) => request(axios, basePath));
    }
  };
};
var OPALDataApi = class extends BaseAPI {
  /**
   *
   * @summary Get All Data
   * @param {OPALDataApiGetAllDataRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OPALDataApi
   */
  getAllData(requestParameters, options) {
    return OPALDataApiFp(this.configuration).getAllData(
      requestParameters.orgId,
      requestParameters.projId,
      requestParameters.envId,
      requestParameters.internalUpdateCache,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get Data For Condition Set
   * @param {OPALDataApiGetDataForConditionSetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OPALDataApi
   */
  getDataForConditionSet(requestParameters, options) {
    return OPALDataApiFp(this.configuration).getDataForConditionSet(
      requestParameters.orgId,
      requestParameters.projId,
      requestParameters.envId,
      requestParameters.conditionSetId,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get Data For Resource
   * @param {OPALDataApiGetDataForResourceRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OPALDataApi
   */
  getDataForResource(requestParameters, options) {
    return OPALDataApiFp(this.configuration).getDataForResource(
      requestParameters.orgId,
      requestParameters.projId,
      requestParameters.envId,
      requestParameters.resourceId,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get Data For Role
   * @param {OPALDataApiGetDataForRoleRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OPALDataApi
   */
  getDataForRole(requestParameters, options) {
    return OPALDataApiFp(this.configuration).getDataForRole(
      requestParameters.orgId,
      requestParameters.projId,
      requestParameters.envId,
      requestParameters.roleId,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  /**
   * return permission assignment data between user sets and resource sets (i.e: condition set rules data)
   * @summary Get Data For Set Rule
   * @param {OPALDataApiGetDataForSetRuleRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OPALDataApi
   */
  getDataForSetRule(requestParameters, options) {
    return OPALDataApiFp(this.configuration).getDataForSetRule(
      requestParameters.orgId,
      requestParameters.projId,
      requestParameters.envId,
      requestParameters.userSetId,
      requestParameters.resourceSetId,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get Data For Tenant
   * @param {OPALDataApiGetDataForTenantRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OPALDataApi
   */
  getDataForTenant(requestParameters, options) {
    return OPALDataApiFp(this.configuration).getDataForTenant(
      requestParameters.orgId,
      requestParameters.projId,
      requestParameters.envId,
      requestParameters.tenantId,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get Data For User
   * @param {OPALDataApiGetDataForUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OPALDataApi
   */
  getDataForUser(requestParameters, options) {
    return OPALDataApiFp(this.configuration).getDataForUser(
      requestParameters.orgId,
      requestParameters.projId,
      requestParameters.envId,
      requestParameters.userId,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
};
export {
  OPALDataApi,
  OPALDataApiAxiosParamCreator,
  OPALDataApiFactory,
  OPALDataApiFp
};
//# sourceMappingURL=opaldata-api.mjs.map