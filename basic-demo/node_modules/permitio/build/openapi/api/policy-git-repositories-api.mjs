// src/openapi/api/policy-git-repositories-api.ts
import globalAxios2 from "axios";

// src/openapi/base.ts
import globalAxios from "axios";
var BASE_PATH = "http://localhost".replace(/\/+$/, "");
var BaseAPI = class {
  constructor(configuration, basePath = BASE_PATH, axios = globalAxios) {
    this.basePath = basePath;
    this.axios = axios;
    if (configuration) {
      this.configuration = configuration;
      this.basePath = configuration.basePath || this.basePath;
    }
  }
};
var RequiredError = class extends Error {
  constructor(field, msg) {
    super(msg);
    this.field = field;
    this.name = "RequiredError";
  }
};

// src/openapi/common.ts
var DUMMY_BASE_URL = "https://example.com";
var assertParamExists = function(functionName, paramName, paramValue) {
  if (paramValue === null || paramValue === void 0) {
    throw new RequiredError(
      paramName,
      `Required parameter ${paramName} was null or undefined when calling ${functionName}.`
    );
  }
};
var setBearerAuthToObject = async function(object, configuration) {
  if (configuration && configuration.accessToken) {
    const accessToken = typeof configuration.accessToken === "function" ? await configuration.accessToken() : await configuration.accessToken;
    object["Authorization"] = "Bearer " + accessToken;
  }
};
function setFlattenedQueryParams(urlSearchParams, parameter, key = "") {
  if (typeof parameter === "object") {
    if (Array.isArray(parameter)) {
      parameter.forEach((item) => setFlattenedQueryParams(urlSearchParams, item, key));
    } else {
      Object.keys(parameter).forEach(
        (currentKey) => setFlattenedQueryParams(
          urlSearchParams,
          parameter[currentKey],
          `${key}${key !== "" ? "." : ""}${currentKey}`
        )
      );
    }
  } else {
    if (urlSearchParams.has(key)) {
      urlSearchParams.append(key, parameter);
    } else {
      urlSearchParams.set(key, parameter);
    }
  }
}
var setSearchParams = function(url, ...objects) {
  const searchParams = new URLSearchParams(url.search);
  setFlattenedQueryParams(searchParams, objects);
  url.search = searchParams.toString();
};
var serializeDataIfNeeded = function(value, requestOptions, configuration) {
  const nonString = typeof value !== "string";
  const needsSerialization = nonString && configuration && configuration.isJsonMime ? configuration.isJsonMime(requestOptions.headers["Content-Type"]) : nonString;
  return needsSerialization ? JSON.stringify(value !== void 0 ? value : {}) : value || "";
};
var toPathString = function(url) {
  return url.pathname + url.search + url.hash;
};
var createRequestFunction = function(axiosArgs, globalAxios3, BASE_PATH2, configuration) {
  return (axios = globalAxios3, basePath = BASE_PATH2) => {
    const axiosRequestArgs = {
      ...axiosArgs.options,
      url: ((configuration == null ? void 0 : configuration.basePath) || basePath) + axiosArgs.url
    };
    return axios.request(axiosRequestArgs);
  };
};

// src/openapi/api/policy-git-repositories-api.ts
var PolicyGitRepositoriesApiAxiosParamCreator = function(configuration) {
  return {
    /**
     * Disable the currently active policy repo, this action means to turn off the gitops feature. If there is no active policy repo, this action will do nothing.
     * @summary Activate Policy Repo
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} repoId Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activatePolicyRepo: async (projId, repoId, options = {}) => {
      assertParamExists("activatePolicyRepo", "projId", projId);
      assertParamExists("activatePolicyRepo", "repoId", repoId);
      const localVarPath = `/v2/projects/{proj_id}/repos/{repo_id}/activate`.replace(`{${"proj_id"}}`, encodeURIComponent(String(projId))).replace(`{${"repo_id"}}`, encodeURIComponent(String(repoId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Creates a new policy repository configuration under a given project. The given repository is created with status \'pending\', it will be changed and used as the \'active\' repository for the policy only after a successful attempt to use it. The repository main branch must be present in the remote.
     * @summary Create Policy Repo
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {PolicyRepoCreate} policyRepoCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPolicyRepo: async (projId, policyRepoCreate, options = {}) => {
      assertParamExists("createPolicyRepo", "projId", projId);
      assertParamExists("createPolicyRepo", "policyRepoCreate", policyRepoCreate);
      const localVarPath = `/v2/projects/{proj_id}/repos`.replace(
        `{${"proj_id"}}`,
        encodeURIComponent(String(projId))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        policyRepoCreate,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Deletes an environment and all its related data.
     * @summary Delete Policy Repo
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} repoId Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePolicyRepo: async (projId, repoId, options = {}) => {
      assertParamExists("deletePolicyRepo", "projId", projId);
      assertParamExists("deletePolicyRepo", "repoId", repoId);
      const localVarPath = `/v2/projects/{proj_id}/repos/{repo_id}`.replace(`{${"proj_id"}}`, encodeURIComponent(String(projId))).replace(`{${"repo_id"}}`, encodeURIComponent(String(repoId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Disable the currently active policy repo, this action means to turn off the gitops feature. If there is no active policy repo, this action will do nothing.
     * @summary Disable Active Policy Repo
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    disableActivePolicyRepo: async (projId, options = {}) => {
      assertParamExists("disableActivePolicyRepo", "projId", projId);
      const localVarPath = `/v2/projects/{proj_id}/repos/disable`.replace(
        `{${"proj_id"}}`,
        encodeURIComponent(String(projId))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Gets the currently active repository, if such repository exists.
     * @summary Get Active Policy Repo
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActivePolicyRepo: async (projId, options = {}) => {
      assertParamExists("getActivePolicyRepo", "projId", projId);
      const localVarPath = `/v2/projects/{proj_id}/repos/active`.replace(
        `{${"proj_id"}}`,
        encodeURIComponent(String(projId))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Gets a single repository matching the given repo_id, if such repository exists.
     * @summary Get Policy Repo
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} repoId Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPolicyRepo: async (projId, repoId, options = {}) => {
      assertParamExists("getPolicyRepo", "projId", projId);
      assertParamExists("getPolicyRepo", "repoId", repoId);
      const localVarPath = `/v2/projects/{proj_id}/repos/{repo_id}`.replace(`{${"proj_id"}}`, encodeURIComponent(String(projId))).replace(`{${"repo_id"}}`, encodeURIComponent(String(repoId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Lists all the policy repositories under a given project.
     * @summary List Policy Repos
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPolicyRepos: async (projId, page, perPage, options = {}) => {
      assertParamExists("listPolicyRepos", "projId", projId);
      const localVarPath = `/v2/projects/{proj_id}/repos`.replace(
        `{${"proj_id"}}`,
        encodeURIComponent(String(projId))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (perPage !== void 0) {
        localVarQueryParameter["per_page"] = perPage;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
var PolicyGitRepositoriesApiFp = function(configuration) {
  const localVarAxiosParamCreator = PolicyGitRepositoriesApiAxiosParamCreator(configuration);
  return {
    /**
     * Disable the currently active policy repo, this action means to turn off the gitops feature. If there is no active policy repo, this action will do nothing.
     * @summary Activate Policy Repo
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} repoId Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async activatePolicyRepo(projId, repoId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.activatePolicyRepo(
        projId,
        repoId,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    },
    /**
     * Creates a new policy repository configuration under a given project. The given repository is created with status \'pending\', it will be changed and used as the \'active\' repository for the policy only after a successful attempt to use it. The repository main branch must be present in the remote.
     * @summary Create Policy Repo
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {PolicyRepoCreate} policyRepoCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPolicyRepo(projId, policyRepoCreate, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createPolicyRepo(
        projId,
        policyRepoCreate,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    },
    /**
     * Deletes an environment and all its related data.
     * @summary Delete Policy Repo
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} repoId Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePolicyRepo(projId, repoId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletePolicyRepo(
        projId,
        repoId,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    },
    /**
     * Disable the currently active policy repo, this action means to turn off the gitops feature. If there is no active policy repo, this action will do nothing.
     * @summary Disable Active Policy Repo
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async disableActivePolicyRepo(projId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.disableActivePolicyRepo(
        projId,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    },
    /**
     * Gets the currently active repository, if such repository exists.
     * @summary Get Active Policy Repo
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getActivePolicyRepo(projId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getActivePolicyRepo(
        projId,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    },
    /**
     * Gets a single repository matching the given repo_id, if such repository exists.
     * @summary Get Policy Repo
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} repoId Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPolicyRepo(projId, repoId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPolicyRepo(
        projId,
        repoId,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    },
    /**
     * Lists all the policy repositories under a given project.
     * @summary List Policy Repos
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listPolicyRepos(projId, page, perPage, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listPolicyRepos(
        projId,
        page,
        perPage,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    }
  };
};
var PolicyGitRepositoriesApiFactory = function(configuration, basePath, axios) {
  const localVarFp = PolicyGitRepositoriesApiFp(configuration);
  return {
    /**
     * Disable the currently active policy repo, this action means to turn off the gitops feature. If there is no active policy repo, this action will do nothing.
     * @summary Activate Policy Repo
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} repoId Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activatePolicyRepo(projId, repoId, options) {
      return localVarFp.activatePolicyRepo(projId, repoId, options).then((request) => request(axios, basePath));
    },
    /**
     * Creates a new policy repository configuration under a given project. The given repository is created with status \'pending\', it will be changed and used as the \'active\' repository for the policy only after a successful attempt to use it. The repository main branch must be present in the remote.
     * @summary Create Policy Repo
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {PolicyRepoCreate} policyRepoCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPolicyRepo(projId, policyRepoCreate, options) {
      return localVarFp.createPolicyRepo(projId, policyRepoCreate, options).then((request) => request(axios, basePath));
    },
    /**
     * Deletes an environment and all its related data.
     * @summary Delete Policy Repo
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} repoId Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePolicyRepo(projId, repoId, options) {
      return localVarFp.deletePolicyRepo(projId, repoId, options).then((request) => request(axios, basePath));
    },
    /**
     * Disable the currently active policy repo, this action means to turn off the gitops feature. If there is no active policy repo, this action will do nothing.
     * @summary Disable Active Policy Repo
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    disableActivePolicyRepo(projId, options) {
      return localVarFp.disableActivePolicyRepo(projId, options).then((request) => request(axios, basePath));
    },
    /**
     * Gets the currently active repository, if such repository exists.
     * @summary Get Active Policy Repo
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActivePolicyRepo(projId, options) {
      return localVarFp.getActivePolicyRepo(projId, options).then((request) => request(axios, basePath));
    },
    /**
     * Gets a single repository matching the given repo_id, if such repository exists.
     * @summary Get Policy Repo
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} repoId Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPolicyRepo(projId, repoId, options) {
      return localVarFp.getPolicyRepo(projId, repoId, options).then((request) => request(axios, basePath));
    },
    /**
     * Lists all the policy repositories under a given project.
     * @summary List Policy Repos
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPolicyRepos(projId, page, perPage, options) {
      return localVarFp.listPolicyRepos(projId, page, perPage, options).then((request) => request(axios, basePath));
    }
  };
};
var PolicyGitRepositoriesApi = class extends BaseAPI {
  /**
   * Disable the currently active policy repo, this action means to turn off the gitops feature. If there is no active policy repo, this action will do nothing.
   * @summary Activate Policy Repo
   * @param {PolicyGitRepositoriesApiActivatePolicyRepoRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PolicyGitRepositoriesApi
   */
  activatePolicyRepo(requestParameters, options) {
    return PolicyGitRepositoriesApiFp(this.configuration).activatePolicyRepo(requestParameters.projId, requestParameters.repoId, options).then((request) => request(this.axios, this.basePath));
  }
  /**
   * Creates a new policy repository configuration under a given project. The given repository is created with status \'pending\', it will be changed and used as the \'active\' repository for the policy only after a successful attempt to use it. The repository main branch must be present in the remote.
   * @summary Create Policy Repo
   * @param {PolicyGitRepositoriesApiCreatePolicyRepoRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PolicyGitRepositoriesApi
   */
  createPolicyRepo(requestParameters, options) {
    return PolicyGitRepositoriesApiFp(this.configuration).createPolicyRepo(requestParameters.projId, requestParameters.policyRepoCreate, options).then((request) => request(this.axios, this.basePath));
  }
  /**
   * Deletes an environment and all its related data.
   * @summary Delete Policy Repo
   * @param {PolicyGitRepositoriesApiDeletePolicyRepoRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PolicyGitRepositoriesApi
   */
  deletePolicyRepo(requestParameters, options) {
    return PolicyGitRepositoriesApiFp(this.configuration).deletePolicyRepo(requestParameters.projId, requestParameters.repoId, options).then((request) => request(this.axios, this.basePath));
  }
  /**
   * Disable the currently active policy repo, this action means to turn off the gitops feature. If there is no active policy repo, this action will do nothing.
   * @summary Disable Active Policy Repo
   * @param {PolicyGitRepositoriesApiDisableActivePolicyRepoRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PolicyGitRepositoriesApi
   */
  disableActivePolicyRepo(requestParameters, options) {
    return PolicyGitRepositoriesApiFp(this.configuration).disableActivePolicyRepo(requestParameters.projId, options).then((request) => request(this.axios, this.basePath));
  }
  /**
   * Gets the currently active repository, if such repository exists.
   * @summary Get Active Policy Repo
   * @param {PolicyGitRepositoriesApiGetActivePolicyRepoRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PolicyGitRepositoriesApi
   */
  getActivePolicyRepo(requestParameters, options) {
    return PolicyGitRepositoriesApiFp(this.configuration).getActivePolicyRepo(requestParameters.projId, options).then((request) => request(this.axios, this.basePath));
  }
  /**
   * Gets a single repository matching the given repo_id, if such repository exists.
   * @summary Get Policy Repo
   * @param {PolicyGitRepositoriesApiGetPolicyRepoRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PolicyGitRepositoriesApi
   */
  getPolicyRepo(requestParameters, options) {
    return PolicyGitRepositoriesApiFp(this.configuration).getPolicyRepo(requestParameters.projId, requestParameters.repoId, options).then((request) => request(this.axios, this.basePath));
  }
  /**
   * Lists all the policy repositories under a given project.
   * @summary List Policy Repos
   * @param {PolicyGitRepositoriesApiListPolicyReposRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PolicyGitRepositoriesApi
   */
  listPolicyRepos(requestParameters, options) {
    return PolicyGitRepositoriesApiFp(this.configuration).listPolicyRepos(
      requestParameters.projId,
      requestParameters.page,
      requestParameters.perPage,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
};
export {
  PolicyGitRepositoriesApi,
  PolicyGitRepositoriesApiAxiosParamCreator,
  PolicyGitRepositoriesApiFactory,
  PolicyGitRepositoriesApiFp
};
//# sourceMappingURL=policy-git-repositories-api.mjs.map