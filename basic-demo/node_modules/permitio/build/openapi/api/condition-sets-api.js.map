{"version":3,"sources":["../../../src/openapi/api/condition-sets-api.ts","../../../src/openapi/base.ts","../../../src/openapi/common.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { ConditionSetCreate } from '../types';\n// @ts-ignore\nimport { ConditionSetRead } from '../types';\n// @ts-ignore\nimport { ConditionSetType } from '../types';\n// @ts-ignore\nimport { ConditionSetUpdate } from '../types';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n/**\n * ConditionSetsApi - axios parameter creator\n * @export\n */\nexport const ConditionSetsApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     * Creates a new condition set (can be either a user set or a resource set).\n     * @summary Create Condition Set\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ConditionSetCreate} conditionSetCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createConditionSet: async (\n      projId: string,\n      envId: string,\n      conditionSetCreate: ConditionSetCreate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('createConditionSet', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('createConditionSet', 'envId', envId);\n      // verify required parameter 'conditionSetCreate' is not null or undefined\n      assertParamExists('createConditionSet', 'conditionSetCreate', conditionSetCreate);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/condition_sets`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        conditionSetCreate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Deletes a condition set and all its related data. This includes any permissions granted to said condition set (i.e: any matching condition set rules).\n     * @summary Delete Condition Set\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteConditionSet: async (\n      projId: string,\n      envId: string,\n      conditionSetId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('deleteConditionSet', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('deleteConditionSet', 'envId', envId);\n      // verify required parameter 'conditionSetId' is not null or undefined\n      assertParamExists('deleteConditionSet', 'conditionSetId', conditionSetId);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'condition_set_id'}}`, encodeURIComponent(String(conditionSetId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Gets a single condition set, if such condition set exists.\n     * @summary Get Condition Set\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getConditionSet: async (\n      projId: string,\n      envId: string,\n      conditionSetId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getConditionSet', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getConditionSet', 'envId', envId);\n      // verify required parameter 'conditionSetId' is not null or undefined\n      assertParamExists('getConditionSet', 'conditionSetId', conditionSetId);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'condition_set_id'}}`, encodeURIComponent(String(conditionSetId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Gets all ancestors (parent, parent of parent, and so on)\n     * @summary Get Condition Set Ancestors\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getConditionSetAncestors: async (\n      projId: string,\n      envId: string,\n      conditionSetId: string,\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getConditionSetAncestors', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getConditionSetAncestors', 'envId', envId);\n      // verify required parameter 'conditionSetId' is not null or undefined\n      assertParamExists('getConditionSetAncestors', 'conditionSetId', conditionSetId);\n      const localVarPath =\n        `/v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}/ancestors`\n          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n          .replace(`{${'condition_set_id'}}`, encodeURIComponent(String(conditionSetId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Gets all descendants (children, children of children, and so on)\n     * @summary Get Condition Set Descendants\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getConditionSetDescendants: async (\n      projId: string,\n      envId: string,\n      conditionSetId: string,\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getConditionSetDescendants', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getConditionSetDescendants', 'envId', envId);\n      // verify required parameter 'conditionSetId' is not null or undefined\n      assertParamExists('getConditionSetDescendants', 'conditionSetId', conditionSetId);\n      const localVarPath =\n        `/v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}/descendants`\n          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n          .replace(`{${'condition_set_id'}}`, encodeURIComponent(String(conditionSetId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get Condition Set Possible Parents\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getConditionSetPossibleParents: async (\n      projId: string,\n      envId: string,\n      conditionSetId: string,\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getConditionSetPossibleParents', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getConditionSetPossibleParents', 'envId', envId);\n      // verify required parameter 'conditionSetId' is not null or undefined\n      assertParamExists('getConditionSetPossibleParents', 'conditionSetId', conditionSetId);\n      const localVarPath =\n        `/v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}/possible_parents`\n          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n          .replace(`{${'condition_set_id'}}`, encodeURIComponent(String(conditionSetId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Lists all condition sets matching a filter.\n     * @summary List Condition Sets\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ConditionSetType} [type] if provided, will return only the condition sets of the specified type. e.g: only user sets.\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listConditionSets: async (\n      projId: string,\n      envId: string,\n      type?: ConditionSetType,\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('listConditionSets', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('listConditionSets', 'envId', envId);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/condition_sets`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (type !== undefined) {\n        localVarQueryParameter['type'] = type;\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Partially updates a condition set. Fields that will be provided will be completely overwritten.\n     * @summary Update Condition Set\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n     * @param {ConditionSetUpdate} conditionSetUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateConditionSet: async (\n      projId: string,\n      envId: string,\n      conditionSetId: string,\n      conditionSetUpdate: ConditionSetUpdate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('updateConditionSet', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('updateConditionSet', 'envId', envId);\n      // verify required parameter 'conditionSetId' is not null or undefined\n      assertParamExists('updateConditionSet', 'conditionSetId', conditionSetId);\n      // verify required parameter 'conditionSetUpdate' is not null or undefined\n      assertParamExists('updateConditionSet', 'conditionSetUpdate', conditionSetUpdate);\n      const localVarPath = `/v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'condition_set_id'}}`, encodeURIComponent(String(conditionSetId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        conditionSetUpdate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * ConditionSetsApi - functional programming interface\n * @export\n */\nexport const ConditionSetsApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = ConditionSetsApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * Creates a new condition set (can be either a user set or a resource set).\n     * @summary Create Condition Set\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ConditionSetCreate} conditionSetCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async createConditionSet(\n      projId: string,\n      envId: string,\n      conditionSetCreate: ConditionSetCreate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConditionSetRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.createConditionSet(\n        projId,\n        envId,\n        conditionSetCreate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Deletes a condition set and all its related data. This includes any permissions granted to said condition set (i.e: any matching condition set rules).\n     * @summary Delete Condition Set\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async deleteConditionSet(\n      projId: string,\n      envId: string,\n      conditionSetId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteConditionSet(\n        projId,\n        envId,\n        conditionSetId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Gets a single condition set, if such condition set exists.\n     * @summary Get Condition Set\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getConditionSet(\n      projId: string,\n      envId: string,\n      conditionSetId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConditionSetRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getConditionSet(\n        projId,\n        envId,\n        conditionSetId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Gets all ancestors (parent, parent of parent, and so on)\n     * @summary Get Condition Set Ancestors\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getConditionSetAncestors(\n      projId: string,\n      envId: string,\n      conditionSetId: string,\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConditionSetRead>>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getConditionSetAncestors(\n        projId,\n        envId,\n        conditionSetId,\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Gets all descendants (children, children of children, and so on)\n     * @summary Get Condition Set Descendants\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getConditionSetDescendants(\n      projId: string,\n      envId: string,\n      conditionSetId: string,\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConditionSetRead>>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getConditionSetDescendants(\n        projId,\n        envId,\n        conditionSetId,\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get Condition Set Possible Parents\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getConditionSetPossibleParents(\n      projId: string,\n      envId: string,\n      conditionSetId: string,\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConditionSetRead>>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getConditionSetPossibleParents(\n        projId,\n        envId,\n        conditionSetId,\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Lists all condition sets matching a filter.\n     * @summary List Condition Sets\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ConditionSetType} [type] if provided, will return only the condition sets of the specified type. e.g: only user sets.\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async listConditionSets(\n      projId: string,\n      envId: string,\n      type?: ConditionSetType,\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConditionSetRead>>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.listConditionSets(\n        projId,\n        envId,\n        type,\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Partially updates a condition set. Fields that will be provided will be completely overwritten.\n     * @summary Update Condition Set\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n     * @param {ConditionSetUpdate} conditionSetUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async updateConditionSet(\n      projId: string,\n      envId: string,\n      conditionSetId: string,\n      conditionSetUpdate: ConditionSetUpdate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConditionSetRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.updateConditionSet(\n        projId,\n        envId,\n        conditionSetId,\n        conditionSetUpdate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * ConditionSetsApi - factory interface\n * @export\n */\nexport const ConditionSetsApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = ConditionSetsApiFp(configuration);\n  return {\n    /**\n     * Creates a new condition set (can be either a user set or a resource set).\n     * @summary Create Condition Set\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ConditionSetCreate} conditionSetCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createConditionSet(\n      projId: string,\n      envId: string,\n      conditionSetCreate: ConditionSetCreate,\n      options?: any,\n    ): AxiosPromise<ConditionSetRead> {\n      return localVarFp\n        .createConditionSet(projId, envId, conditionSetCreate, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Deletes a condition set and all its related data. This includes any permissions granted to said condition set (i.e: any matching condition set rules).\n     * @summary Delete Condition Set\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteConditionSet(\n      projId: string,\n      envId: string,\n      conditionSetId: string,\n      options?: any,\n    ): AxiosPromise<void> {\n      return localVarFp\n        .deleteConditionSet(projId, envId, conditionSetId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Gets a single condition set, if such condition set exists.\n     * @summary Get Condition Set\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getConditionSet(\n      projId: string,\n      envId: string,\n      conditionSetId: string,\n      options?: any,\n    ): AxiosPromise<ConditionSetRead> {\n      return localVarFp\n        .getConditionSet(projId, envId, conditionSetId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Gets all ancestors (parent, parent of parent, and so on)\n     * @summary Get Condition Set Ancestors\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getConditionSetAncestors(\n      projId: string,\n      envId: string,\n      conditionSetId: string,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<Array<ConditionSetRead>> {\n      return localVarFp\n        .getConditionSetAncestors(projId, envId, conditionSetId, page, perPage, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Gets all descendants (children, children of children, and so on)\n     * @summary Get Condition Set Descendants\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getConditionSetDescendants(\n      projId: string,\n      envId: string,\n      conditionSetId: string,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<Array<ConditionSetRead>> {\n      return localVarFp\n        .getConditionSetDescendants(projId, envId, conditionSetId, page, perPage, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get Condition Set Possible Parents\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getConditionSetPossibleParents(\n      projId: string,\n      envId: string,\n      conditionSetId: string,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<Array<ConditionSetRead>> {\n      return localVarFp\n        .getConditionSetPossibleParents(projId, envId, conditionSetId, page, perPage, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Lists all condition sets matching a filter.\n     * @summary List Condition Sets\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ConditionSetType} [type] if provided, will return only the condition sets of the specified type. e.g: only user sets.\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listConditionSets(\n      projId: string,\n      envId: string,\n      type?: ConditionSetType,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<Array<ConditionSetRead>> {\n      return localVarFp\n        .listConditionSets(projId, envId, type, page, perPage, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Partially updates a condition set. Fields that will be provided will be completely overwritten.\n     * @summary Update Condition Set\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n     * @param {ConditionSetUpdate} conditionSetUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateConditionSet(\n      projId: string,\n      envId: string,\n      conditionSetId: string,\n      conditionSetUpdate: ConditionSetUpdate,\n      options?: any,\n    ): AxiosPromise<ConditionSetRead> {\n      return localVarFp\n        .updateConditionSet(projId, envId, conditionSetId, conditionSetUpdate, options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for createConditionSet operation in ConditionSetsApi.\n * @export\n * @interface ConditionSetsApiCreateConditionSetRequest\n */\nexport interface ConditionSetsApiCreateConditionSetRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiCreateConditionSet\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiCreateConditionSet\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {ConditionSetCreate}\n   * @memberof ConditionSetsApiCreateConditionSet\n   */\n  readonly conditionSetCreate: ConditionSetCreate;\n}\n\n/**\n * Request parameters for deleteConditionSet operation in ConditionSetsApi.\n * @export\n * @interface ConditionSetsApiDeleteConditionSetRequest\n */\nexport interface ConditionSetsApiDeleteConditionSetRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiDeleteConditionSet\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiDeleteConditionSet\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiDeleteConditionSet\n   */\n  readonly conditionSetId: string;\n}\n\n/**\n * Request parameters for getConditionSet operation in ConditionSetsApi.\n * @export\n * @interface ConditionSetsApiGetConditionSetRequest\n */\nexport interface ConditionSetsApiGetConditionSetRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiGetConditionSet\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiGetConditionSet\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiGetConditionSet\n   */\n  readonly conditionSetId: string;\n}\n\n/**\n * Request parameters for getConditionSetAncestors operation in ConditionSetsApi.\n * @export\n * @interface ConditionSetsApiGetConditionSetAncestorsRequest\n */\nexport interface ConditionSetsApiGetConditionSetAncestorsRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiGetConditionSetAncestors\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiGetConditionSetAncestors\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiGetConditionSetAncestors\n   */\n  readonly conditionSetId: string;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof ConditionSetsApiGetConditionSetAncestors\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof ConditionSetsApiGetConditionSetAncestors\n   */\n  readonly perPage?: number;\n}\n\n/**\n * Request parameters for getConditionSetDescendants operation in ConditionSetsApi.\n * @export\n * @interface ConditionSetsApiGetConditionSetDescendantsRequest\n */\nexport interface ConditionSetsApiGetConditionSetDescendantsRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiGetConditionSetDescendants\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiGetConditionSetDescendants\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiGetConditionSetDescendants\n   */\n  readonly conditionSetId: string;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof ConditionSetsApiGetConditionSetDescendants\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof ConditionSetsApiGetConditionSetDescendants\n   */\n  readonly perPage?: number;\n}\n\n/**\n * Request parameters for getConditionSetPossibleParents operation in ConditionSetsApi.\n * @export\n * @interface ConditionSetsApiGetConditionSetPossibleParentsRequest\n */\nexport interface ConditionSetsApiGetConditionSetPossibleParentsRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiGetConditionSetPossibleParents\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiGetConditionSetPossibleParents\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiGetConditionSetPossibleParents\n   */\n  readonly conditionSetId: string;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof ConditionSetsApiGetConditionSetPossibleParents\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof ConditionSetsApiGetConditionSetPossibleParents\n   */\n  readonly perPage?: number;\n}\n\n/**\n * Request parameters for listConditionSets operation in ConditionSetsApi.\n * @export\n * @interface ConditionSetsApiListConditionSetsRequest\n */\nexport interface ConditionSetsApiListConditionSetsRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiListConditionSets\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiListConditionSets\n   */\n  readonly envId: string;\n\n  /**\n   * if provided, will return only the condition sets of the specified type. e.g: only user sets.\n   * @type {ConditionSetType}\n   * @memberof ConditionSetsApiListConditionSets\n   */\n  readonly type?: ConditionSetType;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof ConditionSetsApiListConditionSets\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof ConditionSetsApiListConditionSets\n   */\n  readonly perPage?: number;\n}\n\n/**\n * Request parameters for updateConditionSet operation in ConditionSetsApi.\n * @export\n * @interface ConditionSetsApiUpdateConditionSetRequest\n */\nexport interface ConditionSetsApiUpdateConditionSetRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiUpdateConditionSet\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiUpdateConditionSet\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ConditionSetsApiUpdateConditionSet\n   */\n  readonly conditionSetId: string;\n\n  /**\n   *\n   * @type {ConditionSetUpdate}\n   * @memberof ConditionSetsApiUpdateConditionSet\n   */\n  readonly conditionSetUpdate: ConditionSetUpdate;\n}\n\n/**\n * ConditionSetsApi - object-oriented interface\n * @export\n * @class ConditionSetsApi\n * @extends {BaseAPI}\n */\nexport class ConditionSetsApi extends BaseAPI {\n  /**\n   * Creates a new condition set (can be either a user set or a resource set).\n   * @summary Create Condition Set\n   * @param {ConditionSetsApiCreateConditionSetRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ConditionSetsApi\n   */\n  public createConditionSet(\n    requestParameters: ConditionSetsApiCreateConditionSetRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ConditionSetsApiFp(this.configuration)\n      .createConditionSet(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.conditionSetCreate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Deletes a condition set and all its related data. This includes any permissions granted to said condition set (i.e: any matching condition set rules).\n   * @summary Delete Condition Set\n   * @param {ConditionSetsApiDeleteConditionSetRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ConditionSetsApi\n   */\n  public deleteConditionSet(\n    requestParameters: ConditionSetsApiDeleteConditionSetRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ConditionSetsApiFp(this.configuration)\n      .deleteConditionSet(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.conditionSetId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Gets a single condition set, if such condition set exists.\n   * @summary Get Condition Set\n   * @param {ConditionSetsApiGetConditionSetRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ConditionSetsApi\n   */\n  public getConditionSet(\n    requestParameters: ConditionSetsApiGetConditionSetRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ConditionSetsApiFp(this.configuration)\n      .getConditionSet(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.conditionSetId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Gets all ancestors (parent, parent of parent, and so on)\n   * @summary Get Condition Set Ancestors\n   * @param {ConditionSetsApiGetConditionSetAncestorsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ConditionSetsApi\n   */\n  public getConditionSetAncestors(\n    requestParameters: ConditionSetsApiGetConditionSetAncestorsRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ConditionSetsApiFp(this.configuration)\n      .getConditionSetAncestors(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.conditionSetId,\n        requestParameters.page,\n        requestParameters.perPage,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Gets all descendants (children, children of children, and so on)\n   * @summary Get Condition Set Descendants\n   * @param {ConditionSetsApiGetConditionSetDescendantsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ConditionSetsApi\n   */\n  public getConditionSetDescendants(\n    requestParameters: ConditionSetsApiGetConditionSetDescendantsRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ConditionSetsApiFp(this.configuration)\n      .getConditionSetDescendants(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.conditionSetId,\n        requestParameters.page,\n        requestParameters.perPage,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get Condition Set Possible Parents\n   * @param {ConditionSetsApiGetConditionSetPossibleParentsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ConditionSetsApi\n   */\n  public getConditionSetPossibleParents(\n    requestParameters: ConditionSetsApiGetConditionSetPossibleParentsRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ConditionSetsApiFp(this.configuration)\n      .getConditionSetPossibleParents(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.conditionSetId,\n        requestParameters.page,\n        requestParameters.perPage,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Lists all condition sets matching a filter.\n   * @summary List Condition Sets\n   * @param {ConditionSetsApiListConditionSetsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ConditionSetsApi\n   */\n  public listConditionSets(\n    requestParameters: ConditionSetsApiListConditionSetsRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ConditionSetsApiFp(this.configuration)\n      .listConditionSets(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.type,\n        requestParameters.page,\n        requestParameters.perPage,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Partially updates a condition set. Fields that will be provided will be completely overwritten.\n   * @summary Update Condition Set\n   * @param {ConditionSetsApiUpdateConditionSetRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ConditionSetsApi\n   */\n  public updateConditionSet(\n    requestParameters: ConditionSetsApiUpdateConditionSetRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ConditionSetsApiFp(this.configuration)\n      .updateConditionSet(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.conditionSetId,\n        requestParameters.conditionSetUpdate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Configuration } from './configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\n\nexport const BASE_PATH = 'http://localhost'.replace(/\\/+$/, '');\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n  csv: ',',\n  ssv: ' ',\n  tsv: '\\t',\n  pipes: '|',\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n  url: string;\n  options: AxiosRequestConfig;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n  protected configuration: Configuration | undefined;\n\n  constructor(\n    configuration?: Configuration,\n    protected basePath: string = BASE_PATH,\n    protected axios: AxiosInstance = globalAxios,\n  ) {\n    if (configuration) {\n      this.configuration = configuration;\n      this.basePath = configuration.basePath || this.basePath;\n    }\n  }\n}\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n  name: 'RequiredError' = 'RequiredError';\n  constructor(public field: string, msg?: string) {\n    super(msg);\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Configuration } from './configuration';\nimport { RequiredError, RequestArgs } from './base';\nimport { AxiosInstance, AxiosResponse } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com';\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (\n  functionName: string,\n  paramName: string,\n  paramValue: unknown,\n) {\n  if (paramValue === null || paramValue === undefined) {\n    throw new RequiredError(\n      paramName,\n      `Required parameter ${paramName} was null or undefined when calling ${functionName}.`,\n    );\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (\n  object: any,\n  keyParamName: string,\n  configuration?: Configuration,\n) {\n  if (configuration && configuration.apiKey) {\n    const localVarApiKeyValue =\n      typeof configuration.apiKey === 'function'\n        ? await configuration.apiKey(keyParamName)\n        : await configuration.apiKey;\n    object[keyParamName] = localVarApiKeyValue;\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n  if (configuration && (configuration.username || configuration.password)) {\n    object['auth'] = { username: configuration.username, password: configuration.password };\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n  if (configuration && configuration.accessToken) {\n    const accessToken =\n      typeof configuration.accessToken === 'function'\n        ? await configuration.accessToken()\n        : await configuration.accessToken;\n    object['Authorization'] = 'Bearer ' + accessToken;\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (\n  object: any,\n  name: string,\n  scopes: string[],\n  configuration?: Configuration,\n) {\n  if (configuration && configuration.accessToken) {\n    const localVarAccessTokenValue =\n      typeof configuration.accessToken === 'function'\n        ? await configuration.accessToken(name, scopes)\n        : await configuration.accessToken;\n    object['Authorization'] = 'Bearer ' + localVarAccessTokenValue;\n  }\n};\n\nfunction setFlattenedQueryParams(\n  urlSearchParams: URLSearchParams,\n  parameter: any,\n  key: string = '',\n): void {\n  if (typeof parameter === 'object') {\n    if (Array.isArray(parameter)) {\n      (parameter as any[]).forEach((item) => setFlattenedQueryParams(urlSearchParams, item, key));\n    } else {\n      Object.keys(parameter).forEach((currentKey) =>\n        setFlattenedQueryParams(\n          urlSearchParams,\n          parameter[currentKey],\n          `${key}${key !== '' ? '.' : ''}${currentKey}`,\n        ),\n      );\n    }\n  } else {\n    if (urlSearchParams.has(key)) {\n      urlSearchParams.append(key, parameter);\n    } else {\n      urlSearchParams.set(key, parameter);\n    }\n  }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n  const searchParams = new URLSearchParams(url.search);\n  setFlattenedQueryParams(searchParams, objects);\n  url.search = searchParams.toString();\n};\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (\n  value: any,\n  requestOptions: any,\n  configuration?: Configuration,\n) {\n  const nonString = typeof value !== 'string';\n  const needsSerialization =\n    nonString && configuration && configuration.isJsonMime\n      ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n      : nonString;\n  return needsSerialization ? JSON.stringify(value !== undefined ? value : {}) : value || '';\n};\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n  return url.pathname + url.search + url.hash;\n};\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (\n  axiosArgs: RequestArgs,\n  globalAxios: AxiosInstance,\n  BASE_PATH: string,\n  configuration?: Configuration,\n) {\n  return <T = unknown, R = AxiosResponse<T>>(\n    axios: AxiosInstance = globalAxios,\n    basePath: string = BASE_PATH,\n  ) => {\n    const axiosRequestArgs = {\n      ...axiosArgs.options,\n      url: (configuration?.basePath || basePath) + axiosArgs.url,\n    };\n    return axios.request<T, R>(axiosRequestArgs);\n  };\n};\n"],"mappings":"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","names":["import_axios","globalAxios","globalAxios","BASE_PATH","globalAxios"]}