// src/openapi/api/bulk-operations-api.ts
import globalAxios2 from "axios";

// src/openapi/base.ts
import globalAxios from "axios";
var BASE_PATH = "http://localhost".replace(/\/+$/, "");
var BaseAPI = class {
  constructor(configuration, basePath = BASE_PATH, axios = globalAxios) {
    this.basePath = basePath;
    this.axios = axios;
    if (configuration) {
      this.configuration = configuration;
      this.basePath = configuration.basePath || this.basePath;
    }
  }
};
var RequiredError = class extends Error {
  constructor(field, msg) {
    super(msg);
    this.field = field;
    this.name = "RequiredError";
  }
};

// src/openapi/common.ts
var DUMMY_BASE_URL = "https://example.com";
var assertParamExists = function(functionName, paramName, paramValue) {
  if (paramValue === null || paramValue === void 0) {
    throw new RequiredError(
      paramName,
      `Required parameter ${paramName} was null or undefined when calling ${functionName}.`
    );
  }
};
var setBearerAuthToObject = async function(object, configuration) {
  if (configuration && configuration.accessToken) {
    const accessToken = typeof configuration.accessToken === "function" ? await configuration.accessToken() : await configuration.accessToken;
    object["Authorization"] = "Bearer " + accessToken;
  }
};
function setFlattenedQueryParams(urlSearchParams, parameter, key = "") {
  if (typeof parameter === "object") {
    if (Array.isArray(parameter)) {
      parameter.forEach((item) => setFlattenedQueryParams(urlSearchParams, item, key));
    } else {
      Object.keys(parameter).forEach(
        (currentKey) => setFlattenedQueryParams(
          urlSearchParams,
          parameter[currentKey],
          `${key}${key !== "" ? "." : ""}${currentKey}`
        )
      );
    }
  } else {
    if (urlSearchParams.has(key)) {
      urlSearchParams.append(key, parameter);
    } else {
      urlSearchParams.set(key, parameter);
    }
  }
}
var setSearchParams = function(url, ...objects) {
  const searchParams = new URLSearchParams(url.search);
  setFlattenedQueryParams(searchParams, objects);
  url.search = searchParams.toString();
};
var serializeDataIfNeeded = function(value, requestOptions, configuration) {
  const nonString = typeof value !== "string";
  const needsSerialization = nonString && configuration && configuration.isJsonMime ? configuration.isJsonMime(requestOptions.headers["Content-Type"]) : nonString;
  return needsSerialization ? JSON.stringify(value !== void 0 ? value : {}) : value || "";
};
var toPathString = function(url) {
  return url.pathname + url.search + url.hash;
};
var createRequestFunction = function(axiosArgs, globalAxios3, BASE_PATH2, configuration) {
  return (axios = globalAxios3, basePath = BASE_PATH2) => {
    const axiosRequestArgs = {
      ...axiosArgs.options,
      url: ((configuration == null ? void 0 : configuration.basePath) || basePath) + axiosArgs.url
    };
    return axios.request(axiosRequestArgs);
  };
};

// src/openapi/api/bulk-operations-api.ts
var BulkOperationsApiAxiosParamCreator = function(configuration) {
  return {
    /**
     *
     * @summary Bulk Create Tenants
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {any} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkCreateTenants: async (projId, envId, requestBody, options = {}) => {
      assertParamExists("bulkCreateTenants", "projId", projId);
      assertParamExists("bulkCreateTenants", "envId", envId);
      assertParamExists("bulkCreateTenants", "requestBody", requestBody);
      const localVarPath = `/v2/facts/{proj_id}/{env_id}/bulk/tenants`.replace(`{${"proj_id"}}`, encodeURIComponent(String(projId))).replace(`{${"env_id"}}`, encodeURIComponent(String(envId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary Bulk Create Users
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param userCreateBulkOperation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkCreateUsers: async (projId, envId, userCreateBulkOperation, options = {}) => {
      assertParamExists("bulkCreateUsers", "projId", projId);
      assertParamExists("bulkCreateUsers", "envId", envId);
      assertParamExists("bulkCreateUsers", "requestBody", userCreateBulkOperation);
      const localVarPath = `/v2/facts/{proj_id}/{env_id}/bulk/users`.replace(`{${"proj_id"}}`, encodeURIComponent(String(projId))).replace(`{${"env_id"}}`, encodeURIComponent(String(envId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userCreateBulkOperation,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Deletes many Resource Instances.
     * @summary Bulk Delete Resource Instances
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ResourceInstanceDeleteBulkOperation} resourceInstanceDeleteBulkOperation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkDeleteResourceInstances: async (projId, envId, resourceInstanceDeleteBulkOperation, options = {}) => {
      assertParamExists("bulkDeleteResourceInstances", "projId", projId);
      assertParamExists("bulkDeleteResourceInstances", "envId", envId);
      assertParamExists(
        "bulkDeleteResourceInstances",
        "resourceInstanceDeleteBulkOperation",
        resourceInstanceDeleteBulkOperation
      );
      const localVarPath = `/v2/facts/{proj_id}/{env_id}/bulk/resource_instances`.replace(`{${"proj_id"}}`, encodeURIComponent(String(projId))).replace(`{${"env_id"}}`, encodeURIComponent(String(envId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        resourceInstanceDeleteBulkOperation,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary Bulk Delete Tenants
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {any} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkDeleteTenants: async (projId, envId, requestBody, options = {}) => {
      assertParamExists("bulkDeleteTenants", "projId", projId);
      assertParamExists("bulkDeleteTenants", "envId", envId);
      assertParamExists("bulkDeleteTenants", "requestBody", requestBody);
      const localVarPath = `/v2/facts/{proj_id}/{env_id}/bulk/tenants`.replace(`{${"proj_id"}}`, encodeURIComponent(String(projId))).replace(`{${"env_id"}}`, encodeURIComponent(String(envId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary Bulk Delete Users
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param userDeleteBulkOperation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkDeleteUsers: async (projId, envId, userDeleteBulkOperation, options = {}) => {
      assertParamExists("bulkDeleteUsers", "projId", projId);
      assertParamExists("bulkDeleteUsers", "envId", envId);
      assertParamExists("bulkDeleteUsers", "requestBody", userDeleteBulkOperation);
      const localVarPath = `/v2/facts/{proj_id}/{env_id}/bulk/users`.replace(`{${"proj_id"}}`, encodeURIComponent(String(projId))).replace(`{${"env_id"}}`, encodeURIComponent(String(envId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userDeleteBulkOperation,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Creates or replaces Resource Instances. If a resource instance with `key` and `resource` already exists, it will be replaced.
     * @summary Bulk Replace Resource Instances
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ResourceInstanceCreateBulkOperation} resourceInstanceCreateBulkOperation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkReplaceResourceInstances: async (projId, envId, resourceInstanceCreateBulkOperation, options = {}) => {
      assertParamExists("bulkReplaceResourceInstances", "projId", projId);
      assertParamExists("bulkReplaceResourceInstances", "envId", envId);
      assertParamExists(
        "bulkReplaceResourceInstances",
        "resourceInstanceCreateBulkOperation",
        resourceInstanceCreateBulkOperation
      );
      const localVarPath = `/v2/facts/{proj_id}/{env_id}/bulk/resource_instances`.replace(`{${"proj_id"}}`, encodeURIComponent(String(projId))).replace(`{${"env_id"}}`, encodeURIComponent(String(envId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        resourceInstanceCreateBulkOperation,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary Bulk Replace Users
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param userReplaceBulkOperation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkReplaceUsers: async (projId, envId, userReplaceBulkOperation, options = {}) => {
      assertParamExists("bulkReplaceUsers", "projId", projId);
      assertParamExists("bulkReplaceUsers", "envId", envId);
      assertParamExists("bulkReplaceUsers", "requestBody", userReplaceBulkOperation);
      const localVarPath = `/v2/facts/{proj_id}/{env_id}/bulk/users`.replace(`{${"proj_id"}}`, encodeURIComponent(String(projId))).replace(`{${"env_id"}}`, encodeURIComponent(String(envId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userReplaceBulkOperation,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
var BulkOperationsApiFp = function(configuration) {
  const localVarAxiosParamCreator = BulkOperationsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Bulk Create Tenants
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {{ [key: string]: any; }} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async bulkCreateTenants(projId, envId, requestBody, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.bulkCreateTenants(
        projId,
        envId,
        requestBody,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Bulk Create Users
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param userCreateBulkOperation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async bulkCreateUsers(projId, envId, userCreateBulkOperation, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.bulkCreateUsers(
        projId,
        envId,
        userCreateBulkOperation,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    },
    /**
     * Deletes many Resource Instances.
     * @summary Bulk Delete Resource Instances
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ResourceInstanceDeleteBulkOperation} resourceInstanceDeleteBulkOperation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async bulkDeleteResourceInstances(projId, envId, resourceInstanceDeleteBulkOperation, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.bulkDeleteResourceInstances(
        projId,
        envId,
        resourceInstanceDeleteBulkOperation,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Bulk Delete Tenants
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {{ [key: string]: any; }} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async bulkDeleteTenants(projId, envId, requestBody, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.bulkDeleteTenants(
        projId,
        envId,
        requestBody,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Bulk Delete Users
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param userDeleteBulkOperation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async bulkDeleteUsers(projId, envId, userDeleteBulkOperation, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.bulkDeleteUsers(
        projId,
        envId,
        userDeleteBulkOperation,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    },
    /**
     * Creates or replaces Resource Instances. If a resource instance with `key` and `resource` already exists, it will be replaced.
     * @summary Bulk Replace Resource Instances
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ResourceInstanceCreateBulkOperation} resourceInstanceCreateBulkOperation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async bulkReplaceResourceInstances(projId, envId, resourceInstanceCreateBulkOperation, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.bulkReplaceResourceInstances(
        projId,
        envId,
        resourceInstanceCreateBulkOperation,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Bulk Replace Users
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param userReplaceBulkOperation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async bulkReplaceUsers(projId, envId, userReplaceBulkOperation, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.bulkReplaceUsers(
        projId,
        envId,
        userReplaceBulkOperation,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios2, BASE_PATH, configuration);
    }
  };
};
var BulkOperationsApiFactory = function(configuration, basePath, axios) {
  const localVarFp = BulkOperationsApiFp(configuration);
  return {
    /**
     *
     * @summary Bulk Create Tenants
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {{ [key: string]: any; }} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkCreateTenants(projId, envId, requestBody, options) {
      return localVarFp.bulkCreateTenants(projId, envId, requestBody, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Bulk Create Users
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param userCreateBulkOperation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkCreateUsers(projId, envId, userCreateBulkOperation, options) {
      return localVarFp.bulkCreateUsers(projId, envId, userCreateBulkOperation, options).then((request) => request(axios, basePath));
    },
    /**
     * Deletes many Resource Instances.
     * @summary Bulk Delete Resource Instances
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ResourceInstanceDeleteBulkOperation} resourceInstanceDeleteBulkOperation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkDeleteResourceInstances(projId, envId, resourceInstanceDeleteBulkOperation, options) {
      return localVarFp.bulkDeleteResourceInstances(projId, envId, resourceInstanceDeleteBulkOperation, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Bulk Delete Tenants
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {{ [key: string]: any; }} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkDeleteTenants(projId, envId, requestBody, options) {
      return localVarFp.bulkDeleteTenants(projId, envId, requestBody, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Bulk Delete Users
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param userDeleteBulkOperation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkDeleteUsers(projId, envId, userDeleteBulkOperation, options) {
      return localVarFp.bulkDeleteUsers(projId, envId, userDeleteBulkOperation, options).then((request) => request(axios, basePath));
    },
    /**
     * Creates or replaces Resource Instances. If a resource instance with `key` and `resource` already exists, it will be replaced.
     * @summary Bulk Replace Resource Instances
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ResourceInstanceCreateBulkOperation} resourceInstanceCreateBulkOperation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkReplaceResourceInstances(projId, envId, resourceInstanceCreateBulkOperation, options) {
      return localVarFp.bulkReplaceResourceInstances(projId, envId, resourceInstanceCreateBulkOperation, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Bulk Replace Users
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param userReplaceBulkOperation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkReplaceUsers(projId, envId, userReplaceBulkOperation, options) {
      return localVarFp.bulkReplaceUsers(projId, envId, userReplaceBulkOperation, options).then((request) => request(axios, basePath));
    }
  };
};
var BulkOperationsApi = class extends BaseAPI {
  /**
   *
   * @summary Bulk Create Tenants
   * @param {BulkOpertionsApiBulkCreateTenantsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BulkOperationsApi
   */
  bulkCreateTenants(requestParameters, options) {
    return BulkOperationsApiFp(this.configuration).bulkCreateTenants(
      requestParameters.projId,
      requestParameters.envId,
      requestParameters.requestBody,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Bulk Create Users
   * @param {BulkOperationsApiBulkCreateUsersRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BulkOperationsApi
   */
  bulkCreateUsers(requestParameters, options) {
    return BulkOperationsApiFp(this.configuration).bulkCreateUsers(
      requestParameters.projId,
      requestParameters.envId,
      requestParameters.userCreateBulkOperations,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  /**
   * Deletes many Resource Instances.
   * @summary Bulk Delete Resource Instances
   * @param {BulkOperationsApiBulkDeleteResourceInstancesRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BulkOperationsApi
   */
  bulkDeleteResourceInstances(requestParameters, options) {
    return BulkOperationsApiFp(this.configuration).bulkDeleteResourceInstances(
      requestParameters.projId,
      requestParameters.envId,
      requestParameters.resourceInstanceDeleteBulkOperation,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Bulk Delete Tenants
   * @param {BulkOperationsApiBulkDeleteTenantsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BulkOperationsApi
   */
  bulkDeleteTenants(requestParameters, options) {
    return BulkOperationsApiFp(this.configuration).bulkDeleteTenants(
      requestParameters.projId,
      requestParameters.envId,
      requestParameters.requestBody,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Bulk Delete Users
   * @param {BulkOperationsApiBulkDeleteUsersRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BulkOperationsApi
   */
  async bulkDeleteUsers(requestParameters, options) {
    let request = await BulkOperationsApiFp(this.configuration).bulkDeleteUsers(
      requestParameters.projId,
      requestParameters.envId,
      requestParameters.userDeleteBulkOperation,
      options
    );
    return request(this.axios, this.basePath);
  }
  /**
   * Creates or replaces Resource Instances. If a resource instance with `key` and `resource` already exists, it will be replaced.
   * @summary Bulk Replace Resource Instances
   * @param {BulkOperationsApiBulkReplaceResourceInstancesRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BulkOperationsApi
   */
  bulkReplaceResourceInstances(requestParameters, options) {
    return BulkOperationsApiFp(this.configuration).bulkReplaceResourceInstances(
      requestParameters.projId,
      requestParameters.envId,
      requestParameters.resourceInstanceCreateBulkOperation,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Bulk Replace Users
   * @param {BulkOperationsApiBulkReplaceUsersRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BulkOperationsApi
   */
  bulkReplaceUsers(requestParameters, options) {
    return BulkOperationsApiFp(this.configuration).bulkReplaceUsers(
      requestParameters.projId,
      requestParameters.envId,
      requestParameters.userReplaceBulkOperation,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
};
export {
  BulkOperationsApi,
  BulkOperationsApiAxiosParamCreator,
  BulkOperationsApiFactory,
  BulkOperationsApiFp
};
//# sourceMappingURL=bulk-operations-api.mjs.map