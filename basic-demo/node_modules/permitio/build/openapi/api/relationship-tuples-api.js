"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/openapi/api/relationship-tuples-api.ts
var relationship_tuples_api_exports = {};
__export(relationship_tuples_api_exports, {
  RelationshipTuplesApi: () => RelationshipTuplesApi,
  RelationshipTuplesApiAxiosParamCreator: () => RelationshipTuplesApiAxiosParamCreator,
  RelationshipTuplesApiFactory: () => RelationshipTuplesApiFactory,
  RelationshipTuplesApiFp: () => RelationshipTuplesApiFp
});
module.exports = __toCommonJS(relationship_tuples_api_exports);
var import_axios2 = __toESM(require("axios"));

// src/openapi/base.ts
var import_axios = __toESM(require("axios"));
var BASE_PATH = "http://localhost".replace(/\/+$/, "");
var BaseAPI = class {
  constructor(configuration, basePath = BASE_PATH, axios = import_axios.default) {
    this.basePath = basePath;
    this.axios = axios;
    if (configuration) {
      this.configuration = configuration;
      this.basePath = configuration.basePath || this.basePath;
    }
  }
};
var RequiredError = class extends Error {
  constructor(field, msg) {
    super(msg);
    this.field = field;
    this.name = "RequiredError";
  }
};

// src/openapi/common.ts
var DUMMY_BASE_URL = "https://example.com";
var assertParamExists = function(functionName, paramName, paramValue) {
  if (paramValue === null || paramValue === void 0) {
    throw new RequiredError(
      paramName,
      `Required parameter ${paramName} was null or undefined when calling ${functionName}.`
    );
  }
};
var setBearerAuthToObject = async function(object, configuration) {
  if (configuration && configuration.accessToken) {
    const accessToken = typeof configuration.accessToken === "function" ? await configuration.accessToken() : await configuration.accessToken;
    object["Authorization"] = "Bearer " + accessToken;
  }
};
function setFlattenedQueryParams(urlSearchParams, parameter, key = "") {
  if (typeof parameter === "object") {
    if (Array.isArray(parameter)) {
      parameter.forEach((item) => setFlattenedQueryParams(urlSearchParams, item, key));
    } else {
      Object.keys(parameter).forEach(
        (currentKey) => setFlattenedQueryParams(
          urlSearchParams,
          parameter[currentKey],
          `${key}${key !== "" ? "." : ""}${currentKey}`
        )
      );
    }
  } else {
    if (urlSearchParams.has(key)) {
      urlSearchParams.append(key, parameter);
    } else {
      urlSearchParams.set(key, parameter);
    }
  }
}
var setSearchParams = function(url, ...objects) {
  const searchParams = new URLSearchParams(url.search);
  setFlattenedQueryParams(searchParams, objects);
  url.search = searchParams.toString();
};
var serializeDataIfNeeded = function(value, requestOptions, configuration) {
  const nonString = typeof value !== "string";
  const needsSerialization = nonString && configuration && configuration.isJsonMime ? configuration.isJsonMime(requestOptions.headers["Content-Type"]) : nonString;
  return needsSerialization ? JSON.stringify(value !== void 0 ? value : {}) : value || "";
};
var toPathString = function(url) {
  return url.pathname + url.search + url.hash;
};
var createRequestFunction = function(axiosArgs, globalAxios3, BASE_PATH2, configuration) {
  return (axios = globalAxios3, basePath = BASE_PATH2) => {
    const axiosRequestArgs = {
      ...axiosArgs.options,
      url: ((configuration == null ? void 0 : configuration.basePath) || basePath) + axiosArgs.url
    };
    return axios.request(axiosRequestArgs);
  };
};

// src/openapi/api/relationship-tuples-api.ts
var RelationshipTuplesApiAxiosParamCreator = function(configuration) {
  return {
    /**
     *
     * @summary Bulk create relationship tuples(EAP)
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {RelationshipTupleCreateBulkOperation} relationshipTupleCreateBulkOperation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkCreateRelationshipTuples: async (projId, envId, relationshipTupleCreateBulkOperation, options = {}) => {
      assertParamExists("bulkCreateRelationshipTuples", "projId", projId);
      assertParamExists("bulkCreateRelationshipTuples", "envId", envId);
      assertParamExists(
        "bulkCreateRelationshipTuples",
        "relationshipTupleCreateBulkOperation",
        relationshipTupleCreateBulkOperation
      );
      const localVarPath = `/v2/facts/{proj_id}/{env_id}/relationship_tuples/bulk`.replace(`{${"proj_id"}}`, encodeURIComponent(String(projId))).replace(`{${"env_id"}}`, encodeURIComponent(String(envId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        relationshipTupleCreateBulkOperation,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary Bulk Delete Relationship Tuples
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {RelationshipTupleDeleteBulkOperation} relationshipTupleDeleteBulkOperation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkDeleteRelationshipTuples: async (projId, envId, relationshipTupleDeleteBulkOperation, options = {}) => {
      assertParamExists("bulkDeleteRelationshipTuples", "projId", projId);
      assertParamExists("bulkDeleteRelationshipTuples", "envId", envId);
      assertParamExists(
        "bulkDeleteRelationshipTuples",
        "relationshipTupleDeleteBulkOperation",
        relationshipTupleDeleteBulkOperation
      );
      const localVarPath = `/v2/facts/{proj_id}/{env_id}/relationship_tuples/bulk`.replace(`{${"proj_id"}}`, encodeURIComponent(String(projId))).replace(`{${"env_id"}}`, encodeURIComponent(String(envId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        relationshipTupleDeleteBulkOperation,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Create a relationship between two resource instances using a relation.
     * @summary Create Relationship Tuple
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {RelationshipTupleCreate} relationshipTupleCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRelationshipTuple: async (projId, envId, relationshipTupleCreate, options = {}) => {
      assertParamExists("createRelationshipTuple", "projId", projId);
      assertParamExists("createRelationshipTuple", "envId", envId);
      assertParamExists(
        "createRelationshipTuple",
        "relationshipTupleCreate",
        relationshipTupleCreate
      );
      const localVarPath = `/v2/facts/{proj_id}/{env_id}/relationship_tuples`.replace(`{${"proj_id"}}`, encodeURIComponent(String(projId))).replace(`{${"env_id"}}`, encodeURIComponent(String(envId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        relationshipTupleCreate,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Delete a relationship between two resource instances.
     * @summary Delete Relationship Tuple
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {RelationshipTupleDelete} relationshipTupleDelete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRelationshipTuple: async (projId, envId, relationshipTupleDelete, options = {}) => {
      assertParamExists("deleteRelationshipTuple", "projId", projId);
      assertParamExists("deleteRelationshipTuple", "envId", envId);
      assertParamExists(
        "deleteRelationshipTuple",
        "relationshipTupleDelete",
        relationshipTupleDelete
      );
      const localVarPath = `/v2/facts/{proj_id}/{env_id}/relationship_tuples`.replace(`{${"proj_id"}}`, encodeURIComponent(String(projId))).replace(`{${"env_id"}}`, encodeURIComponent(String(envId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        relationshipTupleDelete,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Lists the relationship tuples defined within an environment.
     * @summary List Relationship Tuples
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {string} [tenant] The tenant key or id to filter by
     * @param {string} [subject] The subject to filter by, accepts either the resource instance id or resource_type:resource_instance
     * @param {string} [relation] The relation id or key to filter by
     * @param {string} [object] The object to filter by, accepts either the resource instance id or resource_type:resource_instance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRelationshipTuples: async (projId, envId, detailed, page, perPage, tenant, subject, relation, object, objectType, subjectType, options = {}) => {
      assertParamExists("listRelationshipTuples", "projId", projId);
      assertParamExists("listRelationshipTuples", "envId", envId);
      const localVarPath = `/v2/facts/{proj_id}/{env_id}/relationship_tuples`.replace(`{${"proj_id"}}`, encodeURIComponent(String(projId))).replace(`{${"env_id"}}`, encodeURIComponent(String(envId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (detailed !== void 0) {
        localVarQueryParameter["detailed"] = detailed;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (perPage !== void 0) {
        localVarQueryParameter["per_page"] = perPage;
      }
      if (tenant !== void 0) {
        localVarQueryParameter["tenant"] = tenant;
      }
      if (subject !== void 0) {
        localVarQueryParameter["subject"] = subject;
      }
      if (relation !== void 0) {
        localVarQueryParameter["relation"] = relation;
      }
      if (object !== void 0) {
        localVarQueryParameter["object"] = object;
      }
      if (objectType !== void 0) {
        localVarQueryParameter["object_type"] = objectType;
      }
      if (subjectType !== void 0) {
        localVarQueryParameter["subject_type"] = subjectType;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
var RelationshipTuplesApiFp = function(configuration) {
  const localVarAxiosParamCreator = RelationshipTuplesApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Bulk create relationship tuples(EAP)
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {RelationshipTupleCreateBulkOperation} relationshipTupleCreateBulkOperation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async bulkCreateRelationshipTuples(projId, envId, relationshipTupleCreateBulkOperation, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.bulkCreateRelationshipTuples(
        projId,
        envId,
        relationshipTupleCreateBulkOperation,
        options
      );
      return createRequestFunction(localVarAxiosArgs, import_axios2.default, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Bulk Delete Relationship Tuples
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {RelationshipTupleDeleteBulkOperation} relationshipTupleDeleteBulkOperation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async bulkDeleteRelationshipTuples(projId, envId, relationshipTupleDeleteBulkOperation, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.bulkDeleteRelationshipTuples(
        projId,
        envId,
        relationshipTupleDeleteBulkOperation,
        options
      );
      return createRequestFunction(localVarAxiosArgs, import_axios2.default, BASE_PATH, configuration);
    },
    /**
     * Create a relationship between two resource instances using a relation.
     * @summary Create Relationship Tuple
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {RelationshipTupleCreate} relationshipTupleCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createRelationshipTuple(projId, envId, relationshipTupleCreate, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createRelationshipTuple(
        projId,
        envId,
        relationshipTupleCreate,
        options
      );
      return createRequestFunction(localVarAxiosArgs, import_axios2.default, BASE_PATH, configuration);
    },
    /**
     * Delete a relationship between two resource instances.
     * @summary Delete Relationship Tuple
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {RelationshipTupleDelete} relationshipTupleDelete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteRelationshipTuple(projId, envId, relationshipTupleDelete, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRelationshipTuple(
        projId,
        envId,
        relationshipTupleDelete,
        options
      );
      return createRequestFunction(localVarAxiosArgs, import_axios2.default, BASE_PATH, configuration);
    },
    /**
     * Lists the relationship tuples defined within an environment.
     * @summary List Relationship Tuples
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {string} [tenant] The tenant key or id to filter by
     * @param {string} [subject] The subject to filter by, accepts either the resource instance id or resource_type:resource_instance
     * @param {string} [relation] The relation id or key to filter by
     * @param {string} [object] The object to filter by, accepts either the resource instance id or resource_type:resource_instance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listRelationshipTuples(projId, envId, detailed, page, perPage, tenant, subject, relation, object, objectType, subjectType, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listRelationshipTuples(
        projId,
        envId,
        detailed,
        page,
        perPage,
        tenant,
        subject,
        relation,
        object,
        objectType,
        subjectType,
        options
      );
      return createRequestFunction(localVarAxiosArgs, import_axios2.default, BASE_PATH, configuration);
    }
  };
};
var RelationshipTuplesApiFactory = function(configuration, basePath, axios) {
  const localVarFp = RelationshipTuplesApiFp(configuration);
  return {
    /**
     *
     * @summary Bulk create relationship tuples(EAP)
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {RelationshipTupleCreateBulkOperation} relationshipTupleCreateBulkOperation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkCreateRelationshipTuples(projId, envId, relationshipTupleCreateBulkOperation, options) {
      return localVarFp.bulkCreateRelationshipTuples(projId, envId, relationshipTupleCreateBulkOperation, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Bulk Delete Relationship Tuples
     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {RelationshipTupleDeleteBulkOperation} relationshipTupleDeleteBulkOperation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkDeleteRelationshipTuples(projId, envId, relationshipTupleDeleteBulkOperation, options) {
      return localVarFp.bulkDeleteRelationshipTuples(projId, envId, relationshipTupleDeleteBulkOperation, options).then((request) => request(axios, basePath));
    },
    /**
     * Create a relationship between two resource instances using a relation.
     * @summary Create Relationship Tuple
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {RelationshipTupleCreate} relationshipTupleCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRelationshipTuple(projId, envId, relationshipTupleCreate, options) {
      return localVarFp.createRelationshipTuple(projId, envId, relationshipTupleCreate, options).then((request) => request(axios, basePath));
    },
    /**
     * Delete a relationship between two resource instances.
     * @summary Delete Relationship Tuple
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {RelationshipTupleDelete} relationshipTupleDelete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRelationshipTuple(projId, envId, relationshipTupleDelete, options) {
      return localVarFp.deleteRelationshipTuple(projId, envId, relationshipTupleDelete, options).then((request) => request(axios, basePath));
    },
    /**
     * Lists the relationship tuples defined within an environment.
     * @summary List Relationship Tuples
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} [detailed] If true, will return the full subject and object resource instances.
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {string} [tenant] The tenant key or id to filter by
     * @param {string} [subject] The subject to filter by, accepts either the resource instance id or resource_type:resource_instance
     * @param {string} [relation] The relation id or key to filter by
     * @param {string} [object] The object to filter by, accepts either the resource instance id or resource_type:resource_instance
     * @param {string} [objectType] The object type to filter by, accepts resource type id or key
     * @param {string} [subjectType] The subject type to filter by, accepts resource type id or key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRelationshipTuples(projId, envId, detailed, page, perPage, tenant, subject, relation, object, objectType, subjectType, options) {
      return localVarFp.listRelationshipTuples(
        projId,
        envId,
        detailed,
        page,
        perPage,
        tenant,
        subject,
        relation,
        object,
        objectType,
        subjectType,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
var RelationshipTuplesApi = class extends BaseAPI {
  /**
   *
   * @summary Bulk create relationship tuples(EAP)
   * @param {RelationshipTuplesApiBulkCreateRelationshipTuplesRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RelationshipTuplesApi
   */
  async bulkCreateRelationshipTuples(requestParameters, options) {
    let request = await RelationshipTuplesApiFp(this.configuration).bulkCreateRelationshipTuples(
      requestParameters.projId,
      requestParameters.envId,
      requestParameters.relationshipTupleCreateBulkOperation,
      options
    );
    return request(this.axios, this.basePath);
  }
  /**
   *
   * @summary Bulk Delete Relationship Tuples
   * @param {RelationshipTuplesApiBulkDeleteRelationshipTuplesRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RelationshipTuplesApi
   */
  async bulkDeleteRelationshipTuples(requestParameters, options) {
    let request = await RelationshipTuplesApiFp(this.configuration).bulkDeleteRelationshipTuples(
      requestParameters.projId,
      requestParameters.envId,
      requestParameters.relationshipTupleDeleteBulkOperation,
      options
    );
    return request(this.axios, this.basePath);
  }
  /**
   * Create a relationship between two resource instances using a relation.
   * @summary Create Relationship Tuple
   * @param {RelationshipTuplesApiCreateRelationshipTupleRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RelationshipTuplesApi
   */
  createRelationshipTuple(requestParameters, options) {
    return RelationshipTuplesApiFp(this.configuration).createRelationshipTuple(
      requestParameters.projId,
      requestParameters.envId,
      requestParameters.relationshipTupleCreate,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  /**
   * Delete a relationship between two resource instances.
   * @summary Delete Relationship Tuple
   * @param {RelationshipTuplesApiDeleteRelationshipTupleRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RelationshipTuplesApi
   */
  deleteRelationshipTuple(requestParameters, options) {
    return RelationshipTuplesApiFp(this.configuration).deleteRelationshipTuple(
      requestParameters.projId,
      requestParameters.envId,
      requestParameters.relationshipTupleDelete,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  /**
   * Lists the relationship tuples defined within an environment.
   * @summary List Relationship Tuples
   * @param {RelationshipTuplesApiListRelationshipTuplesRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RelationshipTuplesApi
   */
  listRelationshipTuples(requestParameters, options) {
    return RelationshipTuplesApiFp(this.configuration).listRelationshipTuples(
      requestParameters.projId,
      requestParameters.envId,
      requestParameters.detailed,
      requestParameters.page,
      requestParameters.perPage,
      requestParameters.tenant,
      requestParameters.subject,
      requestParameters.relation,
      requestParameters.object,
      requestParameters.objectType,
      requestParameters.subjectType,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  RelationshipTuplesApi,
  RelationshipTuplesApiAxiosParamCreator,
  RelationshipTuplesApiFactory,
  RelationshipTuplesApiFp
});
//# sourceMappingURL=relationship-tuples-api.js.map