{"version":3,"sources":["../../../src/openapi/api/bulk-operations-api.ts","../../../src/openapi/base.ts","../../../src/openapi/common.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n// @ts-ignore\nimport { ResourceInstanceCreateBulkOperation } from '../types';\n// @ts-ignore\nimport { ResourceInstanceDeleteBulkOperation } from '../types';\n// @ts-ignore\nimport { TenantCreateBulkOperation } from '../types';\n// @ts-ignore\nimport { TenantDeleteBulkOperation } from '../types';\n// @ts-ignore\nimport { UserCreateBulkOperation } from '../types';\n// @ts-ignore\nimport { UserDeleteBulkOperation } from '../types';\n// @ts-ignore\nimport { UserReplaceBulkOperation } from '../types';\n/**\n * BulkOperationsApi - axios parameter creator\n * @export\n */\nexport const BulkOperationsApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     *\n     * @summary Bulk Create Tenants\n     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {any} requestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bulkCreateTenants: async (\n      projId: any,\n      envId: any,\n      requestBody: { [key: string]: any },\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('bulkCreateTenants', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('bulkCreateTenants', 'envId', envId);\n      // verify required parameter 'requestBody' is not null or undefined\n      assertParamExists('bulkCreateTenants', 'requestBody', requestBody);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/bulk/tenants`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        requestBody,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Bulk Create Users\n     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param userCreateBulkOperation\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bulkCreateUsers: async (\n      projId: any,\n      envId: any,\n      userCreateBulkOperation: UserCreateBulkOperation,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('bulkCreateUsers', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('bulkCreateUsers', 'envId', envId);\n      // verify required parameter 'requestBody' is not null or undefined\n      assertParamExists('bulkCreateUsers', 'requestBody', userCreateBulkOperation);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/bulk/users`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        userCreateBulkOperation,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Deletes many Resource Instances.\n     * @summary Bulk Delete Resource Instances\n     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceInstanceDeleteBulkOperation} resourceInstanceDeleteBulkOperation\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bulkDeleteResourceInstances: async (\n      projId: any,\n      envId: any,\n      resourceInstanceDeleteBulkOperation: ResourceInstanceDeleteBulkOperation,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('bulkDeleteResourceInstances', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('bulkDeleteResourceInstances', 'envId', envId);\n      // verify required parameter 'resourceInstanceDeleteBulkOperation' is not null or undefined\n      assertParamExists(\n        'bulkDeleteResourceInstances',\n        'resourceInstanceDeleteBulkOperation',\n        resourceInstanceDeleteBulkOperation,\n      );\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/bulk/resource_instances`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        resourceInstanceDeleteBulkOperation,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Bulk Delete Tenants\n     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {any} requestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bulkDeleteTenants: async (\n      projId: any,\n      envId: any,\n      requestBody: { [key: string]: any },\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('bulkDeleteTenants', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('bulkDeleteTenants', 'envId', envId);\n      // verify required parameter 'requestBody' is not null or undefined\n      assertParamExists('bulkDeleteTenants', 'requestBody', requestBody);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/bulk/tenants`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        requestBody,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Bulk Delete Users\n     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param userDeleteBulkOperation\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bulkDeleteUsers: async (\n      projId: any,\n      envId: any,\n      userDeleteBulkOperation: UserDeleteBulkOperation,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('bulkDeleteUsers', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('bulkDeleteUsers', 'envId', envId);\n      // verify required parameter 'requestBody' is not null or undefined\n      assertParamExists('bulkDeleteUsers', 'requestBody', userDeleteBulkOperation);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/bulk/users`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        userDeleteBulkOperation,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Creates or replaces Resource Instances. If a resource instance with `key` and `resource` already exists, it will be replaced.\n     * @summary Bulk Replace Resource Instances\n     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceInstanceCreateBulkOperation} resourceInstanceCreateBulkOperation\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bulkReplaceResourceInstances: async (\n      projId: any,\n      envId: any,\n      resourceInstanceCreateBulkOperation: ResourceInstanceCreateBulkOperation,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('bulkReplaceResourceInstances', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('bulkReplaceResourceInstances', 'envId', envId);\n      // verify required parameter 'resourceInstanceCreateBulkOperation' is not null or undefined\n      assertParamExists(\n        'bulkReplaceResourceInstances',\n        'resourceInstanceCreateBulkOperation',\n        resourceInstanceCreateBulkOperation,\n      );\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/bulk/resource_instances`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        resourceInstanceCreateBulkOperation,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Bulk Replace Users\n     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param userReplaceBulkOperation\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bulkReplaceUsers: async (\n      projId: any,\n      envId: any,\n      userReplaceBulkOperation: UserReplaceBulkOperation,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('bulkReplaceUsers', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('bulkReplaceUsers', 'envId', envId);\n      // verify required parameter 'requestBody' is not null or undefined\n      assertParamExists('bulkReplaceUsers', 'requestBody', userReplaceBulkOperation);\n      const localVarPath = `/v2/facts/{proj_id}/{env_id}/bulk/users`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        userReplaceBulkOperation,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * BulkOperationsApi - functional programming interface\n * @export\n */\nexport const BulkOperationsApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = BulkOperationsApiAxiosParamCreator(configuration);\n  return {\n    /**\n     *\n     * @summary Bulk Create Tenants\n     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {{ [key: string]: any; }} requestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async bulkCreateTenants(\n      projId: any,\n      envId: any,\n      requestBody: { [key: string]: any },\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any }>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.bulkCreateTenants(\n        projId,\n        envId,\n        requestBody,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Bulk Create Users\n     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param userCreateBulkOperation\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async bulkCreateUsers(\n      projId: any,\n      envId: any,\n      userCreateBulkOperation: UserCreateBulkOperation,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (\n        axios?: AxiosInstance,\n        basePath?: string,\n      ) => AxiosPromise<BulkOperationsApiBulkCreateUsersRequest>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.bulkCreateUsers(\n        projId,\n        envId,\n        userCreateBulkOperation,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Deletes many Resource Instances.\n     * @summary Bulk Delete Resource Instances\n     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceInstanceDeleteBulkOperation} resourceInstanceDeleteBulkOperation\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async bulkDeleteResourceInstances(\n      projId: any,\n      envId: any,\n      resourceInstanceDeleteBulkOperation: ResourceInstanceDeleteBulkOperation,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.bulkDeleteResourceInstances(\n        projId,\n        envId,\n        resourceInstanceDeleteBulkOperation,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Bulk Delete Tenants\n     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {{ [key: string]: any; }} requestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async bulkDeleteTenants(\n      projId: any,\n      envId: any,\n      requestBody: { [key: string]: any },\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any }>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.bulkDeleteTenants(\n        projId,\n        envId,\n        requestBody,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Bulk Delete Users\n     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param userDeleteBulkOperation\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async bulkDeleteUsers(\n      projId: any,\n      envId: any,\n      userDeleteBulkOperation: UserDeleteBulkOperation,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (\n        axios?: AxiosInstance,\n        basePath?: string,\n      ) => AxiosPromise<BulkOperationsApiBulkDeleteUsersRequest>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.bulkDeleteUsers(\n        projId,\n        envId,\n        userDeleteBulkOperation,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Creates or replaces Resource Instances. If a resource instance with `key` and `resource` already exists, it will be replaced.\n     * @summary Bulk Replace Resource Instances\n     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceInstanceCreateBulkOperation} resourceInstanceCreateBulkOperation\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async bulkReplaceResourceInstances(\n      projId: any,\n      envId: any,\n      resourceInstanceCreateBulkOperation: ResourceInstanceCreateBulkOperation,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.bulkReplaceResourceInstances(\n        projId,\n        envId,\n        resourceInstanceCreateBulkOperation,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Bulk Replace Users\n     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param userReplaceBulkOperation\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async bulkReplaceUsers(\n      projId: any,\n      envId: any,\n      userReplaceBulkOperation: UserReplaceBulkOperation,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (\n        axios?: AxiosInstance,\n        basePath?: string,\n      ) => AxiosPromise<BulkOperationsApiBulkReplaceUsersRequest>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.bulkReplaceUsers(\n        projId,\n        envId,\n        userReplaceBulkOperation,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * BulkOperationsApi - factory interface\n * @export\n */\nexport const BulkOperationsApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = BulkOperationsApiFp(configuration);\n  return {\n    /**\n     *\n     * @summary Bulk Create Tenants\n     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {{ [key: string]: any; }} requestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bulkCreateTenants(\n      projId: any,\n      envId: any,\n      requestBody: { [key: string]: any },\n      options?: any,\n    ): AxiosPromise<{ [key: string]: any }> {\n      return localVarFp\n        .bulkCreateTenants(projId, envId, requestBody, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Bulk Create Users\n     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param userCreateBulkOperation\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bulkCreateUsers(\n      projId: any,\n      envId: any,\n      userCreateBulkOperation: UserCreateBulkOperation,\n      options?: any,\n    ): AxiosPromise<BulkOperationsApiBulkCreateUsersRequest> {\n      return localVarFp\n        .bulkCreateUsers(projId, envId, userCreateBulkOperation, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Deletes many Resource Instances.\n     * @summary Bulk Delete Resource Instances\n     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceInstanceDeleteBulkOperation} resourceInstanceDeleteBulkOperation\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bulkDeleteResourceInstances(\n      projId: any,\n      envId: any,\n      resourceInstanceDeleteBulkOperation: ResourceInstanceDeleteBulkOperation,\n      options?: any,\n    ): AxiosPromise<any> {\n      return localVarFp\n        .bulkDeleteResourceInstances(projId, envId, resourceInstanceDeleteBulkOperation, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Bulk Delete Tenants\n     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {{ [key: string]: any; }} requestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bulkDeleteTenants(\n      projId: any,\n      envId: any,\n      requestBody: { [key: string]: any },\n      options?: any,\n    ): AxiosPromise<{ [key: string]: any }> {\n      return localVarFp\n        .bulkDeleteTenants(projId, envId, requestBody, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Bulk Delete Users\n     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param userDeleteBulkOperation\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bulkDeleteUsers(\n      projId: any,\n      envId: any,\n      userDeleteBulkOperation: UserDeleteBulkOperation,\n      options?: any,\n    ): AxiosPromise<BulkOperationsApiBulkDeleteUsersRequest> {\n      return localVarFp\n        .bulkDeleteUsers(projId, envId, userDeleteBulkOperation, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Creates or replaces Resource Instances. If a resource instance with `key` and `resource` already exists, it will be replaced.\n     * @summary Bulk Replace Resource Instances\n     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ResourceInstanceCreateBulkOperation} resourceInstanceCreateBulkOperation\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bulkReplaceResourceInstances(\n      projId: any,\n      envId: any,\n      resourceInstanceCreateBulkOperation: ResourceInstanceCreateBulkOperation,\n      options?: any,\n    ): AxiosPromise<any> {\n      return localVarFp\n        .bulkReplaceResourceInstances(projId, envId, resourceInstanceCreateBulkOperation, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Bulk Replace Users\n     * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param userReplaceBulkOperation\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bulkReplaceUsers(\n      projId: any,\n      envId: any,\n      userReplaceBulkOperation: UserReplaceBulkOperation,\n      options?: any,\n    ): AxiosPromise<BulkOperationsApiBulkReplaceUsersRequest> {\n      return localVarFp\n        .bulkReplaceUsers(projId, envId, userReplaceBulkOperation, options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for bulkCreateTenants operation in BulkOperationsApi.\n * @export\n * @interface BulkOperationsApiBulkCreateTenantsRequest\n */\nexport interface BulkOperationsApiBulkCreateTenantsRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {any}\n   * @memberof BulkOperationsApiBulkCreateTenants\n   */\n  readonly projId: any;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {any}\n   * @memberof BulkOperationsApiBulkCreateTenants\n   */\n  readonly envId: any;\n\n  /**\n   *\n   * @type {{ [key: string]: any; }}\n   * @memberof BulkOperationsApiBulkCreateTenants\n   */\n  readonly requestBody: { [key: string]: any };\n}\n\n/**\n * Request parameters for bulkCreateUsers operation in BulkOperationsApi.\n * @export\n * @interface BulkOperationsApiBulkCreateUsersRequest\n */\nexport interface BulkOperationsApiBulkCreateUsersRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {any}\n   * @memberof BulkOperationsApiBulkCreateUsers\n   */\n  readonly projId: any;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {any}\n   * @memberof BulkOperationsApiBulkCreateUsers\n   */\n  readonly envId: any;\n\n  /**\n   *\n   * @type {UserCreateBulkOperation}\n   * @memberof BulkOperationsApiBulkCreateUsers\n   */\n  readonly userCreateBulkOperations: UserCreateBulkOperation;\n}\n\n/**\n * Request parameters for bulkDeleteResourceInstances operation in BulkOperationsApi.\n * @export\n * @interface BulkOperationsApiBulkDeleteResourceInstancesRequest\n */\nexport interface BulkOperationsApiBulkDeleteResourceInstancesRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {any}\n   * @memberof BulkOperationsApiBulkDeleteResourceInstances\n   */\n  readonly projId: any;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {any}\n   * @memberof BulkOperationsApiBulkDeleteResourceInstances\n   */\n  readonly envId: any;\n\n  /**\n   *\n   * @type {ResourceInstanceDeleteBulkOperation}\n   * @memberof BulkOperationsApiBulkDeleteResourceInstances\n   */\n  readonly resourceInstanceDeleteBulkOperation: ResourceInstanceDeleteBulkOperation;\n}\n\n/**\n * Request parameters for bulkDeleteTenants operation in BulkOperationsApi.\n * @export\n * @interface BulkOperationsApiBulkDeleteTenantsRequest\n */\nexport interface BulkOperationsApiBulkDeleteTenantsRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {any}\n   * @memberof BulkOperationsApiBulkDeleteTenants\n   */\n  readonly projId: any;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {any}\n   * @memberof BulkOperationsApiBulkDeleteTenants\n   */\n  readonly envId: any;\n\n  /**\n   *\n   * @type {{ [key: string]: any; }}\n   * @memberof BulkOperationsApiBulkDeleteTenants\n   */\n  readonly requestBody: { [key: string]: any };\n}\n\n/**\n * Request parameters for bulkDeleteUsers operation in BulkOperationsApi.\n * @export\n * @interface BulkOperationsApiBulkDeleteUsersRequest\n */\nexport interface BulkOperationsApiBulkDeleteUsersRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {any}\n   * @memberof BulkOperationsApiBulkDeleteUsers\n   */\n  readonly projId: any;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {any}\n   * @memberof BulkOperationsApiBulkDeleteUsers\n   */\n  readonly envId: any;\n\n  /**\n   *\n   * @type {UserDeleteBulkOperation}\n   * @memberof BulkOperationsApiBulkDeleteUsers\n   */\n  readonly userDeleteBulkOperation: UserDeleteBulkOperation;\n}\n\n/**\n * Request parameters for bulkReplaceResourceInstances operation in BulkOperationsApi.\n * @export\n * @interface BulkOperationsApiBulkReplaceResourceInstancesRequest\n */\nexport interface BulkOperationsApiBulkReplaceResourceInstancesRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {any}\n   * @memberof BulkOperationsApiBulkReplaceResourceInstances\n   */\n  readonly projId: any;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {any}\n   * @memberof BulkOperationsApiBulkReplaceResourceInstances\n   */\n  readonly envId: any;\n\n  /**\n   *\n   * @type {ResourceInstanceCreateBulkOperation}\n   * @memberof BulkOperationsApiBulkReplaceResourceInstances\n   */\n  readonly resourceInstanceCreateBulkOperation: ResourceInstanceCreateBulkOperation;\n}\n\n/**\n * Request parameters for bulkReplaceUsers operation in BulkOperationsApi.\n * @export\n * @interface BulkOperationsApiBulkReplaceUsersRequest\n */\nexport interface BulkOperationsApiBulkReplaceUsersRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {any}\n   * @memberof BulkOperationsApiBulkReplaceUsers\n   */\n  readonly projId: any;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {any}\n   * @memberof BulkOperationsApiBulkReplaceUsers\n   */\n  readonly envId: any;\n\n  /**\n   *\n   * @type {UserReplaceBulkOperation}\n   * @memberof BulkOperationsApiBulkReplaceUsers\n   */\n  readonly userReplaceBulkOperation: UserReplaceBulkOperation;\n}\n\n/**\n * BulkOperationsApi - object-oriented interface\n * @export\n * @class BulkOperationsApi\n * @extends {BaseAPI}\n */\nexport class BulkOperationsApi extends BaseAPI {\n  /**\n   *\n   * @summary Bulk Create Tenants\n   * @param {BulkOpertionsApiBulkCreateTenantsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof BulkOperationsApi\n   */\n  public bulkCreateTenants(\n    requestParameters: BulkOperationsApiBulkCreateTenantsRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return BulkOperationsApiFp(this.configuration)\n      .bulkCreateTenants(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.requestBody,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Bulk Create Users\n   * @param {BulkOperationsApiBulkCreateUsersRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof BulkOperationsApi\n   */\n  public bulkCreateUsers(\n    requestParameters: BulkOperationsApiBulkCreateUsersRequest,\n    options?: AxiosRequestConfig,\n  ): AxiosPromise<any> {\n    return BulkOperationsApiFp(this.configuration)\n      .bulkCreateUsers(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.userCreateBulkOperations,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Deletes many Resource Instances.\n   * @summary Bulk Delete Resource Instances\n   * @param {BulkOperationsApiBulkDeleteResourceInstancesRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof BulkOperationsApi\n   */\n  public bulkDeleteResourceInstances(\n    requestParameters: BulkOperationsApiBulkDeleteResourceInstancesRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return BulkOperationsApiFp(this.configuration)\n      .bulkDeleteResourceInstances(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.resourceInstanceDeleteBulkOperation,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Bulk Delete Tenants\n   * @param {BulkOperationsApiBulkDeleteTenantsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof BulkOperationsApi\n   */\n  public bulkDeleteTenants(\n    requestParameters: BulkOperationsApiBulkDeleteTenantsRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return BulkOperationsApiFp(this.configuration)\n      .bulkDeleteTenants(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.requestBody,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Bulk Delete Users\n   * @param {BulkOperationsApiBulkDeleteUsersRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof BulkOperationsApi\n   */\n  public async bulkDeleteUsers(\n    requestParameters: BulkOperationsApiBulkDeleteUsersRequest,\n    options?: AxiosRequestConfig,\n  ): Promise<AxiosPromise<any>> {\n    let request = await BulkOperationsApiFp(this.configuration).bulkDeleteUsers(\n      requestParameters.projId,\n      requestParameters.envId,\n      requestParameters.userDeleteBulkOperation,\n      options,\n    );\n    return request(this.axios, this.basePath);\n  }\n\n  /**\n   * Creates or replaces Resource Instances. If a resource instance with `key` and `resource` already exists, it will be replaced.\n   * @summary Bulk Replace Resource Instances\n   * @param {BulkOperationsApiBulkReplaceResourceInstancesRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof BulkOperationsApi\n   */\n  public bulkReplaceResourceInstances(\n    requestParameters: BulkOperationsApiBulkReplaceResourceInstancesRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return BulkOperationsApiFp(this.configuration)\n      .bulkReplaceResourceInstances(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.resourceInstanceCreateBulkOperation,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Bulk Replace Users\n   * @param {BulkOperationsApiBulkReplaceUsersRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof BulkOperationsApi\n   */\n  public bulkReplaceUsers(\n    requestParameters: BulkOperationsApiBulkReplaceUsersRequest,\n    options?: AxiosRequestConfig,\n  ): AxiosPromise<any> {\n    return BulkOperationsApiFp(this.configuration)\n      .bulkReplaceUsers(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.userReplaceBulkOperation,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Configuration } from './configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\n\nexport const BASE_PATH = 'http://localhost'.replace(/\\/+$/, '');\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n  csv: ',',\n  ssv: ' ',\n  tsv: '\\t',\n  pipes: '|',\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n  url: string;\n  options: AxiosRequestConfig;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n  protected configuration: Configuration | undefined;\n\n  constructor(\n    configuration?: Configuration,\n    protected basePath: string = BASE_PATH,\n    protected axios: AxiosInstance = globalAxios,\n  ) {\n    if (configuration) {\n      this.configuration = configuration;\n      this.basePath = configuration.basePath || this.basePath;\n    }\n  }\n}\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n  name: 'RequiredError' = 'RequiredError';\n  constructor(public field: string, msg?: string) {\n    super(msg);\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Configuration } from './configuration';\nimport { RequiredError, RequestArgs } from './base';\nimport { AxiosInstance, AxiosResponse } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com';\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (\n  functionName: string,\n  paramName: string,\n  paramValue: unknown,\n) {\n  if (paramValue === null || paramValue === undefined) {\n    throw new RequiredError(\n      paramName,\n      `Required parameter ${paramName} was null or undefined when calling ${functionName}.`,\n    );\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (\n  object: any,\n  keyParamName: string,\n  configuration?: Configuration,\n) {\n  if (configuration && configuration.apiKey) {\n    const localVarApiKeyValue =\n      typeof configuration.apiKey === 'function'\n        ? await configuration.apiKey(keyParamName)\n        : await configuration.apiKey;\n    object[keyParamName] = localVarApiKeyValue;\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n  if (configuration && (configuration.username || configuration.password)) {\n    object['auth'] = { username: configuration.username, password: configuration.password };\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n  if (configuration && configuration.accessToken) {\n    const accessToken =\n      typeof configuration.accessToken === 'function'\n        ? await configuration.accessToken()\n        : await configuration.accessToken;\n    object['Authorization'] = 'Bearer ' + accessToken;\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (\n  object: any,\n  name: string,\n  scopes: string[],\n  configuration?: Configuration,\n) {\n  if (configuration && configuration.accessToken) {\n    const localVarAccessTokenValue =\n      typeof configuration.accessToken === 'function'\n        ? await configuration.accessToken(name, scopes)\n        : await configuration.accessToken;\n    object['Authorization'] = 'Bearer ' + localVarAccessTokenValue;\n  }\n};\n\nfunction setFlattenedQueryParams(\n  urlSearchParams: URLSearchParams,\n  parameter: any,\n  key: string = '',\n): void {\n  if (typeof parameter === 'object') {\n    if (Array.isArray(parameter)) {\n      (parameter as any[]).forEach((item) => setFlattenedQueryParams(urlSearchParams, item, key));\n    } else {\n      Object.keys(parameter).forEach((currentKey) =>\n        setFlattenedQueryParams(\n          urlSearchParams,\n          parameter[currentKey],\n          `${key}${key !== '' ? '.' : ''}${currentKey}`,\n        ),\n      );\n    }\n  } else {\n    if (urlSearchParams.has(key)) {\n      urlSearchParams.append(key, parameter);\n    } else {\n      urlSearchParams.set(key, parameter);\n    }\n  }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n  const searchParams = new URLSearchParams(url.search);\n  setFlattenedQueryParams(searchParams, objects);\n  url.search = searchParams.toString();\n};\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (\n  value: any,\n  requestOptions: any,\n  configuration?: Configuration,\n) {\n  const nonString = typeof value !== 'string';\n  const needsSerialization =\n    nonString && configuration && configuration.isJsonMime\n      ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n      : nonString;\n  return needsSerialization ? JSON.stringify(value !== undefined ? value : {}) : value || '';\n};\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n  return url.pathname + url.search + url.hash;\n};\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (\n  axiosArgs: RequestArgs,\n  globalAxios: AxiosInstance,\n  BASE_PATH: string,\n  configuration?: Configuration,\n) {\n  return <T = unknown, R = AxiosResponse<T>>(\n    axios: AxiosInstance = globalAxios,\n    basePath: string = BASE_PATH,\n  ) => {\n    const axiosRequestArgs = {\n      ...axiosArgs.options,\n      url: (configuration?.basePath || basePath) + axiosArgs.url,\n    };\n    return axios.request<T, R>(axiosRequestArgs);\n  };\n};\n"],"mappings":"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","names":["import_axios","globalAxios","globalAxios","BASE_PATH","globalAxios"]}