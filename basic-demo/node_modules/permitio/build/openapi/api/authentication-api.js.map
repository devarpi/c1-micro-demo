{"version":3,"sources":["../../../src/openapi/api/authentication-api.ts","../../../src/openapi/base.ts","../../../src/openapi/common.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { AuthnMeRead } from '../types';\n// @ts-ignore\nimport { DevLogin } from '../types';\n// @ts-ignore\nimport { EmbeddedLoginRequestOutput } from '../types';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n// @ts-ignore\nimport { LoginResult } from '../types';\n// @ts-ignore\nimport { UserFELoginRequestInput } from '../types';\n// @ts-ignore\nimport { UserLoginRequestInput } from '../types';\n/**\n * AuthenticationApi - axios parameter creator\n * @export\n */\nexport const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     * The dev-login endpoints allows a developer inside permit.io to log in with an email address.  THIS IS ONLY AVAILABLE IN DEV MODE.\n     * @summary (DEV MODE) Login\n     * @param {DevLogin} devLogin\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    devLogin: async (\n      devLogin: DevLogin,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'devLogin' is not null or undefined\n      assertParamExists('devLogin', 'devLogin', devLogin);\n      const localVarPath = `/v2/auth/devlogin`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        devLogin,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Elements Fe Login As\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {UserFELoginRequestInput} userFELoginRequestInput\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    elementsFeLoginAs: async (\n      envId: string,\n      userFELoginRequestInput: UserFELoginRequestInput,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('elementsFeLoginAs', 'envId', envId);\n      // verify required parameter 'userFELoginRequestInput' is not null or undefined\n      assertParamExists('elementsFeLoginAs', 'userFELoginRequestInput', userFELoginRequestInput);\n      const localVarPath = `/v2/auth/{env_id}/elements_fe_login_as`.replace(\n        `{${'env_id'}}`,\n        encodeURIComponent(String(envId)),\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        userFELoginRequestInput,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Elements Login As\n     * @param {UserLoginRequestInput} userLoginRequestInput\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    elementsLoginAs: async (\n      userLoginRequestInput: UserLoginRequestInput,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'userLoginRequestInput' is not null or undefined\n      assertParamExists('elementsLoginAs', 'userLoginRequestInput', userLoginRequestInput);\n      const localVarPath = `/v2/auth/elements_login_as`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        userLoginRequestInput,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * The login endpoint allows the frontend app to exchange a user JWT with a user session. The user session is stored on an httpOnly + secure cookie.\n     * @summary Login\n     * @param {string} [inviteCode] An optional invite code to an existing organization. If the invite code is provided and is valid, the member will gain access to that organization.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    login: async (inviteCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n      const localVarPath = `/v2/auth/login`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (inviteCode !== undefined) {\n        localVarQueryParameter['invite_code'] = inviteCode;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * The login endpoint allows the frontend app to exchange a user JWT with a user session. The user session is stored on an httpOnly + secure cookie.\n     * @summary Login Elements\n     * @param {string} token\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    loginElements: async (\n      token: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'token' is not null or undefined\n      assertParamExists('loginElements', 'token', token);\n      const localVarPath = `/v2/auth/login_elements`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (token !== undefined) {\n        localVarQueryParameter['token'] = token;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * The logout endpoint deletes the session cookie of a logged in user and invalidates cached VCs.\n     * @summary Logout Get\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    logoutGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n      const localVarPath = `/v2/auth/logout`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * The logout endpoint deletes the session cookie of a logged in user and invalidates cached VCs.\n     * @summary Logout Post\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    logoutPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n      const localVarPath = `/v2/auth/logout`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Me\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    me: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n      const localVarPath = `/v2/auth/me`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Allows the user to switch his active organization (manipulates the user\\'s login session).  This route will return a new login cookie to the user.\n     * @summary Switch Organization\n     * @param {string} orgId the organization id the user wishes to switch to as the active org on the session\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    switchOrganization: async (\n      orgId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('switchOrganization', 'orgId', orgId);\n      const localVarPath = `/v2/auth/switch_org/{org_id}`.replace(\n        `{${'org_id'}}`,\n        encodeURIComponent(String(orgId)),\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * AuthenticationApi - functional programming interface\n * @export\n */\nexport const AuthenticationApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * The dev-login endpoints allows a developer inside permit.io to log in with an email address.  THIS IS ONLY AVAILABLE IN DEV MODE.\n     * @summary (DEV MODE) Login\n     * @param {DevLogin} devLogin\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async devLogin(\n      devLogin: DevLogin,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.devLogin(devLogin, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Elements Fe Login As\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {UserFELoginRequestInput} userFELoginRequestInput\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async elementsFeLoginAs(\n      envId: string,\n      userFELoginRequestInput: UserFELoginRequestInput,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmbeddedLoginRequestOutput>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.elementsFeLoginAs(\n        envId,\n        userFELoginRequestInput,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Elements Login As\n     * @param {UserLoginRequestInput} userLoginRequestInput\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async elementsLoginAs(\n      userLoginRequestInput: UserLoginRequestInput,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmbeddedLoginRequestOutput>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.elementsLoginAs(\n        userLoginRequestInput,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * The login endpoint allows the frontend app to exchange a user JWT with a user session. The user session is stored on an httpOnly + secure cookie.\n     * @summary Login\n     * @param {string} [inviteCode] An optional invite code to an existing organization. If the invite code is provided and is valid, the member will gain access to that organization.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async login(\n      inviteCode?: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.login(inviteCode, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * The login endpoint allows the frontend app to exchange a user JWT with a user session. The user session is stored on an httpOnly + secure cookie.\n     * @summary Login Elements\n     * @param {string} token\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async loginElements(\n      token: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.loginElements(token, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * The logout endpoint deletes the session cookie of a logged in user and invalidates cached VCs.\n     * @summary Logout Get\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async logoutGet(\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.logoutGet(options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * The logout endpoint deletes the session cookie of a logged in user and invalidates cached VCs.\n     * @summary Logout Post\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async logoutPost(\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.logoutPost(options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Me\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async me(\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthnMeRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.me(options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Allows the user to switch his active organization (manipulates the user\\'s login session).  This route will return a new login cookie to the user.\n     * @summary Switch Organization\n     * @param {string} orgId the organization id the user wishes to switch to as the active org on the session\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async switchOrganization(\n      orgId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.switchOrganization(orgId, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * AuthenticationApi - factory interface\n * @export\n */\nexport const AuthenticationApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = AuthenticationApiFp(configuration);\n  return {\n    /**\n     * The dev-login endpoints allows a developer inside permit.io to log in with an email address.  THIS IS ONLY AVAILABLE IN DEV MODE.\n     * @summary (DEV MODE) Login\n     * @param {DevLogin} devLogin\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    devLogin(devLogin: DevLogin, options?: any): AxiosPromise<void> {\n      return localVarFp.devLogin(devLogin, options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Elements Fe Login As\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {UserFELoginRequestInput} userFELoginRequestInput\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    elementsFeLoginAs(\n      envId: string,\n      userFELoginRequestInput: UserFELoginRequestInput,\n      options?: any,\n    ): AxiosPromise<EmbeddedLoginRequestOutput> {\n      return localVarFp\n        .elementsFeLoginAs(envId, userFELoginRequestInput, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Elements Login As\n     * @param {UserLoginRequestInput} userLoginRequestInput\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    elementsLoginAs(\n      userLoginRequestInput: UserLoginRequestInput,\n      options?: any,\n    ): AxiosPromise<EmbeddedLoginRequestOutput> {\n      return localVarFp\n        .elementsLoginAs(userLoginRequestInput, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * The login endpoint allows the frontend app to exchange a user JWT with a user session. The user session is stored on an httpOnly + secure cookie.\n     * @summary Login\n     * @param {string} [inviteCode] An optional invite code to an existing organization. If the invite code is provided and is valid, the member will gain access to that organization.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    login(inviteCode?: string, options?: any): AxiosPromise<LoginResult> {\n      return localVarFp.login(inviteCode, options).then((request) => request(axios, basePath));\n    },\n    /**\n     * The login endpoint allows the frontend app to exchange a user JWT with a user session. The user session is stored on an httpOnly + secure cookie.\n     * @summary Login Elements\n     * @param {string} token\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    loginElements(token: string, options?: any): AxiosPromise<LoginResult> {\n      return localVarFp.loginElements(token, options).then((request) => request(axios, basePath));\n    },\n    /**\n     * The logout endpoint deletes the session cookie of a logged in user and invalidates cached VCs.\n     * @summary Logout Get\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    logoutGet(options?: any): AxiosPromise<void> {\n      return localVarFp.logoutGet(options).then((request) => request(axios, basePath));\n    },\n    /**\n     * The logout endpoint deletes the session cookie of a logged in user and invalidates cached VCs.\n     * @summary Logout Post\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    logoutPost(options?: any): AxiosPromise<void> {\n      return localVarFp.logoutPost(options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Me\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    me(options?: any): AxiosPromise<AuthnMeRead> {\n      return localVarFp.me(options).then((request) => request(axios, basePath));\n    },\n    /**\n     * Allows the user to switch his active organization (manipulates the user\\'s login session).  This route will return a new login cookie to the user.\n     * @summary Switch Organization\n     * @param {string} orgId the organization id the user wishes to switch to as the active org on the session\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    switchOrganization(orgId: string, options?: any): AxiosPromise<LoginResult> {\n      return localVarFp\n        .switchOrganization(orgId, options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for devLogin operation in AuthenticationApi.\n * @export\n * @interface AuthenticationApiDevLoginRequest\n */\nexport interface AuthenticationApiDevLoginRequest {\n  /**\n   *\n   * @type {DevLogin}\n   * @memberof AuthenticationApiDevLogin\n   */\n  readonly devLogin: DevLogin;\n}\n\n/**\n * Request parameters for elementsFeLoginAs operation in AuthenticationApi.\n * @export\n * @interface AuthenticationApiElementsFeLoginAsRequest\n */\nexport interface AuthenticationApiElementsFeLoginAsRequest {\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof AuthenticationApiElementsFeLoginAs\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {UserFELoginRequestInput}\n   * @memberof AuthenticationApiElementsFeLoginAs\n   */\n  readonly userFELoginRequestInput: UserFELoginRequestInput;\n}\n\n/**\n * Request parameters for elementsLoginAs operation in AuthenticationApi.\n * @export\n * @interface AuthenticationApiElementsLoginAsRequest\n */\nexport interface AuthenticationApiElementsLoginAsRequest {\n  /**\n   *\n   * @type {UserLoginRequestInput}\n   * @memberof AuthenticationApiElementsLoginAs\n   */\n  readonly userLoginRequestInput: UserLoginRequestInput;\n}\n\n/**\n * Request parameters for login operation in AuthenticationApi.\n * @export\n * @interface AuthenticationApiLoginRequest\n */\nexport interface AuthenticationApiLoginRequest {\n  /**\n   * An optional invite code to an existing organization. If the invite code is provided and is valid, the member will gain access to that organization.\n   * @type {string}\n   * @memberof AuthenticationApiLogin\n   */\n  readonly inviteCode?: string;\n}\n\n/**\n * Request parameters for loginElements operation in AuthenticationApi.\n * @export\n * @interface AuthenticationApiLoginElementsRequest\n */\nexport interface AuthenticationApiLoginElementsRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof AuthenticationApiLoginElements\n   */\n  readonly token: string;\n}\n\n/**\n * Request parameters for switchOrganization operation in AuthenticationApi.\n * @export\n * @interface AuthenticationApiSwitchOrganizationRequest\n */\nexport interface AuthenticationApiSwitchOrganizationRequest {\n  /**\n   * the organization id the user wishes to switch to as the active org on the session\n   * @type {string}\n   * @memberof AuthenticationApiSwitchOrganization\n   */\n  readonly orgId: string;\n}\n\n/**\n * AuthenticationApi - object-oriented interface\n * @export\n * @class AuthenticationApi\n * @extends {BaseAPI}\n */\nexport class AuthenticationApi extends BaseAPI {\n  /**\n   * The dev-login endpoints allows a developer inside permit.io to log in with an email address.  THIS IS ONLY AVAILABLE IN DEV MODE.\n   * @summary (DEV MODE) Login\n   * @param {AuthenticationApiDevLoginRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthenticationApi\n   */\n  public devLogin(\n    requestParameters: AuthenticationApiDevLoginRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return AuthenticationApiFp(this.configuration)\n      .devLogin(requestParameters.devLogin, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Elements Fe Login As\n   * @param {AuthenticationApiElementsFeLoginAsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthenticationApi\n   */\n  public elementsFeLoginAs(\n    requestParameters: AuthenticationApiElementsFeLoginAsRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return AuthenticationApiFp(this.configuration)\n      .elementsFeLoginAs(\n        requestParameters.envId,\n        requestParameters.userFELoginRequestInput,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Elements Login As\n   * @param {AuthenticationApiElementsLoginAsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthenticationApi\n   */\n  public elementsLoginAs(\n    requestParameters: AuthenticationApiElementsLoginAsRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return AuthenticationApiFp(this.configuration)\n      .elementsLoginAs(requestParameters.userLoginRequestInput, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * The login endpoint allows the frontend app to exchange a user JWT with a user session. The user session is stored on an httpOnly + secure cookie.\n   * @summary Login\n   * @param {AuthenticationApiLoginRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthenticationApi\n   */\n  public login(\n    requestParameters: AuthenticationApiLoginRequest = {},\n    options?: AxiosRequestConfig,\n  ) {\n    return AuthenticationApiFp(this.configuration)\n      .login(requestParameters.inviteCode, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * The login endpoint allows the frontend app to exchange a user JWT with a user session. The user session is stored on an httpOnly + secure cookie.\n   * @summary Login Elements\n   * @param {AuthenticationApiLoginElementsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthenticationApi\n   */\n  public loginElements(\n    requestParameters: AuthenticationApiLoginElementsRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return AuthenticationApiFp(this.configuration)\n      .loginElements(requestParameters.token, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * The logout endpoint deletes the session cookie of a logged in user and invalidates cached VCs.\n   * @summary Logout Get\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthenticationApi\n   */\n  public logoutGet(options?: AxiosRequestConfig) {\n    return AuthenticationApiFp(this.configuration)\n      .logoutGet(options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * The logout endpoint deletes the session cookie of a logged in user and invalidates cached VCs.\n   * @summary Logout Post\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthenticationApi\n   */\n  public logoutPost(options?: AxiosRequestConfig) {\n    return AuthenticationApiFp(this.configuration)\n      .logoutPost(options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Me\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthenticationApi\n   */\n  public me(options?: AxiosRequestConfig) {\n    return AuthenticationApiFp(this.configuration)\n      .me(options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Allows the user to switch his active organization (manipulates the user\\'s login session).  This route will return a new login cookie to the user.\n   * @summary Switch Organization\n   * @param {AuthenticationApiSwitchOrganizationRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthenticationApi\n   */\n  public switchOrganization(\n    requestParameters: AuthenticationApiSwitchOrganizationRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return AuthenticationApiFp(this.configuration)\n      .switchOrganization(requestParameters.orgId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Configuration } from './configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\n\nexport const BASE_PATH = 'http://localhost'.replace(/\\/+$/, '');\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n  csv: ',',\n  ssv: ' ',\n  tsv: '\\t',\n  pipes: '|',\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n  url: string;\n  options: AxiosRequestConfig;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n  protected configuration: Configuration | undefined;\n\n  constructor(\n    configuration?: Configuration,\n    protected basePath: string = BASE_PATH,\n    protected axios: AxiosInstance = globalAxios,\n  ) {\n    if (configuration) {\n      this.configuration = configuration;\n      this.basePath = configuration.basePath || this.basePath;\n    }\n  }\n}\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n  name: 'RequiredError' = 'RequiredError';\n  constructor(public field: string, msg?: string) {\n    super(msg);\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Configuration } from './configuration';\nimport { RequiredError, RequestArgs } from './base';\nimport { AxiosInstance, AxiosResponse } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com';\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (\n  functionName: string,\n  paramName: string,\n  paramValue: unknown,\n) {\n  if (paramValue === null || paramValue === undefined) {\n    throw new RequiredError(\n      paramName,\n      `Required parameter ${paramName} was null or undefined when calling ${functionName}.`,\n    );\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (\n  object: any,\n  keyParamName: string,\n  configuration?: Configuration,\n) {\n  if (configuration && configuration.apiKey) {\n    const localVarApiKeyValue =\n      typeof configuration.apiKey === 'function'\n        ? await configuration.apiKey(keyParamName)\n        : await configuration.apiKey;\n    object[keyParamName] = localVarApiKeyValue;\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n  if (configuration && (configuration.username || configuration.password)) {\n    object['auth'] = { username: configuration.username, password: configuration.password };\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n  if (configuration && configuration.accessToken) {\n    const accessToken =\n      typeof configuration.accessToken === 'function'\n        ? await configuration.accessToken()\n        : await configuration.accessToken;\n    object['Authorization'] = 'Bearer ' + accessToken;\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (\n  object: any,\n  name: string,\n  scopes: string[],\n  configuration?: Configuration,\n) {\n  if (configuration && configuration.accessToken) {\n    const localVarAccessTokenValue =\n      typeof configuration.accessToken === 'function'\n        ? await configuration.accessToken(name, scopes)\n        : await configuration.accessToken;\n    object['Authorization'] = 'Bearer ' + localVarAccessTokenValue;\n  }\n};\n\nfunction setFlattenedQueryParams(\n  urlSearchParams: URLSearchParams,\n  parameter: any,\n  key: string = '',\n): void {\n  if (typeof parameter === 'object') {\n    if (Array.isArray(parameter)) {\n      (parameter as any[]).forEach((item) => setFlattenedQueryParams(urlSearchParams, item, key));\n    } else {\n      Object.keys(parameter).forEach((currentKey) =>\n        setFlattenedQueryParams(\n          urlSearchParams,\n          parameter[currentKey],\n          `${key}${key !== '' ? '.' : ''}${currentKey}`,\n        ),\n      );\n    }\n  } else {\n    if (urlSearchParams.has(key)) {\n      urlSearchParams.append(key, parameter);\n    } else {\n      urlSearchParams.set(key, parameter);\n    }\n  }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n  const searchParams = new URLSearchParams(url.search);\n  setFlattenedQueryParams(searchParams, objects);\n  url.search = searchParams.toString();\n};\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (\n  value: any,\n  requestOptions: any,\n  configuration?: Configuration,\n) {\n  const nonString = typeof value !== 'string';\n  const needsSerialization =\n    nonString && configuration && configuration.isJsonMime\n      ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n      : nonString;\n  return needsSerialization ? JSON.stringify(value !== undefined ? value : {}) : value || '';\n};\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n  return url.pathname + url.search + url.hash;\n};\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (\n  axiosArgs: RequestArgs,\n  globalAxios: AxiosInstance,\n  BASE_PATH: string,\n  configuration?: Configuration,\n) {\n  return <T = unknown, R = AxiosResponse<T>>(\n    axios: AxiosInstance = globalAxios,\n    basePath: string = BASE_PATH,\n  ) => {\n    const axiosRequestArgs = {\n      ...axiosArgs.options,\n      url: (configuration?.basePath || basePath) + axiosArgs.url,\n    };\n    return axios.request<T, R>(axiosRequestArgs);\n  };\n};\n"],"mappings":"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","names":["import_axios","globalAxios","globalAxios","BASE_PATH","globalAxios"]}