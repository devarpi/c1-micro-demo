{"version":3,"sources":["../../../src/openapi/api/elements-configs-api.ts","../../../src/openapi/base.ts","../../../src/openapi/common.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { ElementsConfigCreate } from '../types';\n// @ts-ignore\nimport { ElementsConfigRead } from '../types';\n// @ts-ignore\nimport { ElementsConfigRuntimeRead } from '../types';\n// @ts-ignore\nimport { ElementsConfigUpdate } from '../types';\n// @ts-ignore\nimport { ElementsEnvTypeRead } from '../types';\n// @ts-ignore\nimport { ElementsEnvTypeUpdate } from '../types';\n// @ts-ignore\nimport { ElementsType } from '../types';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n// @ts-ignore\nimport { PaginatedResultElementsConfigRead } from '../types';\n/**\n * ElementsConfigsApi - axios parameter creator\n * @export\n */\nexport const ElementsConfigsApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     * Creates a new elements_config under the active organization.\n     * @summary Create Elements Config\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ElementsConfigCreate} elementsConfigCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createElementsConfig: async (\n      projId: string,\n      envId: string,\n      elementsConfigCreate: ElementsConfigCreate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('createElementsConfig', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('createElementsConfig', 'envId', envId);\n      // verify required parameter 'elementsConfigCreate' is not null or undefined\n      assertParamExists('createElementsConfig', 'elementsConfigCreate', elementsConfigCreate);\n      const localVarPath = `/v2/elements/{proj_id}/{env_id}/config`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        elementsConfigCreate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Deletes the elements_config and all its related data.\n     * @summary Delete Elements Config\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteElementsConfig: async (\n      elementsConfigId: string,\n      projId: string,\n      envId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'elementsConfigId' is not null or undefined\n      assertParamExists('deleteElementsConfig', 'elementsConfigId', elementsConfigId);\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('deleteElementsConfig', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('deleteElementsConfig', 'envId', envId);\n      const localVarPath = `/v2/elements/{proj_id}/{env_id}/{elements_config_id}`\n        .replace(`{${'elements_config_id'}}`, encodeURIComponent(String(elementsConfigId)))\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.\n     * @summary Get Elements Config\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getElementsConfig: async (\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getElementsConfig', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getElementsConfig', 'envId', envId);\n      // verify required parameter 'elementsConfigId' is not null or undefined\n      assertParamExists('getElementsConfig', 'elementsConfigId', elementsConfigId);\n      const localVarPath = `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'elements_config_id'}}`, encodeURIComponent(String(elementsConfigId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.\n     * @summary Get Elements Config Runtime\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getElementsConfigRuntime: async (\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getElementsConfigRuntime', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getElementsConfigRuntime', 'envId', envId);\n      // verify required parameter 'elementsConfigId' is not null or undefined\n      assertParamExists('getElementsConfigRuntime', 'elementsConfigId', elementsConfigId);\n      const localVarPath = `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/runtime`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'elements_config_id'}}`, encodeURIComponent(String(elementsConfigId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get Elements Type Config\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ElementsType} elementType Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getElementsTypeConfig: async (\n      projId: string,\n      envId: string,\n      elementType: ElementsType,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('getElementsTypeConfig', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('getElementsTypeConfig', 'envId', envId);\n      // verify required parameter 'elementType' is not null or undefined\n      assertParamExists('getElementsTypeConfig', 'elementType', elementType);\n      const localVarPath = `/v2/elements/{proj_id}/{env_id}/{element_type}`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'element_type'}}`, encodeURIComponent(String(elementType)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Lists all the elements_configs under the active organization.\n     * @summary List Elements Configs\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listElementsConfigs: async (\n      projId: string,\n      envId: string,\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('listElementsConfigs', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('listElementsConfigs', 'envId', envId);\n      const localVarPath = `/v2/elements/{proj_id}/{env_id}/config`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Updates the elements_config.\n     * @summary Update Elements Config\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ElementsConfigUpdate} elementsConfigUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateElementsConfig: async (\n      elementsConfigId: string,\n      projId: string,\n      envId: string,\n      elementsConfigUpdate: ElementsConfigUpdate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'elementsConfigId' is not null or undefined\n      assertParamExists('updateElementsConfig', 'elementsConfigId', elementsConfigId);\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('updateElementsConfig', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('updateElementsConfig', 'envId', envId);\n      // verify required parameter 'elementsConfigUpdate' is not null or undefined\n      assertParamExists('updateElementsConfig', 'elementsConfigUpdate', elementsConfigUpdate);\n      const localVarPath = `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}`\n        .replace(`{${'elements_config_id'}}`, encodeURIComponent(String(elementsConfigId)))\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        elementsConfigUpdate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Update Elements Type Permissions\n     * @param {ElementsType} elementType Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ElementsEnvTypeUpdate} elementsEnvTypeUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateElementsTypePermissions: async (\n      elementType: ElementsType,\n      projId: string,\n      envId: string,\n      elementsEnvTypeUpdate: ElementsEnvTypeUpdate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'elementType' is not null or undefined\n      assertParamExists('updateElementsTypePermissions', 'elementType', elementType);\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('updateElementsTypePermissions', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('updateElementsTypePermissions', 'envId', envId);\n      // verify required parameter 'elementsEnvTypeUpdate' is not null or undefined\n      assertParamExists(\n        'updateElementsTypePermissions',\n        'elementsEnvTypeUpdate',\n        elementsEnvTypeUpdate,\n      );\n      const localVarPath = `/v2/elements/{proj_id}/{env_id}/{element_type}`\n        .replace(`{${'element_type'}}`, encodeURIComponent(String(elementType)))\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        elementsEnvTypeUpdate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * ElementsConfigsApi - functional programming interface\n * @export\n */\nexport const ElementsConfigsApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = ElementsConfigsApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * Creates a new elements_config under the active organization.\n     * @summary Create Elements Config\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ElementsConfigCreate} elementsConfigCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async createElementsConfig(\n      projId: string,\n      envId: string,\n      elementsConfigCreate: ElementsConfigCreate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElementsConfigRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.createElementsConfig(\n        projId,\n        envId,\n        elementsConfigCreate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Deletes the elements_config and all its related data.\n     * @summary Delete Elements Config\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async deleteElementsConfig(\n      elementsConfigId: string,\n      projId: string,\n      envId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteElementsConfig(\n        elementsConfigId,\n        projId,\n        envId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.\n     * @summary Get Elements Config\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getElementsConfig(\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElementsConfigRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getElementsConfig(\n        projId,\n        envId,\n        elementsConfigId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.\n     * @summary Get Elements Config Runtime\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getElementsConfigRuntime(\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElementsConfigRuntimeRead>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getElementsConfigRuntime(\n        projId,\n        envId,\n        elementsConfigId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get Elements Type Config\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ElementsType} elementType Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getElementsTypeConfig(\n      projId: string,\n      envId: string,\n      elementType: ElementsType,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElementsEnvTypeRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.getElementsTypeConfig(\n        projId,\n        envId,\n        elementType,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Lists all the elements_configs under the active organization.\n     * @summary List Elements Configs\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async listElementsConfigs(\n      projId: string,\n      envId: string,\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResultElementsConfigRead>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.listElementsConfigs(\n        projId,\n        envId,\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Updates the elements_config.\n     * @summary Update Elements Config\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ElementsConfigUpdate} elementsConfigUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async updateElementsConfig(\n      elementsConfigId: string,\n      projId: string,\n      envId: string,\n      elementsConfigUpdate: ElementsConfigUpdate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElementsConfigRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.updateElementsConfig(\n        elementsConfigId,\n        projId,\n        envId,\n        elementsConfigUpdate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Update Elements Type Permissions\n     * @param {ElementsType} elementType Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ElementsEnvTypeUpdate} elementsEnvTypeUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async updateElementsTypePermissions(\n      elementType: ElementsType,\n      projId: string,\n      envId: string,\n      elementsEnvTypeUpdate: ElementsEnvTypeUpdate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElementsEnvTypeRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.updateElementsTypePermissions(\n        elementType,\n        projId,\n        envId,\n        elementsEnvTypeUpdate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * ElementsConfigsApi - factory interface\n * @export\n */\nexport const ElementsConfigsApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = ElementsConfigsApiFp(configuration);\n  return {\n    /**\n     * Creates a new elements_config under the active organization.\n     * @summary Create Elements Config\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ElementsConfigCreate} elementsConfigCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createElementsConfig(\n      projId: string,\n      envId: string,\n      elementsConfigCreate: ElementsConfigCreate,\n      options?: any,\n    ): AxiosPromise<ElementsConfigRead> {\n      return localVarFp\n        .createElementsConfig(projId, envId, elementsConfigCreate, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Deletes the elements_config and all its related data.\n     * @summary Delete Elements Config\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteElementsConfig(\n      elementsConfigId: string,\n      projId: string,\n      envId: string,\n      options?: any,\n    ): AxiosPromise<void> {\n      return localVarFp\n        .deleteElementsConfig(elementsConfigId, projId, envId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.\n     * @summary Get Elements Config\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getElementsConfig(\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      options?: any,\n    ): AxiosPromise<ElementsConfigRead> {\n      return localVarFp\n        .getElementsConfig(projId, envId, elementsConfigId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.\n     * @summary Get Elements Config Runtime\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getElementsConfigRuntime(\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      options?: any,\n    ): AxiosPromise<ElementsConfigRuntimeRead> {\n      return localVarFp\n        .getElementsConfigRuntime(projId, envId, elementsConfigId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get Elements Type Config\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ElementsType} elementType Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getElementsTypeConfig(\n      projId: string,\n      envId: string,\n      elementType: ElementsType,\n      options?: any,\n    ): AxiosPromise<ElementsEnvTypeRead> {\n      return localVarFp\n        .getElementsTypeConfig(projId, envId, elementType, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Lists all the elements_configs under the active organization.\n     * @summary List Elements Configs\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listElementsConfigs(\n      projId: string,\n      envId: string,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<PaginatedResultElementsConfigRead> {\n      return localVarFp\n        .listElementsConfigs(projId, envId, page, perPage, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Updates the elements_config.\n     * @summary Update Elements Config\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ElementsConfigUpdate} elementsConfigUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateElementsConfig(\n      elementsConfigId: string,\n      projId: string,\n      envId: string,\n      elementsConfigUpdate: ElementsConfigUpdate,\n      options?: any,\n    ): AxiosPromise<ElementsConfigRead> {\n      return localVarFp\n        .updateElementsConfig(elementsConfigId, projId, envId, elementsConfigUpdate, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Update Elements Type Permissions\n     * @param {ElementsType} elementType Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {ElementsEnvTypeUpdate} elementsEnvTypeUpdate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateElementsTypePermissions(\n      elementType: ElementsType,\n      projId: string,\n      envId: string,\n      elementsEnvTypeUpdate: ElementsEnvTypeUpdate,\n      options?: any,\n    ): AxiosPromise<ElementsEnvTypeRead> {\n      return localVarFp\n        .updateElementsTypePermissions(elementType, projId, envId, elementsEnvTypeUpdate, options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for createElementsConfig operation in ElementsConfigsApi.\n * @export\n * @interface ElementsConfigsApiCreateElementsConfigRequest\n */\nexport interface ElementsConfigsApiCreateElementsConfigRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ElementsConfigsApiCreateElementsConfig\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ElementsConfigsApiCreateElementsConfig\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {ElementsConfigCreate}\n   * @memberof ElementsConfigsApiCreateElementsConfig\n   */\n  readonly elementsConfigCreate: ElementsConfigCreate;\n}\n\n/**\n * Request parameters for deleteElementsConfig operation in ElementsConfigsApi.\n * @export\n * @interface ElementsConfigsApiDeleteElementsConfigRequest\n */\nexport interface ElementsConfigsApiDeleteElementsConfigRequest {\n  /**\n   * Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ElementsConfigsApiDeleteElementsConfig\n   */\n  readonly elementsConfigId: string;\n\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ElementsConfigsApiDeleteElementsConfig\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ElementsConfigsApiDeleteElementsConfig\n   */\n  readonly envId: string;\n}\n\n/**\n * Request parameters for getElementsConfig operation in ElementsConfigsApi.\n * @export\n * @interface ElementsConfigsApiGetElementsConfigRequest\n */\nexport interface ElementsConfigsApiGetElementsConfigRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ElementsConfigsApiGetElementsConfig\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ElementsConfigsApiGetElementsConfig\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ElementsConfigsApiGetElementsConfig\n   */\n  readonly elementsConfigId: string;\n}\n\n/**\n * Request parameters for getElementsConfigRuntime operation in ElementsConfigsApi.\n * @export\n * @interface ElementsConfigsApiGetElementsConfigRuntimeRequest\n */\nexport interface ElementsConfigsApiGetElementsConfigRuntimeRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ElementsConfigsApiGetElementsConfigRuntime\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ElementsConfigsApiGetElementsConfigRuntime\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ElementsConfigsApiGetElementsConfigRuntime\n   */\n  readonly elementsConfigId: string;\n}\n\n/**\n * Request parameters for getElementsTypeConfig operation in ElementsConfigsApi.\n * @export\n * @interface ElementsConfigsApiGetElementsTypeConfigRequest\n */\nexport interface ElementsConfigsApiGetElementsTypeConfigRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ElementsConfigsApiGetElementsTypeConfig\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ElementsConfigsApiGetElementsTypeConfig\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \\&quot;slug\\&quot;).\n   * @type {ElementsType}\n   * @memberof ElementsConfigsApiGetElementsTypeConfig\n   */\n  readonly elementType: ElementsType;\n}\n\n/**\n * Request parameters for listElementsConfigs operation in ElementsConfigsApi.\n * @export\n * @interface ElementsConfigsApiListElementsConfigsRequest\n */\nexport interface ElementsConfigsApiListElementsConfigsRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ElementsConfigsApiListElementsConfigs\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ElementsConfigsApiListElementsConfigs\n   */\n  readonly envId: string;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof ElementsConfigsApiListElementsConfigs\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof ElementsConfigsApiListElementsConfigs\n   */\n  readonly perPage?: number;\n}\n\n/**\n * Request parameters for updateElementsConfig operation in ElementsConfigsApi.\n * @export\n * @interface ElementsConfigsApiUpdateElementsConfigRequest\n */\nexport interface ElementsConfigsApiUpdateElementsConfigRequest {\n  /**\n   * Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ElementsConfigsApiUpdateElementsConfig\n   */\n  readonly elementsConfigId: string;\n\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ElementsConfigsApiUpdateElementsConfig\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ElementsConfigsApiUpdateElementsConfig\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {ElementsConfigUpdate}\n   * @memberof ElementsConfigsApiUpdateElementsConfig\n   */\n  readonly elementsConfigUpdate: ElementsConfigUpdate;\n}\n\n/**\n * Request parameters for updateElementsTypePermissions operation in ElementsConfigsApi.\n * @export\n * @interface ElementsConfigsApiUpdateElementsTypePermissionsRequest\n */\nexport interface ElementsConfigsApiUpdateElementsTypePermissionsRequest {\n  /**\n   * Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \\&quot;slug\\&quot;).\n   * @type {ElementsType}\n   * @memberof ElementsConfigsApiUpdateElementsTypePermissions\n   */\n  readonly elementType: ElementsType;\n\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ElementsConfigsApiUpdateElementsTypePermissions\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof ElementsConfigsApiUpdateElementsTypePermissions\n   */\n  readonly envId: string;\n\n  /**\n   *\n   * @type {ElementsEnvTypeUpdate}\n   * @memberof ElementsConfigsApiUpdateElementsTypePermissions\n   */\n  readonly elementsEnvTypeUpdate: ElementsEnvTypeUpdate;\n}\n\n/**\n * ElementsConfigsApi - object-oriented interface\n * @export\n * @class ElementsConfigsApi\n * @extends {BaseAPI}\n */\nexport class ElementsConfigsApi extends BaseAPI {\n  /**\n   * Creates a new elements_config under the active organization.\n   * @summary Create Elements Config\n   * @param {ElementsConfigsApiCreateElementsConfigRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ElementsConfigsApi\n   */\n  public createElementsConfig(\n    requestParameters: ElementsConfigsApiCreateElementsConfigRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ElementsConfigsApiFp(this.configuration)\n      .createElementsConfig(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.elementsConfigCreate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Deletes the elements_config and all its related data.\n   * @summary Delete Elements Config\n   * @param {ElementsConfigsApiDeleteElementsConfigRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ElementsConfigsApi\n   */\n  public deleteElementsConfig(\n    requestParameters: ElementsConfigsApiDeleteElementsConfigRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ElementsConfigsApiFp(this.configuration)\n      .deleteElementsConfig(\n        requestParameters.elementsConfigId,\n        requestParameters.projId,\n        requestParameters.envId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.\n   * @summary Get Elements Config\n   * @param {ElementsConfigsApiGetElementsConfigRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ElementsConfigsApi\n   */\n  public getElementsConfig(\n    requestParameters: ElementsConfigsApiGetElementsConfigRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ElementsConfigsApiFp(this.configuration)\n      .getElementsConfig(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.elementsConfigId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.\n   * @summary Get Elements Config Runtime\n   * @param {ElementsConfigsApiGetElementsConfigRuntimeRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ElementsConfigsApi\n   */\n  public getElementsConfigRuntime(\n    requestParameters: ElementsConfigsApiGetElementsConfigRuntimeRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ElementsConfigsApiFp(this.configuration)\n      .getElementsConfigRuntime(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.elementsConfigId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get Elements Type Config\n   * @param {ElementsConfigsApiGetElementsTypeConfigRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ElementsConfigsApi\n   */\n  public getElementsTypeConfig(\n    requestParameters: ElementsConfigsApiGetElementsTypeConfigRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ElementsConfigsApiFp(this.configuration)\n      .getElementsTypeConfig(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.elementType,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Lists all the elements_configs under the active organization.\n   * @summary List Elements Configs\n   * @param {ElementsConfigsApiListElementsConfigsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ElementsConfigsApi\n   */\n  public listElementsConfigs(\n    requestParameters: ElementsConfigsApiListElementsConfigsRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ElementsConfigsApiFp(this.configuration)\n      .listElementsConfigs(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.page,\n        requestParameters.perPage,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Updates the elements_config.\n   * @summary Update Elements Config\n   * @param {ElementsConfigsApiUpdateElementsConfigRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ElementsConfigsApi\n   */\n  public updateElementsConfig(\n    requestParameters: ElementsConfigsApiUpdateElementsConfigRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ElementsConfigsApiFp(this.configuration)\n      .updateElementsConfig(\n        requestParameters.elementsConfigId,\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.elementsConfigUpdate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Update Elements Type Permissions\n   * @param {ElementsConfigsApiUpdateElementsTypePermissionsRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ElementsConfigsApi\n   */\n  public updateElementsTypePermissions(\n    requestParameters: ElementsConfigsApiUpdateElementsTypePermissionsRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return ElementsConfigsApiFp(this.configuration)\n      .updateElementsTypePermissions(\n        requestParameters.elementType,\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.elementsEnvTypeUpdate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Configuration } from './configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\n\nexport const BASE_PATH = 'http://localhost'.replace(/\\/+$/, '');\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n  csv: ',',\n  ssv: ' ',\n  tsv: '\\t',\n  pipes: '|',\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n  url: string;\n  options: AxiosRequestConfig;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n  protected configuration: Configuration | undefined;\n\n  constructor(\n    configuration?: Configuration,\n    protected basePath: string = BASE_PATH,\n    protected axios: AxiosInstance = globalAxios,\n  ) {\n    if (configuration) {\n      this.configuration = configuration;\n      this.basePath = configuration.basePath || this.basePath;\n    }\n  }\n}\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n  name: 'RequiredError' = 'RequiredError';\n  constructor(public field: string, msg?: string) {\n    super(msg);\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Configuration } from './configuration';\nimport { RequiredError, RequestArgs } from './base';\nimport { AxiosInstance, AxiosResponse } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com';\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (\n  functionName: string,\n  paramName: string,\n  paramValue: unknown,\n) {\n  if (paramValue === null || paramValue === undefined) {\n    throw new RequiredError(\n      paramName,\n      `Required parameter ${paramName} was null or undefined when calling ${functionName}.`,\n    );\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (\n  object: any,\n  keyParamName: string,\n  configuration?: Configuration,\n) {\n  if (configuration && configuration.apiKey) {\n    const localVarApiKeyValue =\n      typeof configuration.apiKey === 'function'\n        ? await configuration.apiKey(keyParamName)\n        : await configuration.apiKey;\n    object[keyParamName] = localVarApiKeyValue;\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n  if (configuration && (configuration.username || configuration.password)) {\n    object['auth'] = { username: configuration.username, password: configuration.password };\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n  if (configuration && configuration.accessToken) {\n    const accessToken =\n      typeof configuration.accessToken === 'function'\n        ? await configuration.accessToken()\n        : await configuration.accessToken;\n    object['Authorization'] = 'Bearer ' + accessToken;\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (\n  object: any,\n  name: string,\n  scopes: string[],\n  configuration?: Configuration,\n) {\n  if (configuration && configuration.accessToken) {\n    const localVarAccessTokenValue =\n      typeof configuration.accessToken === 'function'\n        ? await configuration.accessToken(name, scopes)\n        : await configuration.accessToken;\n    object['Authorization'] = 'Bearer ' + localVarAccessTokenValue;\n  }\n};\n\nfunction setFlattenedQueryParams(\n  urlSearchParams: URLSearchParams,\n  parameter: any,\n  key: string = '',\n): void {\n  if (typeof parameter === 'object') {\n    if (Array.isArray(parameter)) {\n      (parameter as any[]).forEach((item) => setFlattenedQueryParams(urlSearchParams, item, key));\n    } else {\n      Object.keys(parameter).forEach((currentKey) =>\n        setFlattenedQueryParams(\n          urlSearchParams,\n          parameter[currentKey],\n          `${key}${key !== '' ? '.' : ''}${currentKey}`,\n        ),\n      );\n    }\n  } else {\n    if (urlSearchParams.has(key)) {\n      urlSearchParams.append(key, parameter);\n    } else {\n      urlSearchParams.set(key, parameter);\n    }\n  }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n  const searchParams = new URLSearchParams(url.search);\n  setFlattenedQueryParams(searchParams, objects);\n  url.search = searchParams.toString();\n};\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (\n  value: any,\n  requestOptions: any,\n  configuration?: Configuration,\n) {\n  const nonString = typeof value !== 'string';\n  const needsSerialization =\n    nonString && configuration && configuration.isJsonMime\n      ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n      : nonString;\n  return needsSerialization ? JSON.stringify(value !== undefined ? value : {}) : value || '';\n};\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n  return url.pathname + url.search + url.hash;\n};\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (\n  axiosArgs: RequestArgs,\n  globalAxios: AxiosInstance,\n  BASE_PATH: string,\n  configuration?: Configuration,\n) {\n  return <T = unknown, R = AxiosResponse<T>>(\n    axios: AxiosInstance = globalAxios,\n    basePath: string = BASE_PATH,\n  ) => {\n    const axiosRequestArgs = {\n      ...axiosArgs.options,\n      url: (configuration?.basePath || basePath) + axiosArgs.url,\n    };\n    return axios.request<T, R>(axiosRequestArgs);\n  };\n};\n"],"mappings":"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","names":["import_axios","globalAxios","globalAxios","BASE_PATH","globalAxios"]}