{"version":3,"sources":["../../../src/openapi/api/users-elements-data-api.ts","../../../src/openapi/base.ts","../../../src/openapi/common.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\n// @ts-ignore\nimport { ElementsRoleRead } from '../types';\n// @ts-ignore\nimport { ElementsUserCreate } from '../types';\n// @ts-ignore\nimport { ElementsUserRoleCreate } from '../types';\n// @ts-ignore\nimport { ElementsUserRoleRemove } from '../types';\n// @ts-ignore\nimport { HTTPValidationError } from '../types';\n// @ts-ignore\nimport { PaginatedResultUserRead } from '../types';\n// @ts-ignore\nimport { RoleAssignmentRead } from '../types';\n// @ts-ignore\nimport { UserRead } from '../types';\n/**\n * UsersElementsDataApi - axios parameter creator\n * @export\n */\nexport const UsersElementsDataApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     * Assigns a role to the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.\n     * @summary Assign role to user\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {ElementsUserRoleCreate} elementsUserRoleCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    elementsAssignRoleToUser: async (\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      userId: string,\n      elementsUserRoleCreate: ElementsUserRoleCreate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('elementsAssignRoleToUser', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('elementsAssignRoleToUser', 'envId', envId);\n      // verify required parameter 'elementsConfigId' is not null or undefined\n      assertParamExists('elementsAssignRoleToUser', 'elementsConfigId', elementsConfigId);\n      // verify required parameter 'userId' is not null or undefined\n      assertParamExists('elementsAssignRoleToUser', 'userId', userId);\n      // verify required parameter 'elementsUserRoleCreate' is not null or undefined\n      assertParamExists(\n        'elementsAssignRoleToUser',\n        'elementsUserRoleCreate',\n        elementsUserRoleCreate,\n      );\n      const localVarPath =\n        `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/users/{user_id}/roles`\n          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n          .replace(`{${'elements_config_id'}}`, encodeURIComponent(String(elementsConfigId)))\n          .replace(`{${'user_id'}}`, encodeURIComponent(String(userId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        elementsUserRoleCreate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Creates a new user inside the Permit.io system, from that point forward you may run permission checks on that user.  If the user is already created: will return 200 instead of 201, and will return the existing user object in the response body.\n     * @summary Create user\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {ElementsUserCreate} elementsUserCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    elementsCreateUser: async (\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      elementsUserCreate: ElementsUserCreate,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('elementsCreateUser', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('elementsCreateUser', 'envId', envId);\n      // verify required parameter 'elementsConfigId' is not null or undefined\n      assertParamExists('elementsCreateUser', 'elementsConfigId', elementsConfigId);\n      // verify required parameter 'elementsUserCreate' is not null or undefined\n      assertParamExists('elementsCreateUser', 'elementsUserCreate', elementsUserCreate);\n      const localVarPath = `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/users`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'elements_config_id'}}`, encodeURIComponent(String(elementsConfigId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        elementsUserCreate,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Delete user\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    elementsDeleteUser: async (\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      userId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('elementsDeleteUser', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('elementsDeleteUser', 'envId', envId);\n      // verify required parameter 'elementsConfigId' is not null or undefined\n      assertParamExists('elementsDeleteUser', 'elementsConfigId', elementsConfigId);\n      // verify required parameter 'userId' is not null or undefined\n      assertParamExists('elementsDeleteUser', 'userId', userId);\n      const localVarPath =\n        `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/users/{user_id}`\n          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n          .replace(`{${'elements_config_id'}}`, encodeURIComponent(String(elementsConfigId)))\n          .replace(`{${'user_id'}}`, encodeURIComponent(String(userId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Lists all the users defined within an environment.\n     * @summary List roles\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [search] Text search for the email field\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    elementsListRoles: async (\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      search?: string,\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('elementsListRoles', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('elementsListRoles', 'envId', envId);\n      // verify required parameter 'elementsConfigId' is not null or undefined\n      assertParamExists('elementsListRoles', 'elementsConfigId', elementsConfigId);\n      const localVarPath = `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/roles`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'elements_config_id'}}`, encodeURIComponent(String(elementsConfigId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Lists all the users defined within an environment.\n     * @summary List users\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [search] Text search for the email field\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    elementsListUsers: async (\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      search?: string,\n      page?: number,\n      perPage?: number,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('elementsListUsers', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('elementsListUsers', 'envId', envId);\n      // verify required parameter 'elementsConfigId' is not null or undefined\n      assertParamExists('elementsListUsers', 'elementsConfigId', elementsConfigId);\n      const localVarPath = `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/users`\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n        .replace(`{${'elements_config_id'}}`, encodeURIComponent(String(elementsConfigId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (perPage !== undefined) {\n        localVarQueryParameter['per_page'] = perPage;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Unassigns the role from the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.\n     * @summary Unassign role from user\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {ElementsUserRoleRemove} elementsUserRoleRemove\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    elementsUnassignRoleFromUser: async (\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      userId: string,\n      elementsUserRoleRemove: ElementsUserRoleRemove,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('elementsUnassignRoleFromUser', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('elementsUnassignRoleFromUser', 'envId', envId);\n      // verify required parameter 'elementsConfigId' is not null or undefined\n      assertParamExists('elementsUnassignRoleFromUser', 'elementsConfigId', elementsConfigId);\n      // verify required parameter 'userId' is not null or undefined\n      assertParamExists('elementsUnassignRoleFromUser', 'userId', userId);\n      // verify required parameter 'elementsUserRoleRemove' is not null or undefined\n      assertParamExists(\n        'elementsUnassignRoleFromUser',\n        'elementsUserRoleRemove',\n        elementsUserRoleRemove,\n      );\n      const localVarPath =\n        `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/users/{user_id}/roles`\n          .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n          .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))\n          .replace(`{${'elements_config_id'}}`, encodeURIComponent(String(elementsConfigId)))\n          .replace(`{${'user_id'}}`, encodeURIComponent(String(userId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        elementsUserRoleRemove,\n        localVarRequestOptions,\n        configuration,\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Updates the embed_config.\n     * @summary Set Config Active\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    setConfigActive: async (\n      elementsConfigId: string,\n      projId: string,\n      envId: string,\n      options: AxiosRequestConfig = {},\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'elementsConfigId' is not null or undefined\n      assertParamExists('setConfigActive', 'elementsConfigId', elementsConfigId);\n      // verify required parameter 'projId' is not null or undefined\n      assertParamExists('setConfigActive', 'projId', projId);\n      // verify required parameter 'envId' is not null or undefined\n      assertParamExists('setConfigActive', 'envId', envId);\n      const localVarPath = `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/active`\n        .replace(`{${'elements_config_id'}}`, encodeURIComponent(String(elementsConfigId)))\n        .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))\n        .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication HTTPBearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * UsersElementsDataApi - functional programming interface\n * @export\n */\nexport const UsersElementsDataApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = UsersElementsDataApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * Assigns a role to the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.\n     * @summary Assign role to user\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {ElementsUserRoleCreate} elementsUserRoleCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async elementsAssignRoleToUser(\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      userId: string,\n      elementsUserRoleCreate: ElementsUserRoleCreate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleAssignmentRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.elementsAssignRoleToUser(\n        projId,\n        envId,\n        elementsConfigId,\n        userId,\n        elementsUserRoleCreate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Creates a new user inside the Permit.io system, from that point forward you may run permission checks on that user.  If the user is already created: will return 200 instead of 201, and will return the existing user object in the response body.\n     * @summary Create user\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {ElementsUserCreate} elementsUserCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async elementsCreateUser(\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      elementsUserCreate: ElementsUserCreate,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRead>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.elementsCreateUser(\n        projId,\n        envId,\n        elementsConfigId,\n        elementsUserCreate,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Delete user\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async elementsDeleteUser(\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      userId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.elementsDeleteUser(\n        projId,\n        envId,\n        elementsConfigId,\n        userId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Lists all the users defined within an environment.\n     * @summary List roles\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [search] Text search for the email field\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async elementsListRoles(\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      search?: string,\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ElementsRoleRead>>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.elementsListRoles(\n        projId,\n        envId,\n        elementsConfigId,\n        search,\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Lists all the users defined within an environment.\n     * @summary List users\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [search] Text search for the email field\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async elementsListUsers(\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      search?: string,\n      page?: number,\n      perPage?: number,\n      options?: AxiosRequestConfig,\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResultUserRead>\n    > {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.elementsListUsers(\n        projId,\n        envId,\n        elementsConfigId,\n        search,\n        page,\n        perPage,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Unassigns the role from the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.\n     * @summary Unassign role from user\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {ElementsUserRoleRemove} elementsUserRoleRemove\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async elementsUnassignRoleFromUser(\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      userId: string,\n      elementsUserRoleRemove: ElementsUserRoleRemove,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.elementsUnassignRoleFromUser(\n        projId,\n        envId,\n        elementsConfigId,\n        userId,\n        elementsUserRoleRemove,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * Updates the embed_config.\n     * @summary Set Config Active\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async setConfigActive(\n      elementsConfigId: string,\n      projId: string,\n      envId: string,\n      options?: AxiosRequestConfig,\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.setConfigActive(\n        elementsConfigId,\n        projId,\n        envId,\n        options,\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * UsersElementsDataApi - factory interface\n * @export\n */\nexport const UsersElementsDataApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance,\n) {\n  const localVarFp = UsersElementsDataApiFp(configuration);\n  return {\n    /**\n     * Assigns a role to the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.\n     * @summary Assign role to user\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {ElementsUserRoleCreate} elementsUserRoleCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    elementsAssignRoleToUser(\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      userId: string,\n      elementsUserRoleCreate: ElementsUserRoleCreate,\n      options?: any,\n    ): AxiosPromise<RoleAssignmentRead> {\n      return localVarFp\n        .elementsAssignRoleToUser(\n          projId,\n          envId,\n          elementsConfigId,\n          userId,\n          elementsUserRoleCreate,\n          options,\n        )\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Creates a new user inside the Permit.io system, from that point forward you may run permission checks on that user.  If the user is already created: will return 200 instead of 201, and will return the existing user object in the response body.\n     * @summary Create user\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {ElementsUserCreate} elementsUserCreate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    elementsCreateUser(\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      elementsUserCreate: ElementsUserCreate,\n      options?: any,\n    ): AxiosPromise<UserRead> {\n      return localVarFp\n        .elementsCreateUser(projId, envId, elementsConfigId, elementsUserCreate, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Delete user\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    elementsDeleteUser(\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      userId: string,\n      options?: any,\n    ): AxiosPromise<void> {\n      return localVarFp\n        .elementsDeleteUser(projId, envId, elementsConfigId, userId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Lists all the users defined within an environment.\n     * @summary List roles\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [search] Text search for the email field\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    elementsListRoles(\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      search?: string,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<Array<ElementsRoleRead>> {\n      return localVarFp\n        .elementsListRoles(projId, envId, elementsConfigId, search, page, perPage, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Lists all the users defined within an environment.\n     * @summary List users\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} [search] Text search for the email field\n     * @param {number} [page] Page number of the results to fetch, starting at 1.\n     * @param {number} [perPage] The number of results per page (max 100).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    elementsListUsers(\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      search?: string,\n      page?: number,\n      perPage?: number,\n      options?: any,\n    ): AxiosPromise<PaginatedResultUserRead> {\n      return localVarFp\n        .elementsListUsers(projId, envId, elementsConfigId, search, page, perPage, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Unassigns the role from the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.\n     * @summary Unassign role from user\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n     * @param {ElementsUserRoleRemove} elementsUserRoleRemove\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    elementsUnassignRoleFromUser(\n      projId: string,\n      envId: string,\n      elementsConfigId: string,\n      userId: string,\n      elementsUserRoleRemove: ElementsUserRoleRemove,\n      options?: any,\n    ): AxiosPromise<void> {\n      return localVarFp\n        .elementsUnassignRoleFromUser(\n          projId,\n          envId,\n          elementsConfigId,\n          userId,\n          elementsUserRoleRemove,\n          options,\n        )\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Updates the embed_config.\n     * @summary Set Config Active\n     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    setConfigActive(\n      elementsConfigId: string,\n      projId: string,\n      envId: string,\n      options?: any,\n    ): AxiosPromise<void> {\n      return localVarFp\n        .setConfigActive(elementsConfigId, projId, envId, options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * Request parameters for elementsAssignRoleToUser operation in UsersElementsDataApi.\n * @export\n * @interface UsersElementsDataApiElementsAssignRoleToUserRequest\n */\nexport interface UsersElementsDataApiElementsAssignRoleToUserRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsAssignRoleToUser\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsAssignRoleToUser\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsAssignRoleToUser\n   */\n  readonly elementsConfigId: string;\n\n  /**\n   * Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsAssignRoleToUser\n   */\n  readonly userId: string;\n\n  /**\n   *\n   * @type {ElementsUserRoleCreate}\n   * @memberof UsersElementsDataApiElementsAssignRoleToUser\n   */\n  readonly elementsUserRoleCreate: ElementsUserRoleCreate;\n}\n\n/**\n * Request parameters for elementsCreateUser operation in UsersElementsDataApi.\n * @export\n * @interface UsersElementsDataApiElementsCreateUserRequest\n */\nexport interface UsersElementsDataApiElementsCreateUserRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsCreateUser\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsCreateUser\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsCreateUser\n   */\n  readonly elementsConfigId: string;\n\n  /**\n   *\n   * @type {ElementsUserCreate}\n   * @memberof UsersElementsDataApiElementsCreateUser\n   */\n  readonly elementsUserCreate: ElementsUserCreate;\n}\n\n/**\n * Request parameters for elementsDeleteUser operation in UsersElementsDataApi.\n * @export\n * @interface UsersElementsDataApiElementsDeleteUserRequest\n */\nexport interface UsersElementsDataApiElementsDeleteUserRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsDeleteUser\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsDeleteUser\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsDeleteUser\n   */\n  readonly elementsConfigId: string;\n\n  /**\n   * Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsDeleteUser\n   */\n  readonly userId: string;\n}\n\n/**\n * Request parameters for elementsListRoles operation in UsersElementsDataApi.\n * @export\n * @interface UsersElementsDataApiElementsListRolesRequest\n */\nexport interface UsersElementsDataApiElementsListRolesRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsListRoles\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsListRoles\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsListRoles\n   */\n  readonly elementsConfigId: string;\n\n  /**\n   * Text search for the email field\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsListRoles\n   */\n  readonly search?: string;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof UsersElementsDataApiElementsListRoles\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof UsersElementsDataApiElementsListRoles\n   */\n  readonly perPage?: number;\n}\n\n/**\n * Request parameters for elementsListUsers operation in UsersElementsDataApi.\n * @export\n * @interface UsersElementsDataApiElementsListUsersRequest\n */\nexport interface UsersElementsDataApiElementsListUsersRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsListUsers\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsListUsers\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsListUsers\n   */\n  readonly elementsConfigId: string;\n\n  /**\n   * Text search for the email field\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsListUsers\n   */\n  readonly search?: string;\n\n  /**\n   * Page number of the results to fetch, starting at 1.\n   * @type {number}\n   * @memberof UsersElementsDataApiElementsListUsers\n   */\n  readonly page?: number;\n\n  /**\n   * The number of results per page (max 100).\n   * @type {number}\n   * @memberof UsersElementsDataApiElementsListUsers\n   */\n  readonly perPage?: number;\n}\n\n/**\n * Request parameters for elementsUnassignRoleFromUser operation in UsersElementsDataApi.\n * @export\n * @interface UsersElementsDataApiElementsUnassignRoleFromUserRequest\n */\nexport interface UsersElementsDataApiElementsUnassignRoleFromUserRequest {\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsUnassignRoleFromUser\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsUnassignRoleFromUser\n   */\n  readonly envId: string;\n\n  /**\n   * Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsUnassignRoleFromUser\n   */\n  readonly elementsConfigId: string;\n\n  /**\n   * Either the unique id of the user, or the URL-friendly key of the user (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiElementsUnassignRoleFromUser\n   */\n  readonly userId: string;\n\n  /**\n   *\n   * @type {ElementsUserRoleRemove}\n   * @memberof UsersElementsDataApiElementsUnassignRoleFromUser\n   */\n  readonly elementsUserRoleRemove: ElementsUserRoleRemove;\n}\n\n/**\n * Request parameters for setConfigActive operation in UsersElementsDataApi.\n * @export\n * @interface UsersElementsDataApiSetConfigActiveRequest\n */\nexport interface UsersElementsDataApiSetConfigActiveRequest {\n  /**\n   * Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiSetConfigActive\n   */\n  readonly elementsConfigId: string;\n\n  /**\n   * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiSetConfigActive\n   */\n  readonly projId: string;\n\n  /**\n   * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \\&quot;slug\\&quot;).\n   * @type {string}\n   * @memberof UsersElementsDataApiSetConfigActive\n   */\n  readonly envId: string;\n}\n\n/**\n * UsersElementsDataApi - object-oriented interface\n * @export\n * @class UsersElementsDataApi\n * @extends {BaseAPI}\n */\nexport class UsersElementsDataApi extends BaseAPI {\n  /**\n   * Assigns a role to the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.\n   * @summary Assign role to user\n   * @param {UsersElementsDataApiElementsAssignRoleToUserRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof UsersElementsDataApi\n   */\n  public elementsAssignRoleToUser(\n    requestParameters: UsersElementsDataApiElementsAssignRoleToUserRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return UsersElementsDataApiFp(this.configuration)\n      .elementsAssignRoleToUser(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.elementsConfigId,\n        requestParameters.userId,\n        requestParameters.elementsUserRoleCreate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Creates a new user inside the Permit.io system, from that point forward you may run permission checks on that user.  If the user is already created: will return 200 instead of 201, and will return the existing user object in the response body.\n   * @summary Create user\n   * @param {UsersElementsDataApiElementsCreateUserRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof UsersElementsDataApi\n   */\n  public elementsCreateUser(\n    requestParameters: UsersElementsDataApiElementsCreateUserRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return UsersElementsDataApiFp(this.configuration)\n      .elementsCreateUser(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.elementsConfigId,\n        requestParameters.elementsUserCreate,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Delete user\n   * @param {UsersElementsDataApiElementsDeleteUserRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof UsersElementsDataApi\n   */\n  public elementsDeleteUser(\n    requestParameters: UsersElementsDataApiElementsDeleteUserRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return UsersElementsDataApiFp(this.configuration)\n      .elementsDeleteUser(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.elementsConfigId,\n        requestParameters.userId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Lists all the users defined within an environment.\n   * @summary List roles\n   * @param {UsersElementsDataApiElementsListRolesRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof UsersElementsDataApi\n   */\n  public elementsListRoles(\n    requestParameters: UsersElementsDataApiElementsListRolesRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return UsersElementsDataApiFp(this.configuration)\n      .elementsListRoles(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.elementsConfigId,\n        requestParameters.search,\n        requestParameters.page,\n        requestParameters.perPage,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Lists all the users defined within an environment.\n   * @summary List users\n   * @param {UsersElementsDataApiElementsListUsersRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof UsersElementsDataApi\n   */\n  public elementsListUsers(\n    requestParameters: UsersElementsDataApiElementsListUsersRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return UsersElementsDataApiFp(this.configuration)\n      .elementsListUsers(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.elementsConfigId,\n        requestParameters.search,\n        requestParameters.page,\n        requestParameters.perPage,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Unassigns the role from the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.\n   * @summary Unassign role from user\n   * @param {UsersElementsDataApiElementsUnassignRoleFromUserRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof UsersElementsDataApi\n   */\n  public elementsUnassignRoleFromUser(\n    requestParameters: UsersElementsDataApiElementsUnassignRoleFromUserRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return UsersElementsDataApiFp(this.configuration)\n      .elementsUnassignRoleFromUser(\n        requestParameters.projId,\n        requestParameters.envId,\n        requestParameters.elementsConfigId,\n        requestParameters.userId,\n        requestParameters.elementsUserRoleRemove,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Updates the embed_config.\n   * @summary Set Config Active\n   * @param {UsersElementsDataApiSetConfigActiveRequest} requestParameters Request parameters.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof UsersElementsDataApi\n   */\n  public setConfigActive(\n    requestParameters: UsersElementsDataApiSetConfigActiveRequest,\n    options?: AxiosRequestConfig,\n  ) {\n    return UsersElementsDataApiFp(this.configuration)\n      .setConfigActive(\n        requestParameters.elementsConfigId,\n        requestParameters.projId,\n        requestParameters.envId,\n        options,\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Configuration } from './configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\n\nexport const BASE_PATH = 'http://localhost'.replace(/\\/+$/, '');\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n  csv: ',',\n  ssv: ' ',\n  tsv: '\\t',\n  pipes: '|',\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n  url: string;\n  options: AxiosRequestConfig;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n  protected configuration: Configuration | undefined;\n\n  constructor(\n    configuration?: Configuration,\n    protected basePath: string = BASE_PATH,\n    protected axios: AxiosInstance = globalAxios,\n  ) {\n    if (configuration) {\n      this.configuration = configuration;\n      this.basePath = configuration.basePath || this.basePath;\n    }\n  }\n}\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n  name: 'RequiredError' = 'RequiredError';\n  constructor(public field: string, msg?: string) {\n    super(msg);\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Permit.io API\n *  Authorization as a service\n *\n * The version of the OpenAPI document: 2.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Configuration } from './configuration';\nimport { RequiredError, RequestArgs } from './base';\nimport { AxiosInstance, AxiosResponse } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com';\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (\n  functionName: string,\n  paramName: string,\n  paramValue: unknown,\n) {\n  if (paramValue === null || paramValue === undefined) {\n    throw new RequiredError(\n      paramName,\n      `Required parameter ${paramName} was null or undefined when calling ${functionName}.`,\n    );\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (\n  object: any,\n  keyParamName: string,\n  configuration?: Configuration,\n) {\n  if (configuration && configuration.apiKey) {\n    const localVarApiKeyValue =\n      typeof configuration.apiKey === 'function'\n        ? await configuration.apiKey(keyParamName)\n        : await configuration.apiKey;\n    object[keyParamName] = localVarApiKeyValue;\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n  if (configuration && (configuration.username || configuration.password)) {\n    object['auth'] = { username: configuration.username, password: configuration.password };\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n  if (configuration && configuration.accessToken) {\n    const accessToken =\n      typeof configuration.accessToken === 'function'\n        ? await configuration.accessToken()\n        : await configuration.accessToken;\n    object['Authorization'] = 'Bearer ' + accessToken;\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (\n  object: any,\n  name: string,\n  scopes: string[],\n  configuration?: Configuration,\n) {\n  if (configuration && configuration.accessToken) {\n    const localVarAccessTokenValue =\n      typeof configuration.accessToken === 'function'\n        ? await configuration.accessToken(name, scopes)\n        : await configuration.accessToken;\n    object['Authorization'] = 'Bearer ' + localVarAccessTokenValue;\n  }\n};\n\nfunction setFlattenedQueryParams(\n  urlSearchParams: URLSearchParams,\n  parameter: any,\n  key: string = '',\n): void {\n  if (typeof parameter === 'object') {\n    if (Array.isArray(parameter)) {\n      (parameter as any[]).forEach((item) => setFlattenedQueryParams(urlSearchParams, item, key));\n    } else {\n      Object.keys(parameter).forEach((currentKey) =>\n        setFlattenedQueryParams(\n          urlSearchParams,\n          parameter[currentKey],\n          `${key}${key !== '' ? '.' : ''}${currentKey}`,\n        ),\n      );\n    }\n  } else {\n    if (urlSearchParams.has(key)) {\n      urlSearchParams.append(key, parameter);\n    } else {\n      urlSearchParams.set(key, parameter);\n    }\n  }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n  const searchParams = new URLSearchParams(url.search);\n  setFlattenedQueryParams(searchParams, objects);\n  url.search = searchParams.toString();\n};\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (\n  value: any,\n  requestOptions: any,\n  configuration?: Configuration,\n) {\n  const nonString = typeof value !== 'string';\n  const needsSerialization =\n    nonString && configuration && configuration.isJsonMime\n      ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n      : nonString;\n  return needsSerialization ? JSON.stringify(value !== undefined ? value : {}) : value || '';\n};\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n  return url.pathname + url.search + url.hash;\n};\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (\n  axiosArgs: RequestArgs,\n  globalAxios: AxiosInstance,\n  BASE_PATH: string,\n  configuration?: Configuration,\n) {\n  return <T = unknown, R = AxiosResponse<T>>(\n    axios: AxiosInstance = globalAxios,\n    basePath: string = BASE_PATH,\n  ) => {\n    const axiosRequestArgs = {\n      ...axiosArgs.options,\n      url: (configuration?.basePath || basePath) + axiosArgs.url,\n    };\n    return axios.request<T, R>(axiosRequestArgs);\n  };\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA,IAAAA,gBAA6E;;;ACG7E,mBAA6E;AAEtE,IAAM,YAAY,mBAAmB,QAAQ,QAAQ,EAAE;AA4BvD,IAAM,UAAN,MAAc;AAAA,EAGnB,YACE,eACU,WAAmB,WACnB,QAAuB,aAAAC,SACjC;AAFU;AACA;AAEV,QAAI,eAAe;AACjB,WAAK,gBAAgB;AACrB,WAAK,WAAW,cAAc,YAAY,KAAK;AAAA,IACjD;AAAA,EACF;AACF;AAQO,IAAM,gBAAN,cAA4B,MAAM;AAAA,EAEvC,YAAmB,OAAe,KAAc;AAC9C,UAAM,GAAG;AADQ;AADnB,gBAAwB;AAAA,EAGxB;AACF;;;ACnDO,IAAM,iBAAiB;AAOvB,IAAM,oBAAoB,SAC/B,cACA,WACA,YACA;AACA,MAAI,eAAe,QAAQ,eAAe,QAAW;AACnD,UAAM,IAAI;AAAA,MACR;AAAA,MACA,sBAAsB,SAAS,uCAAuC,YAAY;AAAA,IACpF;AAAA,EACF;AACF;AAkCO,IAAM,wBAAwB,eAAgB,QAAa,eAA+B;AAC/F,MAAI,iBAAiB,cAAc,aAAa;AAC9C,UAAM,cACJ,OAAO,cAAc,gBAAgB,aACjC,MAAM,cAAc,YAAY,IAChC,MAAM,cAAc;AAC1B,WAAO,eAAe,IAAI,YAAY;AAAA,EACxC;AACF;AAqBA,SAAS,wBACP,iBACA,WACA,MAAc,IACR;AACN,MAAI,OAAO,cAAc,UAAU;AACjC,QAAI,MAAM,QAAQ,SAAS,GAAG;AAC5B,MAAC,UAAoB,QAAQ,CAAC,SAAS,wBAAwB,iBAAiB,MAAM,GAAG,CAAC;AAAA,IAC5F,OAAO;AACL,aAAO,KAAK,SAAS,EAAE;AAAA,QAAQ,CAAC,eAC9B;AAAA,UACE;AAAA,UACA,UAAU,UAAU;AAAA,UACpB,GAAG,GAAG,GAAG,QAAQ,KAAK,MAAM,EAAE,GAAG,UAAU;AAAA,QAC7C;AAAA,MACF;AAAA,IACF;AAAA,EACF,OAAO;AACL,QAAI,gBAAgB,IAAI,GAAG,GAAG;AAC5B,sBAAgB,OAAO,KAAK,SAAS;AAAA,IACvC,OAAO;AACL,sBAAgB,IAAI,KAAK,SAAS;AAAA,IACpC;AAAA,EACF;AACF;AAMO,IAAM,kBAAkB,SAAU,QAAa,SAAgB;AACpE,QAAM,eAAe,IAAI,gBAAgB,IAAI,MAAM;AACnD,0BAAwB,cAAc,OAAO;AAC7C,MAAI,SAAS,aAAa,SAAS;AACrC;AAMO,IAAM,wBAAwB,SACnC,OACA,gBACA,eACA;AACA,QAAM,YAAY,OAAO,UAAU;AACnC,QAAM,qBACJ,aAAa,iBAAiB,cAAc,aACxC,cAAc,WAAW,eAAe,QAAQ,cAAc,CAAC,IAC/D;AACN,SAAO,qBAAqB,KAAK,UAAU,UAAU,SAAY,QAAQ,CAAC,CAAC,IAAI,SAAS;AAC1F;AAMO,IAAM,eAAe,SAAU,KAAU;AAC9C,SAAO,IAAI,WAAW,IAAI,SAAS,IAAI;AACzC;AAMO,IAAM,wBAAwB,SACnC,WACAC,cACAC,YACA,eACA;AACA,SAAO,CACL,QAAuBD,cACvB,WAAmBC,eAChB;AACH,UAAM,mBAAmB;AAAA,MACvB,GAAG,UAAU;AAAA,MACb,OAAM,+CAAe,aAAY,YAAY,UAAU;AAAA,IACzD;AACA,WAAO,MAAM,QAAc,gBAAgB;AAAA,EAC7C;AACF;;;AFpIO,IAAM,wCAAwC,SAAU,eAA+B;AAC5F,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYL,0BAA0B,OACxB,QACA,OACA,kBACA,QACA,wBACA,UAA8B,CAAC,MACN;AAEzB,wBAAkB,4BAA4B,UAAU,MAAM;AAE9D,wBAAkB,4BAA4B,SAAS,KAAK;AAE5D,wBAAkB,4BAA4B,oBAAoB,gBAAgB;AAElF,wBAAkB,4BAA4B,UAAU,MAAM;AAE9D;AAAA,QACE;AAAA,QACA;AAAA,QACA;AAAA,MACF;AACA,YAAM,eACJ,yFACG,QAAQ,IAAI,SAAS,KAAK,mBAAmB,OAAO,MAAM,CAAC,CAAC,EAC5D,QAAQ,IAAI,QAAQ,KAAK,mBAAmB,OAAO,KAAK,CAAC,CAAC,EAC1D,QAAQ,IAAI,oBAAoB,KAAK,mBAAmB,OAAO,gBAAgB,CAAC,CAAC,EACjF,QAAQ,IAAI,SAAS,KAAK,mBAAmB,OAAO,MAAM,CAAC,CAAC;AAEjE,YAAM,iBAAiB,IAAI,IAAI,cAAc,cAAc;AAC3D,UAAI;AACJ,UAAI,eAAe;AACjB,sBAAc,cAAc;AAAA,MAC9B;AAEA,YAAM,yBAAyB,EAAE,QAAQ,QAAQ,GAAG,aAAa,GAAG,QAAQ;AAC5E,YAAM,0BAA0B,CAAC;AACjC,YAAM,yBAAyB,CAAC;AAIhC,YAAM,sBAAsB,yBAAyB,aAAa;AAElE,8BAAwB,cAAc,IAAI;AAE1C,sBAAgB,gBAAgB,sBAAsB;AACtD,UAAI,yBAAyB,eAAe,YAAY,UAAU,YAAY,UAAU,CAAC;AACzF,6BAAuB,UAAU;AAAA,QAC/B,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG,QAAQ;AAAA,MACb;AACA,6BAAuB,OAAO;AAAA,QAC5B;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAEA,aAAO;AAAA,QACL,KAAK,aAAa,cAAc;AAAA,QAChC,SAAS;AAAA,MACX;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWA,oBAAoB,OAClB,QACA,OACA,kBACA,oBACA,UAA8B,CAAC,MACN;AAEzB,wBAAkB,sBAAsB,UAAU,MAAM;AAExD,wBAAkB,sBAAsB,SAAS,KAAK;AAEtD,wBAAkB,sBAAsB,oBAAoB,gBAAgB;AAE5E,wBAAkB,sBAAsB,sBAAsB,kBAAkB;AAChF,YAAM,eAAe,yEAClB,QAAQ,IAAI,SAAS,KAAK,mBAAmB,OAAO,MAAM,CAAC,CAAC,EAC5D,QAAQ,IAAI,QAAQ,KAAK,mBAAmB,OAAO,KAAK,CAAC,CAAC,EAC1D,QAAQ,IAAI,oBAAoB,KAAK,mBAAmB,OAAO,gBAAgB,CAAC,CAAC;AAEpF,YAAM,iBAAiB,IAAI,IAAI,cAAc,cAAc;AAC3D,UAAI;AACJ,UAAI,eAAe;AACjB,sBAAc,cAAc;AAAA,MAC9B;AAEA,YAAM,yBAAyB,EAAE,QAAQ,QAAQ,GAAG,aAAa,GAAG,QAAQ;AAC5E,YAAM,0BAA0B,CAAC;AACjC,YAAM,yBAAyB,CAAC;AAIhC,YAAM,sBAAsB,yBAAyB,aAAa;AAElE,8BAAwB,cAAc,IAAI;AAE1C,sBAAgB,gBAAgB,sBAAsB;AACtD,UAAI,yBAAyB,eAAe,YAAY,UAAU,YAAY,UAAU,CAAC;AACzF,6BAAuB,UAAU;AAAA,QAC/B,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG,QAAQ;AAAA,MACb;AACA,6BAAuB,OAAO;AAAA,QAC5B;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAEA,aAAO;AAAA,QACL,KAAK,aAAa,cAAc;AAAA,QAChC,SAAS;AAAA,MACX;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWA,oBAAoB,OAClB,QACA,OACA,kBACA,QACA,UAA8B,CAAC,MACN;AAEzB,wBAAkB,sBAAsB,UAAU,MAAM;AAExD,wBAAkB,sBAAsB,SAAS,KAAK;AAEtD,wBAAkB,sBAAsB,oBAAoB,gBAAgB;AAE5E,wBAAkB,sBAAsB,UAAU,MAAM;AACxD,YAAM,eACJ,mFACG,QAAQ,IAAI,SAAS,KAAK,mBAAmB,OAAO,MAAM,CAAC,CAAC,EAC5D,QAAQ,IAAI,QAAQ,KAAK,mBAAmB,OAAO,KAAK,CAAC,CAAC,EAC1D,QAAQ,IAAI,oBAAoB,KAAK,mBAAmB,OAAO,gBAAgB,CAAC,CAAC,EACjF,QAAQ,IAAI,SAAS,KAAK,mBAAmB,OAAO,MAAM,CAAC,CAAC;AAEjE,YAAM,iBAAiB,IAAI,IAAI,cAAc,cAAc;AAC3D,UAAI;AACJ,UAAI,eAAe;AACjB,sBAAc,cAAc;AAAA,MAC9B;AAEA,YAAM,yBAAyB,EAAE,QAAQ,UAAU,GAAG,aAAa,GAAG,QAAQ;AAC9E,YAAM,0BAA0B,CAAC;AACjC,YAAM,yBAAyB,CAAC;AAIhC,YAAM,sBAAsB,yBAAyB,aAAa;AAElE,sBAAgB,gBAAgB,sBAAsB;AACtD,UAAI,yBAAyB,eAAe,YAAY,UAAU,YAAY,UAAU,CAAC;AACzF,6BAAuB,UAAU;AAAA,QAC/B,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG,QAAQ;AAAA,MACb;AAEA,aAAO;AAAA,QACL,KAAK,aAAa,cAAc;AAAA,QAChC,SAAS;AAAA,MACX;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAaA,mBAAmB,OACjB,QACA,OACA,kBACA,QACA,MACA,SACA,UAA8B,CAAC,MACN;AAEzB,wBAAkB,qBAAqB,UAAU,MAAM;AAEvD,wBAAkB,qBAAqB,SAAS,KAAK;AAErD,wBAAkB,qBAAqB,oBAAoB,gBAAgB;AAC3E,YAAM,eAAe,yEAClB,QAAQ,IAAI,SAAS,KAAK,mBAAmB,OAAO,MAAM,CAAC,CAAC,EAC5D,QAAQ,IAAI,QAAQ,KAAK,mBAAmB,OAAO,KAAK,CAAC,CAAC,EAC1D,QAAQ,IAAI,oBAAoB,KAAK,mBAAmB,OAAO,gBAAgB,CAAC,CAAC;AAEpF,YAAM,iBAAiB,IAAI,IAAI,cAAc,cAAc;AAC3D,UAAI;AACJ,UAAI,eAAe;AACjB,sBAAc,cAAc;AAAA,MAC9B;AAEA,YAAM,yBAAyB,EAAE,QAAQ,OAAO,GAAG,aAAa,GAAG,QAAQ;AAC3E,YAAM,0BAA0B,CAAC;AACjC,YAAM,yBAAyB,CAAC;AAIhC,YAAM,sBAAsB,yBAAyB,aAAa;AAElE,UAAI,WAAW,QAAW;AACxB,+BAAuB,QAAQ,IAAI;AAAA,MACrC;AAEA,UAAI,SAAS,QAAW;AACtB,+BAAuB,MAAM,IAAI;AAAA,MACnC;AAEA,UAAI,YAAY,QAAW;AACzB,+BAAuB,UAAU,IAAI;AAAA,MACvC;AAEA,sBAAgB,gBAAgB,sBAAsB;AACtD,UAAI,yBAAyB,eAAe,YAAY,UAAU,YAAY,UAAU,CAAC;AACzF,6BAAuB,UAAU;AAAA,QAC/B,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG,QAAQ;AAAA,MACb;AAEA,aAAO;AAAA,QACL,KAAK,aAAa,cAAc;AAAA,QAChC,SAAS;AAAA,MACX;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAaA,mBAAmB,OACjB,QACA,OACA,kBACA,QACA,MACA,SACA,UAA8B,CAAC,MACN;AAEzB,wBAAkB,qBAAqB,UAAU,MAAM;AAEvD,wBAAkB,qBAAqB,SAAS,KAAK;AAErD,wBAAkB,qBAAqB,oBAAoB,gBAAgB;AAC3E,YAAM,eAAe,yEAClB,QAAQ,IAAI,SAAS,KAAK,mBAAmB,OAAO,MAAM,CAAC,CAAC,EAC5D,QAAQ,IAAI,QAAQ,KAAK,mBAAmB,OAAO,KAAK,CAAC,CAAC,EAC1D,QAAQ,IAAI,oBAAoB,KAAK,mBAAmB,OAAO,gBAAgB,CAAC,CAAC;AAEpF,YAAM,iBAAiB,IAAI,IAAI,cAAc,cAAc;AAC3D,UAAI;AACJ,UAAI,eAAe;AACjB,sBAAc,cAAc;AAAA,MAC9B;AAEA,YAAM,yBAAyB,EAAE,QAAQ,OAAO,GAAG,aAAa,GAAG,QAAQ;AAC3E,YAAM,0BAA0B,CAAC;AACjC,YAAM,yBAAyB,CAAC;AAIhC,YAAM,sBAAsB,yBAAyB,aAAa;AAElE,UAAI,WAAW,QAAW;AACxB,+BAAuB,QAAQ,IAAI;AAAA,MACrC;AAEA,UAAI,SAAS,QAAW;AACtB,+BAAuB,MAAM,IAAI;AAAA,MACnC;AAEA,UAAI,YAAY,QAAW;AACzB,+BAAuB,UAAU,IAAI;AAAA,MACvC;AAEA,sBAAgB,gBAAgB,sBAAsB;AACtD,UAAI,yBAAyB,eAAe,YAAY,UAAU,YAAY,UAAU,CAAC;AACzF,6BAAuB,UAAU;AAAA,QAC/B,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG,QAAQ;AAAA,MACb;AAEA,aAAO;AAAA,QACL,KAAK,aAAa,cAAc;AAAA,QAChC,SAAS;AAAA,MACX;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYA,8BAA8B,OAC5B,QACA,OACA,kBACA,QACA,wBACA,UAA8B,CAAC,MACN;AAEzB,wBAAkB,gCAAgC,UAAU,MAAM;AAElE,wBAAkB,gCAAgC,SAAS,KAAK;AAEhE,wBAAkB,gCAAgC,oBAAoB,gBAAgB;AAEtF,wBAAkB,gCAAgC,UAAU,MAAM;AAElE;AAAA,QACE;AAAA,QACA;AAAA,QACA;AAAA,MACF;AACA,YAAM,eACJ,yFACG,QAAQ,IAAI,SAAS,KAAK,mBAAmB,OAAO,MAAM,CAAC,CAAC,EAC5D,QAAQ,IAAI,QAAQ,KAAK,mBAAmB,OAAO,KAAK,CAAC,CAAC,EAC1D,QAAQ,IAAI,oBAAoB,KAAK,mBAAmB,OAAO,gBAAgB,CAAC,CAAC,EACjF,QAAQ,IAAI,SAAS,KAAK,mBAAmB,OAAO,MAAM,CAAC,CAAC;AAEjE,YAAM,iBAAiB,IAAI,IAAI,cAAc,cAAc;AAC3D,UAAI;AACJ,UAAI,eAAe;AACjB,sBAAc,cAAc;AAAA,MAC9B;AAEA,YAAM,yBAAyB,EAAE,QAAQ,UAAU,GAAG,aAAa,GAAG,QAAQ;AAC9E,YAAM,0BAA0B,CAAC;AACjC,YAAM,yBAAyB,CAAC;AAIhC,YAAM,sBAAsB,yBAAyB,aAAa;AAElE,8BAAwB,cAAc,IAAI;AAE1C,sBAAgB,gBAAgB,sBAAsB;AACtD,UAAI,yBAAyB,eAAe,YAAY,UAAU,YAAY,UAAU,CAAC;AACzF,6BAAuB,UAAU;AAAA,QAC/B,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG,QAAQ;AAAA,MACb;AACA,6BAAuB,OAAO;AAAA,QAC5B;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAEA,aAAO;AAAA,QACL,KAAK,aAAa,cAAc;AAAA,QAChC,SAAS;AAAA,MACX;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUA,iBAAiB,OACf,kBACA,QACA,OACA,UAA8B,CAAC,MACN;AAEzB,wBAAkB,mBAAmB,oBAAoB,gBAAgB;AAEzE,wBAAkB,mBAAmB,UAAU,MAAM;AAErD,wBAAkB,mBAAmB,SAAS,KAAK;AACnD,YAAM,eAAe,0EAClB,QAAQ,IAAI,oBAAoB,KAAK,mBAAmB,OAAO,gBAAgB,CAAC,CAAC,EACjF,QAAQ,IAAI,SAAS,KAAK,mBAAmB,OAAO,MAAM,CAAC,CAAC,EAC5D,QAAQ,IAAI,QAAQ,KAAK,mBAAmB,OAAO,KAAK,CAAC,CAAC;AAE7D,YAAM,iBAAiB,IAAI,IAAI,cAAc,cAAc;AAC3D,UAAI;AACJ,UAAI,eAAe;AACjB,sBAAc,cAAc;AAAA,MAC9B;AAEA,YAAM,yBAAyB,EAAE,QAAQ,QAAQ,GAAG,aAAa,GAAG,QAAQ;AAC5E,YAAM,0BAA0B,CAAC;AACjC,YAAM,yBAAyB,CAAC;AAIhC,YAAM,sBAAsB,yBAAyB,aAAa;AAElE,sBAAgB,gBAAgB,sBAAsB;AACtD,UAAI,yBAAyB,eAAe,YAAY,UAAU,YAAY,UAAU,CAAC;AACzF,6BAAuB,UAAU;AAAA,QAC/B,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG,QAAQ;AAAA,MACb;AAEA,aAAO;AAAA,QACL,KAAK,aAAa,cAAc;AAAA,QAChC,SAAS;AAAA,MACX;AAAA,IACF;AAAA,EACF;AACF;AAMO,IAAM,yBAAyB,SAAU,eAA+B;AAC7E,QAAM,4BAA4B,sCAAsC,aAAa;AACrF,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYL,MAAM,yBACJ,QACA,OACA,kBACA,QACA,wBACA,SACyF;AACzF,YAAM,oBAAoB,MAAM,0BAA0B;AAAA,QACxD;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AACA,aAAO,sBAAsB,mBAAmB,cAAAC,SAAa,WAAW,aAAa;AAAA,IACvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWA,MAAM,mBACJ,QACA,OACA,kBACA,oBACA,SAC+E;AAC/E,YAAM,oBAAoB,MAAM,0BAA0B;AAAA,QACxD;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AACA,aAAO,sBAAsB,mBAAmB,cAAAA,SAAa,WAAW,aAAa;AAAA,IACvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWA,MAAM,mBACJ,QACA,OACA,kBACA,QACA,SAC2E;AAC3E,YAAM,oBAAoB,MAAM,0BAA0B;AAAA,QACxD;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AACA,aAAO,sBAAsB,mBAAmB,cAAAA,SAAa,WAAW,aAAa;AAAA,IACvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAaA,MAAM,kBACJ,QACA,OACA,kBACA,QACA,MACA,SACA,SAGA;AACA,YAAM,oBAAoB,MAAM,0BAA0B;AAAA,QACxD;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AACA,aAAO,sBAAsB,mBAAmB,cAAAA,SAAa,WAAW,aAAa;AAAA,IACvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAaA,MAAM,kBACJ,QACA,OACA,kBACA,QACA,MACA,SACA,SAGA;AACA,YAAM,oBAAoB,MAAM,0BAA0B;AAAA,QACxD;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AACA,aAAO,sBAAsB,mBAAmB,cAAAA,SAAa,WAAW,aAAa;AAAA,IACvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYA,MAAM,6BACJ,QACA,OACA,kBACA,QACA,wBACA,SAC2E;AAC3E,YAAM,oBAAoB,MAAM,0BAA0B;AAAA,QACxD;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AACA,aAAO,sBAAsB,mBAAmB,cAAAA,SAAa,WAAW,aAAa;AAAA,IACvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUA,MAAM,gBACJ,kBACA,QACA,OACA,SAC2E;AAC3E,YAAM,oBAAoB,MAAM,0BAA0B;AAAA,QACxD;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AACA,aAAO,sBAAsB,mBAAmB,cAAAA,SAAa,WAAW,aAAa;AAAA,IACvF;AAAA,EACF;AACF;AAMO,IAAM,8BAA8B,SACzC,eACA,UACA,OACA;AACA,QAAM,aAAa,uBAAuB,aAAa;AACvD,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYL,yBACE,QACA,OACA,kBACA,QACA,wBACA,SACkC;AAClC,aAAO,WACJ;AAAA,QACC;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF,EACC,KAAK,CAAC,YAAY,QAAQ,OAAO,QAAQ,CAAC;AAAA,IAC/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWA,mBACE,QACA,OACA,kBACA,oBACA,SACwB;AACxB,aAAO,WACJ,mBAAmB,QAAQ,OAAO,kBAAkB,oBAAoB,OAAO,EAC/E,KAAK,CAAC,YAAY,QAAQ,OAAO,QAAQ,CAAC;AAAA,IAC/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWA,mBACE,QACA,OACA,kBACA,QACA,SACoB;AACpB,aAAO,WACJ,mBAAmB,QAAQ,OAAO,kBAAkB,QAAQ,OAAO,EACnE,KAAK,CAAC,YAAY,QAAQ,OAAO,QAAQ,CAAC;AAAA,IAC/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAaA,kBACE,QACA,OACA,kBACA,QACA,MACA,SACA,SACuC;AACvC,aAAO,WACJ,kBAAkB,QAAQ,OAAO,kBAAkB,QAAQ,MAAM,SAAS,OAAO,EACjF,KAAK,CAAC,YAAY,QAAQ,OAAO,QAAQ,CAAC;AAAA,IAC/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAaA,kBACE,QACA,OACA,kBACA,QACA,MACA,SACA,SACuC;AACvC,aAAO,WACJ,kBAAkB,QAAQ,OAAO,kBAAkB,QAAQ,MAAM,SAAS,OAAO,EACjF,KAAK,CAAC,YAAY,QAAQ,OAAO,QAAQ,CAAC;AAAA,IAC/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYA,6BACE,QACA,OACA,kBACA,QACA,wBACA,SACoB;AACpB,aAAO,WACJ;AAAA,QACC;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF,EACC,KAAK,CAAC,YAAY,QAAQ,OAAO,QAAQ,CAAC;AAAA,IAC/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUA,gBACE,kBACA,QACA,OACA,SACoB;AACpB,aAAO,WACJ,gBAAgB,kBAAkB,QAAQ,OAAO,OAAO,EACxD,KAAK,CAAC,YAAY,QAAQ,OAAO,QAAQ,CAAC;AAAA,IAC/C;AAAA,EACF;AACF;AAgSO,IAAM,uBAAN,cAAmC,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASzC,yBACL,mBACA,SACA;AACA,WAAO,uBAAuB,KAAK,aAAa,EAC7C;AAAA,MACC,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB;AAAA,IACF,EACC,KAAK,CAAC,YAAY,QAAQ,KAAK,OAAO,KAAK,QAAQ,CAAC;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUO,mBACL,mBACA,SACA;AACA,WAAO,uBAAuB,KAAK,aAAa,EAC7C;AAAA,MACC,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB;AAAA,IACF,EACC,KAAK,CAAC,YAAY,QAAQ,KAAK,OAAO,KAAK,QAAQ,CAAC;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUO,mBACL,mBACA,SACA;AACA,WAAO,uBAAuB,KAAK,aAAa,EAC7C;AAAA,MACC,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB;AAAA,IACF,EACC,KAAK,CAAC,YAAY,QAAQ,KAAK,OAAO,KAAK,QAAQ,CAAC;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUO,kBACL,mBACA,SACA;AACA,WAAO,uBAAuB,KAAK,aAAa,EAC7C;AAAA,MACC,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB;AAAA,IACF,EACC,KAAK,CAAC,YAAY,QAAQ,KAAK,OAAO,KAAK,QAAQ,CAAC;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUO,kBACL,mBACA,SACA;AACA,WAAO,uBAAuB,KAAK,aAAa,EAC7C;AAAA,MACC,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB;AAAA,IACF,EACC,KAAK,CAAC,YAAY,QAAQ,KAAK,OAAO,KAAK,QAAQ,CAAC;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUO,6BACL,mBACA,SACA;AACA,WAAO,uBAAuB,KAAK,aAAa,EAC7C;AAAA,MACC,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB;AAAA,IACF,EACC,KAAK,CAAC,YAAY,QAAQ,KAAK,OAAO,KAAK,QAAQ,CAAC;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUO,gBACL,mBACA,SACA;AACA,WAAO,uBAAuB,KAAK,aAAa,EAC7C;AAAA,MACC,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB;AAAA,IACF,EACC,KAAK,CAAC,YAAY,QAAQ,KAAK,OAAO,KAAK,QAAQ,CAAC;AAAA,EACzD;AACF;","names":["import_axios","globalAxios","globalAxios","BASE_PATH","globalAxios"]}