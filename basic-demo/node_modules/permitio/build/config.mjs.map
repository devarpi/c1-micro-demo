{"version":3,"sources":["../src/config.ts","../src/api/context.ts"],"sourcesContent":["import globalAxios, { AxiosInstance } from 'axios';\nimport _ from 'lodash';\n\nimport { ApiContext } from './api/context';\nimport { RecursivePartial } from './utils/types';\n\nexport type FactsSyncTimeoutPolicy = 'ignore' | 'fail';\n\ninterface ILoggerConfig {\n  /**\n   * Sets the log level configured for the Permit SDK Logger.\n   */\n  level: string;\n\n  /**\n   * Sets the label configured for logs emitted by the Permit SDK Logger.\n   */\n  label: string;\n\n  /**\n   * Sets whether the SDK log output should be in JSON format.\n   */\n  json: boolean;\n}\n\ninterface IMultiTenancyConfig {\n  /**\n   * the key of the default tenant to be used if {@link useDefaultTenantIfEmpty} is set.\n   */\n  defaultTenant: string;\n\n  /**\n   * whether or not the SDK should automatically associate a resource with the {@link defaultTenant}\n   * if the resource provided in permit.check() was not associated with a tenant (i.e: undefined tenant).\n   */\n  useDefaultTenantIfEmpty: boolean;\n}\n\nexport interface IPermitConfig {\n  /**\n   * The token (API Key) used for authorization against the PDP and the Permit REST API.\n   */\n  token: string;\n\n  /**\n   * Configures the Policy Decision Point (PDP) address.\n   */\n  pdp: string;\n\n  /**\n   * Configures the URL of the Permit REST API.\n   */\n  apiUrl: string;\n\n  /**\n   * the logger configuration used by the SDK, @see {@link ILoggerConfig}\n   */\n  log: ILoggerConfig;\n\n  /**\n   * @see: {@link IMultiTenancyConfig}\n   */\n  multiTenancy: IMultiTenancyConfig;\n\n  /**\n   * specifies the number of milliseconds before a permit.check() request times out.\n   * If the request takes longer than `timeout`, the request will be aborted.\n   */\n  timeout: number | undefined;\n\n  /**\n   * whether or not permit.check() will throw on error, or return a default denied decision.\n   */\n  throwOnError: boolean | undefined;\n\n  /**\n   * represents the current API key authorization level.\n   * @see {@link ApiContext}\n   */\n  apiContext: ApiContext;\n\n  /**\n   * an optional custom axios instance, to control the behavior of the HTTP client\n   * used to connect to the Permit REST API.\n   *\n   * @see https://axios-http.com/docs/instance\n   * @see https://axios-http.com/docs/req_config\n   */\n  axiosInstance: AxiosInstance;\n  /**\n   * Create facts via the PDP API instead of using the default Permit REST API.\n   */\n  proxyFactsViaPdp: boolean;\n  /**\n   * The amount of time in seconds to wait for facts to be available\n   * in the PDP cache before returning the response.\n   */\n  factsSyncTimeout: number | null;\n  /**\n   * Controls what happens when the facts synchronization timeout is reached during proxy requests to the PDP.\n   * - 'ignore': Respond immediately when data update did not apply within the timeout period\n   * - 'fail': Respond with 424 status code when data update did not apply within the timeout period\n   */\n  factsSyncTimeoutPolicy: FactsSyncTimeoutPolicy | null;\n  /**\n   * an optional custom axios instance for opa, to control the behavior of the HTTP client\n   * used to connect to the Permit REST API.\n   *\n   * @see https://axios-http.com/docs/instance\n   * @see https://axios-http.com/docs/req_config\n   */\n  opaAxiosInstance?: AxiosInstance;\n}\n\n/**\n * A factory class for the Permit SDK configuration\n */\nexport class ConfigFactory {\n  /**\n   * @returns the default SDK configuration\n   */\n  static defaults(): IPermitConfig {\n    return {\n      token: _.get(process.env, 'PERMIT_API_KEY', ''),\n      pdp: _.get(process.env, 'PERMIT_PDP_URL', 'http://localhost:7766'),\n      apiUrl: _.get(process.env, 'PERMIT_API_URL', 'https://api.permit.io'),\n      log: {\n        // log level, default is warn (warnings and errors)\n        level: _.get(process.env, 'PERMIT_LOG_LEVEL', 'warn'),\n        // Label added to logs\n        label: _.get(process.env, 'PERMIT_LOG_LABEL', 'Permit.io'),\n        // When logging - dump full data to console as JSON\n        json: JSON.parse(_.get(process.env, 'PERMIT_LOG_JSON', 'false')),\n      },\n      multiTenancy: {\n        defaultTenant: 'default',\n        useDefaultTenantIfEmpty: true,\n      },\n      timeout: undefined,\n      throwOnError: true,\n      apiContext: new ApiContext(),\n      axiosInstance: globalAxios.create(),\n      proxyFactsViaPdp: false,\n      factsSyncTimeout: null,\n      factsSyncTimeoutPolicy: null,\n    };\n  }\n\n  /**\n   * Builds the Permit SDK configuration from the values provided by the SDK user\n   * and from the default SDK configuration when no specific values are set.\n   *\n   * @param options - a partial configuration\n   * @returns the SDK configuration (for unset values returns the default config)\n   */\n  static build(options: RecursivePartial<IPermitConfig>): IPermitConfig {\n    const config = _.merge(_.assign({}, ConfigFactory.defaults()), options);\n    return config;\n  }\n}\n","/**\n * The `ApiKeyLevel` enum represents the access level of a Permit API Key.\n */\nexport enum ApiKeyLevel {\n  /**\n   * Wait for initialization of the API key.\n   */\n  WAIT_FOR_INIT = 'WAIT_FOR_INIT',\n\n  /**\n   * Organization level API key authorization.\n   * Using an API key of this scope will allow the SDK user to modify\n   * all projects and environments under the organization / workspace.\n   */\n  ORGANIZATION_LEVEL_API_KEY = 'ORGANIZATION_LEVEL_API_KEY',\n\n  /**\n   * Project level API key authorization.\n   * Using an API key of this scope will allow the SDK user to modify\n   * a single project and the environments under that project.\n   */\n  PROJECT_LEVEL_API_KEY = 'PROJECT_LEVEL_API_KEY',\n\n  /**\n   * Environment level API key authorization.\n   * Using an API key of this scope will allow the SDK user to modify\n   * a single Permit environment.\n   */\n  ENVIRONMENT_LEVEL_API_KEY = 'ENVIRONMENT_LEVEL_API_KEY',\n}\n\nexport const API_ACCESS_LEVELS: ApiKeyLevel[] = [\n  ApiKeyLevel.ORGANIZATION_LEVEL_API_KEY,\n  ApiKeyLevel.PROJECT_LEVEL_API_KEY,\n  ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY,\n];\n\nexport enum ApiContextLevel {\n  /**\n   * Signifies that the context is not set yet.\n   */\n  WAIT_FOR_INIT = 0,\n\n  /**\n   * When running in this context level, the SDK knows the current organization.\n   */\n  ORGANIZATION = 1,\n\n  /**\n   * When running in this context level, the SDK knows the current organization and project.\n   */\n  PROJECT = 2,\n\n  /**\n   * When running in this context level, the SDK knows the current organization, project and environment.\n   */\n  ENVIRONMENT = 3,\n}\n\n/**\n * The `PermitContextError` class represents an error that occurs when an API method\n * is called with insufficient context (not knowing in what environment, project or\n * organization the API call is being made).\n * Some of the input for the API method is provided via the SDK context.\n * If the context is missing some data required for a method - the API call will fail.\n */\nexport class PermitContextError extends Error {\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * The `PermitContextChangeError` will be thrown when the user is trying to set the\n * SDK context to an object that the current API Key cannot access (and if allowed,\n * such API calls will result in 401). Instead, the SDK throws this exception.\n */\nexport class PermitContextChangeError extends Error {\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * The `ApiContext` class represents the required known context for an API method.\n * Since the Permit API hierarchy is deeply nested, it is less convenient to specify\n * the full object hierarchy in every request.\n * For example, in order to list roles, the user needs to specify the (id or key) of the:\n * - the org\n * - the project\n * - then environment\n * in which the roles are located under.\n * Instead, the SDK can \"remember\" the current context and \"auto-complete\" the details\n * from that context.\n * We then get this kind of experience:\n * ```\n * await permit.api.roles.list()\n * ```\n * We can only run this function if the current context already knows the org, project,\n * and environments that we want to run under, and that is why this method assumes\n * we are running under a `ApiContextLevel.ENVIRONMENT` context.\n */\nexport class ApiContext {\n  private _level: ApiKeyLevel;\n  // org, project and environment the API Key is allowed to access\n  private _permittedOrganization: string | null;\n  private _permittedProject: string | null;\n  private _permittedEnvironment: string | null;\n\n  // current known context\n  private _contextLevel: ApiContextLevel;\n  private _organization: string | null;\n  private _project: string | null;\n  private _environment: string | null;\n\n  constructor() {\n    this._level = ApiKeyLevel.WAIT_FOR_INIT;\n    this._permittedOrganization = null;\n    this._permittedProject = null;\n    this._permittedEnvironment = null;\n\n    this._contextLevel = ApiContextLevel.WAIT_FOR_INIT;\n    this._organization = null;\n    this._project = null;\n    this._environment = null;\n  }\n\n  /**\n   * Do not call this method directly!\n   */\n  public _saveApiKeyAccessibleScope(org: string, project?: string, environment?: string): void {\n    this._permittedOrganization = org; // cannot be null\n\n    if (project && environment) {\n      this._permittedProject = project;\n      this._permittedEnvironment = environment;\n      this._level = ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY;\n    } else if (project) {\n      this._permittedProject = project;\n      this._permittedEnvironment = null;\n      this._level = ApiKeyLevel.PROJECT_LEVEL_API_KEY;\n    } else {\n      this._permittedProject = null;\n      this._permittedEnvironment = null;\n      this._level = ApiKeyLevel.ORGANIZATION_LEVEL_API_KEY;\n    }\n  }\n\n  /**\n   * Get the current API key access level.\n   */\n  public get permittedAccessLevel(): ApiKeyLevel {\n    return this._level;\n  }\n\n  /**\n   * Get the current API key level.\n   * @deprecated replaced with permit.config.apiContext.permittedAccessLevel\n   */\n  public get level(): ApiKeyLevel {\n    return this._level;\n  }\n\n  /**\n   * Get the current SDK context level.\n   */\n  public get contextLevel(): ApiContextLevel {\n    return this._contextLevel;\n  }\n\n  /**\n   * Get the current organization in the context.\n   */\n  public get organization(): string | null {\n    return this._organization;\n  }\n\n  /**\n   * Get the current project in the context.\n   */\n  public get project(): string | null {\n    return this._project;\n  }\n\n  /**\n   * Get the current environment in the context.\n   */\n  public get environment(): string | null {\n    return this._environment;\n  }\n\n  private verifyCanAccessOrg(org: string): void {\n    if (org !== this._permittedOrganization) {\n      throw new PermitContextChangeError(\n        `You cannot set an SDK context with org '${org}' due to insufficient API Key permissions`,\n      );\n    }\n  }\n\n  private verifyCanAccessProject(org: string, project: string): void {\n    this.verifyCanAccessOrg(org);\n    if (this._permittedProject !== null && project !== this._permittedProject) {\n      throw new PermitContextChangeError(\n        `You cannot set an SDK context with project '${project}' due to insufficient API Key permissions`,\n      );\n    }\n  }\n\n  private verifyCanAccessEnvironment(org: string, project: string, environment: string): void {\n    this.verifyCanAccessProject(org, project);\n    if (this._permittedEnvironment !== null && environment !== this._permittedEnvironment) {\n      throw new PermitContextChangeError(\n        `You cannot set an SDK context with environment '${environment}' due to insufficient API Key permissions`,\n      );\n    }\n  }\n\n  /**\n   * Set the context to organization level.\n   * @param org The organization key.\n   */\n  public setOrganizationLevelContext(org: string) {\n    this.verifyCanAccessOrg(org);\n    this._contextLevel = ApiContextLevel.ORGANIZATION;\n    this._organization = org;\n    this._project = null;\n    this._environment = null;\n  }\n\n  /**\n   * Set the context to project level.\n   * @param org The organization key.\n   * @param project The project key.\n   */\n  public setProjectLevelContext(org: string, project: string) {\n    this.verifyCanAccessProject(org, project);\n    this._contextLevel = ApiContextLevel.PROJECT;\n    this._organization = org;\n    this._project = project;\n    this._environment = null;\n  }\n\n  /**\n   * Set the context to environment level.\n   * @param org The organization key.\n   * @param project The project key.\n   * @param environment The environment key.\n   */\n  public setEnvironmentLevelContext(org: string, project: string, environment: string) {\n    this.verifyCanAccessEnvironment(org, project, environment);\n    this._contextLevel = ApiContextLevel.ENVIRONMENT;\n    this._organization = org;\n    this._project = project;\n    this._environment = environment;\n  }\n\n  /**\n   * Get the API project and environment parameters from an environment-level context.\n   * @returns An object containing the project and environment IDs.\n   * @throws {@link PermitContextError} If the API context is not set to environment level or the project or environment is null.\n   */\n  public get environmentContext(): { projId: string; envId: string } {\n    if (\n      this._contextLevel !== ApiContextLevel.ENVIRONMENT ||\n      this._project === null ||\n      this._environment === null\n    ) {\n      throw new PermitContextError(\n        `You cannot get environment context, current api context is: ${\n          ApiContextLevel[this._contextLevel]\n        }`,\n      );\n    }\n    return {\n      projId: this._project,\n      envId: this._environment,\n    };\n  }\n}\n"],"mappings":"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","names":["ApiContextLevel"]}