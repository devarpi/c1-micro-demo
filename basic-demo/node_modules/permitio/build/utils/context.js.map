{"version":3,"sources":["../../src/utils/context.ts"],"sourcesContent":["export interface Context {\n  [id: string]: any;\n}\n\nexport interface CheckConfig {\n  useOpa?: boolean;\n  timeout?: number;\n  throwOnError?: boolean;\n}\n\nexport interface ContextTransform {\n  (context: Context): Context;\n}\n\n/**\n * Store for contexted passed as part of check() queries\n */\nexport class ContextStore {\n  private baseContext: Context = {}; // cross-query context (global context)\n  private transforms: ContextTransform[] = [];\n\n  /**\n   * add context to the base context\n   */\n  public add(context: Context): void {\n    this.baseContext = Object.assign(this.baseContext, context);\n  }\n\n  public registerTransform(transform: ContextTransform): void {\n    this.transforms.push(transform);\n  }\n\n  /**\n   * merges the global context (this.context) with the context\n   * provided for this specific query (context). the specific\n   * context overrides the base (global) context.\n   */\n  public getDerivedContext(context: Context): Context {\n    return Object.assign({}, this.baseContext, context);\n  }\n\n  public transform(initialContext: Context): Context {\n    let context = { ...initialContext };\n    for (const transform of this.transforms) {\n      context = transform(context);\n    }\n    return context;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBO,IAAM,eAAN,MAAmB;AAAA,EAAnB;AACL,SAAQ,cAAuB,CAAC;AAChC;AAAA,SAAQ,aAAiC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,EAKnC,IAAI,SAAwB;AACjC,SAAK,cAAc,OAAO,OAAO,KAAK,aAAa,OAAO;AAAA,EAC5D;AAAA,EAEO,kBAAkB,WAAmC;AAC1D,SAAK,WAAW,KAAK,SAAS;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,kBAAkB,SAA2B;AAClD,WAAO,OAAO,OAAO,CAAC,GAAG,KAAK,aAAa,OAAO;AAAA,EACpD;AAAA,EAEO,UAAU,gBAAkC;AACjD,QAAI,UAAU,EAAE,GAAG,eAAe;AAClC,eAAW,aAAa,KAAK,YAAY;AACvC,gBAAU,UAAU,OAAO;AAAA,IAC7B;AACA,WAAO;AAAA,EACT;AACF;","names":[]}