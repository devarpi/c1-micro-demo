"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/utils/context.ts
var context_exports = {};
__export(context_exports, {
  ContextStore: () => ContextStore
});
module.exports = __toCommonJS(context_exports);
var ContextStore = class {
  constructor() {
    this.baseContext = {};
    // cross-query context (global context)
    this.transforms = [];
  }
  /**
   * add context to the base context
   */
  add(context) {
    this.baseContext = Object.assign(this.baseContext, context);
  }
  registerTransform(transform) {
    this.transforms.push(transform);
  }
  /**
   * merges the global context (this.context) with the context
   * provided for this specific query (context). the specific
   * context overrides the base (global) context.
   */
  getDerivedContext(context) {
    return Object.assign({}, this.baseContext, context);
  }
  transform(initialContext) {
    let context = { ...initialContext };
    for (const transform of this.transforms) {
      context = transform(context);
    }
    return context;
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ContextStore
});
//# sourceMappingURL=context.js.map