// src/utils/context.ts
var ContextStore = class {
  constructor() {
    this.baseContext = {};
    // cross-query context (global context)
    this.transforms = [];
  }
  /**
   * add context to the base context
   */
  add(context) {
    this.baseContext = Object.assign(this.baseContext, context);
  }
  registerTransform(transform) {
    this.transforms.push(transform);
  }
  /**
   * merges the global context (this.context) with the context
   * provided for this specific query (context). the specific
   * context overrides the base (global) context.
   */
  getDerivedContext(context) {
    return Object.assign({}, this.baseContext, context);
  }
  transform(initialContext) {
    let context = { ...initialContext };
    for (const transform of this.transforms) {
      context = transform(context);
    }
    return context;
  }
};
export {
  ContextStore
};
//# sourceMappingURL=context.mjs.map