// src/utils/http-logger.ts
var AxiosLoggingInterceptor = class {
  static setupInterceptor(axiosInstance, logger) {
    axiosInstance.interceptors.request.use(
      function(request) {
        var _a;
        request.headers = request.headers || {};
        logger.debug(`Sending HTTP request: ${(_a = request == null ? void 0 : request.method) == null ? void 0 : _a.toUpperCase()} ${request == null ? void 0 : request.url}`);
        return request;
      },
      function(error) {
        return Promise.reject(error);
      }
    );
    axiosInstance.interceptors.response.use(
      function(response) {
        var _a, _b, _c;
        logger.debug(
          `Received HTTP response: ${(_b = (_a = response == null ? void 0 : response.config) == null ? void 0 : _a.method) == null ? void 0 : _b.toUpperCase()} ${(_c = response == null ? void 0 : response.config) == null ? void 0 : _c.url}, status: ${response == null ? void 0 : response.status}`
        );
        return response;
      },
      function(error) {
        return Promise.reject(error);
      }
    );
  }
};
export {
  AxiosLoggingInterceptor
};
//# sourceMappingURL=http-logger.mjs.map