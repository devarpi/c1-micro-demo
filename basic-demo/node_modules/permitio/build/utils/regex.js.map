{"version":3,"sources":["../../src/utils/regex.ts"],"sourcesContent":["export function escapeRegex(s: string): string {\n  return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n}\n\nfunction makeRegexGlobal(re: RegExp): RegExp {\n  if (re.global) {\n    return re;\n  }\n\n  let flags = 'g';\n  flags += re.ignoreCase ? 'i' : '';\n  flags += re.multiline ? 'm' : '';\n\n  return new RegExp(re.source, flags);\n}\n\nexport interface RegexMatch {\n  start: number; // index of match first letter\n  end: number; // index of match last letter\n  length: number; // length of matched string\n  groups: string[];\n}\n\n/**\n * RegExp: Get all matches and capturing groups\n * @param {RegExp} re\n * @param {String} str\n * @returns {Array<Array<String>>}\n */\nexport function matchAll(re: RegExp, str: string): RegexMatch[] {\n  const matches = [];\n\n  const regex = makeRegexGlobal(re);\n\n  let groups;\n  while ((groups = regex.exec(str)) !== null) {\n    const found = Array.from(groups);\n    const length = found[0].length;\n    matches.push({\n      start: groups.index,\n      end: groups.index + length - 1,\n      length: length,\n      groups: found,\n    });\n  }\n\n  return matches;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAO,SAAS,YAAY,GAAmB;AAC7C,SAAO,EAAE,QAAQ,0BAA0B,MAAM;AACnD;AAEA,SAAS,gBAAgB,IAAoB;AAC3C,MAAI,GAAG,QAAQ;AACb,WAAO;AAAA,EACT;AAEA,MAAI,QAAQ;AACZ,WAAS,GAAG,aAAa,MAAM;AAC/B,WAAS,GAAG,YAAY,MAAM;AAE9B,SAAO,IAAI,OAAO,GAAG,QAAQ,KAAK;AACpC;AAeO,SAAS,SAAS,IAAY,KAA2B;AAC9D,QAAM,UAAU,CAAC;AAEjB,QAAM,QAAQ,gBAAgB,EAAE;AAEhC,MAAI;AACJ,UAAQ,SAAS,MAAM,KAAK,GAAG,OAAO,MAAM;AAC1C,UAAM,QAAQ,MAAM,KAAK,MAAM;AAC/B,UAAM,SAAS,MAAM,CAAC,EAAE;AACxB,YAAQ,KAAK;AAAA,MACX,OAAO,OAAO;AAAA,MACd,KAAK,OAAO,QAAQ,SAAS;AAAA,MAC7B;AAAA,MACA,QAAQ;AAAA,IACV,CAAC;AAAA,EACH;AAEA,SAAO;AACT;","names":[]}