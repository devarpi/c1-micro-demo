// src/config.ts
import globalAxios from "axios";
import _ from "lodash";

// src/api/context.ts
var ApiContextLevel = /* @__PURE__ */ ((ApiContextLevel2) => {
  ApiContextLevel2[ApiContextLevel2["WAIT_FOR_INIT"] = 0] = "WAIT_FOR_INIT";
  ApiContextLevel2[ApiContextLevel2["ORGANIZATION"] = 1] = "ORGANIZATION";
  ApiContextLevel2[ApiContextLevel2["PROJECT"] = 2] = "PROJECT";
  ApiContextLevel2[ApiContextLevel2["ENVIRONMENT"] = 3] = "ENVIRONMENT";
  return ApiContextLevel2;
})(ApiContextLevel || {});
var PermitContextError = class extends Error {
  constructor(message) {
    super(message);
  }
};
var PermitContextChangeError = class extends Error {
  constructor(message) {
    super(message);
  }
};
var ApiContext = class {
  constructor() {
    this._level = "WAIT_FOR_INIT" /* WAIT_FOR_INIT */;
    this._permittedOrganization = null;
    this._permittedProject = null;
    this._permittedEnvironment = null;
    this._contextLevel = 0 /* WAIT_FOR_INIT */;
    this._organization = null;
    this._project = null;
    this._environment = null;
  }
  /**
   * Do not call this method directly!
   */
  _saveApiKeyAccessibleScope(org, project, environment) {
    this._permittedOrganization = org;
    if (project && environment) {
      this._permittedProject = project;
      this._permittedEnvironment = environment;
      this._level = "ENVIRONMENT_LEVEL_API_KEY" /* ENVIRONMENT_LEVEL_API_KEY */;
    } else if (project) {
      this._permittedProject = project;
      this._permittedEnvironment = null;
      this._level = "PROJECT_LEVEL_API_KEY" /* PROJECT_LEVEL_API_KEY */;
    } else {
      this._permittedProject = null;
      this._permittedEnvironment = null;
      this._level = "ORGANIZATION_LEVEL_API_KEY" /* ORGANIZATION_LEVEL_API_KEY */;
    }
  }
  /**
   * Get the current API key access level.
   */
  get permittedAccessLevel() {
    return this._level;
  }
  /**
   * Get the current API key level.
   * @deprecated replaced with permit.config.apiContext.permittedAccessLevel
   */
  get level() {
    return this._level;
  }
  /**
   * Get the current SDK context level.
   */
  get contextLevel() {
    return this._contextLevel;
  }
  /**
   * Get the current organization in the context.
   */
  get organization() {
    return this._organization;
  }
  /**
   * Get the current project in the context.
   */
  get project() {
    return this._project;
  }
  /**
   * Get the current environment in the context.
   */
  get environment() {
    return this._environment;
  }
  verifyCanAccessOrg(org) {
    if (org !== this._permittedOrganization) {
      throw new PermitContextChangeError(
        `You cannot set an SDK context with org '${org}' due to insufficient API Key permissions`
      );
    }
  }
  verifyCanAccessProject(org, project) {
    this.verifyCanAccessOrg(org);
    if (this._permittedProject !== null && project !== this._permittedProject) {
      throw new PermitContextChangeError(
        `You cannot set an SDK context with project '${project}' due to insufficient API Key permissions`
      );
    }
  }
  verifyCanAccessEnvironment(org, project, environment) {
    this.verifyCanAccessProject(org, project);
    if (this._permittedEnvironment !== null && environment !== this._permittedEnvironment) {
      throw new PermitContextChangeError(
        `You cannot set an SDK context with environment '${environment}' due to insufficient API Key permissions`
      );
    }
  }
  /**
   * Set the context to organization level.
   * @param org The organization key.
   */
  setOrganizationLevelContext(org) {
    this.verifyCanAccessOrg(org);
    this._contextLevel = 1 /* ORGANIZATION */;
    this._organization = org;
    this._project = null;
    this._environment = null;
  }
  /**
   * Set the context to project level.
   * @param org The organization key.
   * @param project The project key.
   */
  setProjectLevelContext(org, project) {
    this.verifyCanAccessProject(org, project);
    this._contextLevel = 2 /* PROJECT */;
    this._organization = org;
    this._project = project;
    this._environment = null;
  }
  /**
   * Set the context to environment level.
   * @param org The organization key.
   * @param project The project key.
   * @param environment The environment key.
   */
  setEnvironmentLevelContext(org, project, environment) {
    this.verifyCanAccessEnvironment(org, project, environment);
    this._contextLevel = 3 /* ENVIRONMENT */;
    this._organization = org;
    this._project = project;
    this._environment = environment;
  }
  /**
   * Get the API project and environment parameters from an environment-level context.
   * @returns An object containing the project and environment IDs.
   * @throws {@link PermitContextError} If the API context is not set to environment level or the project or environment is null.
   */
  get environmentContext() {
    if (this._contextLevel !== 3 /* ENVIRONMENT */ || this._project === null || this._environment === null) {
      throw new PermitContextError(
        `You cannot get environment context, current api context is: ${ApiContextLevel[this._contextLevel]}`
      );
    }
    return {
      projId: this._project,
      envId: this._environment
    };
  }
};

// src/config.ts
var ConfigFactory = class _ConfigFactory {
  /**
   * @returns the default SDK configuration
   */
  static defaults() {
    return {
      token: _.get(process.env, "PERMIT_API_KEY", ""),
      pdp: _.get(process.env, "PERMIT_PDP_URL", "http://localhost:7766"),
      apiUrl: _.get(process.env, "PERMIT_API_URL", "https://api.permit.io"),
      log: {
        // log level, default is warn (warnings and errors)
        level: _.get(process.env, "PERMIT_LOG_LEVEL", "warn"),
        // Label added to logs
        label: _.get(process.env, "PERMIT_LOG_LABEL", "Permit.io"),
        // When logging - dump full data to console as JSON
        json: JSON.parse(_.get(process.env, "PERMIT_LOG_JSON", "false"))
      },
      multiTenancy: {
        defaultTenant: "default",
        useDefaultTenantIfEmpty: true
      },
      timeout: void 0,
      throwOnError: true,
      apiContext: new ApiContext(),
      axiosInstance: globalAxios.create(),
      proxyFactsViaPdp: false,
      factsSyncTimeout: null,
      factsSyncTimeoutPolicy: null
    };
  }
  /**
   * Builds the Permit SDK configuration from the values provided by the SDK user
   * and from the default SDK configuration when no specific values are set.
   *
   * @param options - a partial configuration
   * @returns the SDK configuration (for unset values returns the default config)
   */
  static build(options) {
    const config = _.merge(_.assign({}, _ConfigFactory.defaults()), options);
    return config;
  }
};
export {
  ConfigFactory
};
//# sourceMappingURL=config.mjs.map