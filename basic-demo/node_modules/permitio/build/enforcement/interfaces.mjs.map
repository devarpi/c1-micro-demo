{"version":3,"sources":["../../src/enforcement/interfaces.ts"],"sourcesContent":["import { Context } from '../utils/context';\nimport { Dict } from '../utils/dict';\n\nexport interface ICheckInput {\n  user: IUser;\n  action: IAction;\n  resource: IResource;\n  context?: Context;\n}\n\nexport interface ICheckOpaInput {\n  input: ICheckInput;\n}\n\nexport interface ICheckQuery {\n  user: IUser | string;\n  action: IAction | string;\n  resource: IResource | string;\n  context?: Context;\n}\n\nexport interface IGetUserPermissionsInput {\n  user: IUser | string;\n  tenants?: string[];\n  resource?: string[];\n  resource_type?: string[];\n}\n\n/**\n * Respresents a user that is attempting to do an action on a protected resource.\n * Passed as part of the input to the permit.check() function.\n */\nexport interface IUser {\n  /**\n   * The user key, which is the customer-side ID of the user.\n   */\n  key: string;\n  /**\n   * The first name of the user (optional).\n   */\n  firstName?: string;\n  /**\n   * The last name of the user (optional).\n   */\n  lastName?: string;\n  /**\n   * The email address of the user (optional).\n   */\n  email?: string;\n  /**\n   * Custom attributes associated with the user, which can be used in ABAC (Attribute-Based Access Control).\n   */\n  attributes?: Dict;\n}\n\n/**\n * Respresents an action the user is attempting to do on a protected resource.\n * Passed as part of the input to the permit.check() function.\n */\nexport type IAction = string;\n\n/**\n * Respresents a protected resource passed to the permit.check() function.\n * The permit.check() function will check if the user is authorized to access\n * the resource described by this interface, according to the specified check parameters.\n */\nexport interface IResource {\n  /**\n   * The resource type, represents a namespace of resources.\n   * For example, all `task` resources are objects under the `task` namespace.\n   */\n  type: string;\n  /**\n   * The key of the resource instance, which is the customer-side ID of the resource.\n   * Can be used by relationship-based access control policies or by attribute-based\n   * access control policies. If no key is provided (i.e: undefined), the authorization\n   * query is: Can the user perform the action on *any* resource of this type?\n   * (i.e., all resources in this resource namespace)\n   */\n  key?: string;\n  /**\n   * The tenant under which the resource is defined.\n   * The permissions service is multi-tenant by default, so a resource must be associated with a tenant.\n   */\n  tenant?: string;\n  /**\n   * Extra attributes associated with the resource.\n   * This is particularly relevant if the policy is ABAC (Attribute-Based Access Control).\n   */\n  attributes?: Dict;\n}\n\n/**\n * Represents the bulk decision made by a policy.\n */\nexport interface BulkPolicyDecision {\n  /**\n   * Specifies whether the actions are allowed or not.\n   */\n  allow: Array<PolicyDecision>;\n}\n\n/**\n * Represents the decision made by a policy.\n */\nexport interface PolicyDecision {\n  /**\n   * Specifies whether the action is allowed or not.\n   */\n  allow: boolean;\n}\n\n/**\n * Represents the result of a policy decision made by OPA (Open Policy Agent).\n */\nexport interface BulkOpaDecisionResult {\n  /**\n   * The policy decision result.\n   */\n  result: BulkPolicyDecision;\n}\n\n/**\n * Represents the result of a policy decision made by OPA (Open Policy Agent).\n */\nexport interface OpaDecisionResult {\n  /**\n   * The policy decision result.\n   */\n  result: PolicyDecision;\n}\n\nexport interface TenantDetails {\n  key: string;\n  attributes: {\n    [id: string]: any;\n  };\n}\n\nexport interface AllTenantsCheckResponse {\n  tenant: TenantDetails;\n}\n\nexport interface AllTenantsResponse {\n  allowedTenants: AllTenantsCheckResponse[];\n}\n\ninterface TenantPermissions {\n  permissions: string[];\n  tenant?: {\n    key: string;\n    attributes: {\n      [id: string]: any;\n    };\n  };\n}\n\ninterface ResourcePermissions {\n  permissions: string[];\n  resource?: {\n    type: string;\n    key: string;\n    attributes: {\n      [id: string]: any;\n    };\n  };\n}\n\nexport interface IUserPermissions {\n  [id: string]: ResourcePermissions | TenantPermissions;\n}\nexport interface GetUserPermissionsResult {\n  permissions: IUserPermissions;\n}\n\nexport interface OpaGetUserPermissionsResult {\n  result: GetUserPermissionsResult;\n}\n\nexport function isOpaGetUserPermissionsResult(obj: any): obj is OpaGetUserPermissionsResult {\n  return 'result' in obj;\n}\n"],"mappings":";AAmLO,SAAS,8BAA8B,KAA8C;AAC1F,SAAO,YAAY;AACrB;","names":[]}