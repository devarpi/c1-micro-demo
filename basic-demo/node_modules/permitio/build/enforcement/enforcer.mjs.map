{"version":3,"sources":["../../src/enforcement/enforcer.ts","../../src/utils/context.ts","../../src/utils/http-logger.ts","../../src/enforcement/interfaces.ts"],"sourcesContent":["import axios, { AxiosInstance } from 'axios';\nimport { Logger } from 'pino';\nimport URL from 'url-parse';\n\nimport { IPermitConfig } from '../config';\nimport { CheckConfig, Context, ContextStore } from '../utils/context';\nimport { AxiosLoggingInterceptor } from '../utils/http-logger';\n\nimport {\n  AllTenantsResponse,\n  BulkOpaDecisionResult,\n  BulkPolicyDecision,\n  IAction,\n  ICheckInput,\n  ICheckOpaInput,\n  ICheckQuery,\n  IResource,\n  isOpaGetUserPermissionsResult,\n  IUser,\n  IUserPermissions,\n  OpaDecisionResult,\n  OpaGetUserPermissionsResult,\n  PolicyDecision,\n  TenantDetails,\n} from './interfaces';\n\nconst RESOURCE_DELIMITER = ':';\n\nfunction isString(x: any): x is string {\n  return typeof x === 'string';\n}\n\nexport class PermitError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'PermitError';\n  }\n}\n\nexport class PermitConnectionError extends PermitError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'PermitConnectionError';\n  }\n}\n\nexport class PermitPDPStatusError extends PermitError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'PermitPDPStatusError';\n  }\n}\n\nexport interface IEnforcer {\n  /**\n   * Checks if a `user` is authorized to perform an `action` on a `resource` within the specified context.\n   *\n   * @param user     - The user object representing the user.\n   * @param action   - The action to be performed on the resource.\n   * @param resource - The resource object representing the resource.\n   * @param context  - The context object representing the context in which the action is performed.\n   * @returns `true` if the user is authorized, `false` otherwise.\n   * @throws {@link PermitConnectionError} if an error occurs while sending the authorization request to the PDP.\n   * @throws {@link PermitPDPStatusError} if received a response with unexpected status code from the PDP.\n   */\n  check(\n    user: IUser | string,\n    action: IAction,\n    resource: IResource | string,\n    context?: Context,\n    config?: CheckConfig,\n  ): Promise<boolean>;\n\n  /**\n   * Checks multiple requests within the specified context.\n   *\n   * @param checks   - The check requests.\n   * @param context  - The context object representing the context in which the action is performed.\n   * @returns array containing `true` if the user is authorized, `false` otherwise for each check request.\n   * @throws {@link PermitConnectionError} if an error occurs while sending the authorization request to the PDP.\n   * @throws {@link PermitPDPStatusError} if received a response with unexpected status code from the PDP.\n   */\n  bulkCheck(\n    checks: Array<ICheckQuery>,\n    context?: Context,\n    config?: CheckConfig,\n  ): Promise<Array<boolean>>;\n\n  /**\n   * Get all permissions for the specified user.\n   *\n   * @param user     - The user object representing the user.\n   * @param tenants  - The list of tenants to filter the permissions on ( given by roles ).\n   * @param resources - The list of resources to filter the permissions on ( given by resource roles ).\n   * @param resource_types - The list of resource types to filter the permissions on ( given by resource roles ).\n   * @returns object with key as the resource identifier and value as the resource details and permissions.\n   * @throws {@link PermitConnectionError} if an error occurs while sending the authorization request to the PDP.\n   * @throws {@link PermitPDPStatusError} if received a response with unexpected status code from the PDP.\n   */\n  getUserPermissions(\n    user: IUser | string,\n    tenants?: string[],\n    resources?: string[],\n    resource_types?: string[],\n    config?: CheckConfig,\n  ): Promise<IUserPermissions>;\n\n  /**\n   * Get all tenants available in the system.\n   * @returns An array of TenantDetails representing all tenants.\n   */\n  checkAllTenants(\n    user: IUser | string,\n    action: string,\n    resource: IResource | string,\n    context: Context | undefined,\n    sdk: string | undefined,\n  ): Promise<TenantDetails[]>;\n}\n\n/**\n * The {@link Enforcer} class is responsible for performing permission checks against the PDP.\n * It implements the {@link IEnforcer} interface.\n */\nexport class Enforcer implements IEnforcer {\n  public contextStore: ContextStore; // cross-query context (global context)\n  private client: AxiosInstance;\n  private opaClient: AxiosInstance;\n\n  /**\n   * Creates an instance of the Enforcer class.\n   * @param config - The configuration object for the Permit SDK.\n   * @param logger - The logger instance for logging.\n   */\n  constructor(private config: IPermitConfig, private logger: Logger) {\n    const opaBaseUrl = new URL(this.config.pdp);\n    opaBaseUrl.set('port', '8181');\n    opaBaseUrl.set('pathname', `${opaBaseUrl.pathname}v1/data/permit/`);\n    const version = process.env.npm_package_version ?? 'unknown';\n    if (config.axiosInstance) {\n      this.client = config.axiosInstance;\n      this.client.defaults.baseURL = `${this.config.pdp}/`;\n      this.client.defaults.headers.common['X-Permit-SDK-Version'] = `node:${version}`;\n    } else {\n      this.client = axios.create({\n        baseURL: `${this.config.pdp}/`,\n        headers: {\n          'X-Permit-SDK-Version': `node:${version}`,\n        },\n      });\n    }\n    if (config.opaAxiosInstance) {\n      this.opaClient = config.opaAxiosInstance;\n      this.opaClient.defaults.baseURL = opaBaseUrl.toString();\n      this.opaClient.defaults.headers.common['X-Permit-SDK-Version'] = `node:${version}`;\n    } else {\n      this.opaClient = axios.create({\n        baseURL: opaBaseUrl.toString(),\n        headers: {\n          'X-Permit-SDK-Version': `node:${version}`,\n        },\n      });\n    }\n    this.logger = logger;\n    AxiosLoggingInterceptor.setupInterceptor(this.client, this.logger);\n    this.contextStore = new ContextStore();\n  }\n\n  public async getUserPermissions(\n    user: IUser | string,\n    tenants?: string[],\n    resources?: string[],\n    resource_types?: string[],\n    config: CheckConfig = {},\n  ): Promise<IUserPermissions> {\n    return await this.getUserPermissionsWithExceptions(\n      user,\n      tenants,\n      resources,\n      resource_types,\n      config,\n    ).catch((err) => {\n      const shouldThrow =\n        config.throwOnError === undefined ? this.config.throwOnError : config.throwOnError;\n      if (shouldThrow) {\n        throw err;\n      } else {\n        this.logger.error(err);\n        return {};\n      }\n    });\n  }\n\n  private async getUserPermissionsWithExceptions(\n    user: IUser | string,\n    tenants?: string[],\n    resources?: string[],\n    resource_types?: string[],\n    config: CheckConfig = {},\n  ): Promise<IUserPermissions> {\n    const checkTimeout = config.timeout || this.config.timeout;\n    const input = {\n      user: isString(user) ? { key: user } : user,\n      tenants,\n      resources,\n      resource_types,\n    };\n    return await this.client\n      .post<OpaGetUserPermissionsResult | IUserPermissions>('user-permissions', input, {\n        headers: {\n          Authorization: `Bearer ${this.config.token}`,\n        },\n        timeout: checkTimeout,\n      })\n      .then((response) => {\n        if (response.status !== 200) {\n          throw new PermitPDPStatusError(`Permit.getUserPermissions() got an unexpected status code: ${response.status}, please check your SDK init and make sure the PDP sidecar is configured correctly. \\n\\\n            Read more about setting up the PDP at https://docs.permit.io`);\n        }\n        const permissions =\n          (isOpaGetUserPermissionsResult(response.data)\n            ? response.data.result.permissions\n            : response.data) || {};\n        this.logger.info(\n          `permit.getUserPermissions(${Enforcer.userRepr(input.user)}) = ${JSON.stringify(\n            permissions,\n          )}`,\n        );\n        return permissions;\n      })\n      .catch((error) => {\n        const errorMessage = `Error in permit.getUserPermissions(${Enforcer.userRepr(input.user)})`;\n\n        if (axios.isAxiosError(error)) {\n          const errorStatusCode: string = error.response?.status.toString() || '';\n          const errorDetails: string = error?.response?.data\n            ? JSON.stringify(error.response.data)\n            : error.message;\n          this.logger.error(`[${errorStatusCode}] ${errorMessage}, err: ${errorDetails}`);\n        } else {\n          this.logger.error(`${errorMessage}\\n${error}`);\n        }\n        throw new PermitConnectionError(`Permit SDK got error: \\n ${error.message} \\n\n          and cannot connect to the PDP, please check your configuration and make sure the\n          PDP is running at ${this.config.pdp} and accepting requests. \\n\n          Read more about setting up the PDP at https://docs.permit.io`);\n      });\n  }\n\n  public async bulkCheck(\n    checks: Array<ICheckQuery>,\n    context: Context = {}, // context provided specifically for this query\n    config: CheckConfig = {},\n  ): Promise<Array<boolean>> {\n    return await this.bulkCheckWithExceptions(checks, context, config).catch((err) => {\n      const shouldThrow =\n        config.throwOnError === undefined ? this.config.throwOnError : config.throwOnError;\n      if (shouldThrow) {\n        throw err;\n      } else {\n        this.logger.error(err);\n        return [];\n      }\n    });\n  }\n\n  private buildCheckInput(\n    user: IUser | string,\n    action: IAction,\n    resource: IResource | string,\n    context: Context = {}, // context provided specifically for this query\n  ): ICheckInput {\n    const normalizedUser: IUser = isString(user) ? { key: user } : user;\n\n    const resourceObj = isString(resource) ? Enforcer.resourceFromString(resource) : resource;\n    const normalizedResource: IResource = this.normalizeResource(resourceObj);\n\n    const queryContext = this.contextStore.getDerivedContext(context);\n\n    return {\n      user: normalizedUser,\n      action: action,\n      resource: normalizedResource,\n      context: queryContext,\n    };\n  }\n\n  private checkInputRepr(checkInput: ICheckInput): string {\n    return `${Enforcer.userRepr(checkInput.user)}, ${checkInput.action}, ${Enforcer.resourceRepr(\n      checkInput.resource,\n    )}`;\n  }\n\n  private async bulkCheckWithExceptions(\n    checks: Array<ICheckQuery>,\n    context: Context = {}, // context provided specifically for this query\n    config: CheckConfig = {},\n  ): Promise<Array<boolean>> {\n    const checkTimeout = config.timeout || this.config.timeout;\n    const inputs: Array<ICheckInput> = [];\n    checks.forEach((check) => {\n      const input = this.buildCheckInput(check.user, check.action, check.resource, context);\n      inputs.push(input);\n    });\n\n    return await this.client\n      .post<BulkPolicyDecision | BulkOpaDecisionResult>('allowed/bulk', inputs, {\n        headers: {\n          Authorization: `Bearer ${this.config.token}`,\n        },\n        timeout: checkTimeout,\n      })\n      .then((response) => {\n        if (response.status !== 200) {\n          throw new PermitPDPStatusError(`Permit.bulkCheck() got an unexpected status code: ${response.status}, please check your SDK init and make sure the PDP sidecar is configured correctly. \\n\\\n            Read more about setting up the PDP at https://docs.permit.io`);\n        }\n        const decisions = (\n          ('allow' in response.data ? response.data.allow : response.data.result.allow) || []\n        ).map((decision) => decision.allow || false);\n        this.logger.info(\n          `permit.bulkCheck(${inputs.map((input) => this.checkInputRepr(input))}) = ${decisions}`,\n        );\n        return decisions;\n      })\n      .catch((error) => {\n        const errorMessage = `Error in permit.bulkCheck(${inputs.map((input) =>\n          this.checkInputRepr(input),\n        )})`;\n\n        if (axios.isAxiosError(error)) {\n          const errorStatusCode: string = error.response?.status.toString() || '';\n          const errorDetails: string = error?.response?.data\n            ? JSON.stringify(error.response.data)\n            : error.message;\n          this.logger.error(`[${errorStatusCode}] ${errorMessage}, err: ${errorDetails}`);\n        } else {\n          this.logger.error(`${errorMessage}\\n${error}`);\n        }\n        throw new PermitConnectionError(`Permit SDK got error: \\n ${error.message} \\n\n          and cannot connect to the PDP, please check your configuration and make sure the\n          PDP is running at ${this.config.pdp} and accepting requests. \\n\n          Read more about setting up the PDP at https://docs.permit.io`);\n      });\n  }\n\n  public async checkAllTenants(\n    user: IUser | string,\n    action: string,\n    resource: IResource | string,\n    context: Context = {}, // default to empty context if not provided\n    sdk = 'node', // default to \"node\" if not provided\n  ): Promise<TenantDetails[]> {\n    try {\n      const response = await this.client.post<AllTenantsResponse>('/allowed/all-tenants', {\n        headers: {\n          Authorization: `Bearer ${this.config.token}`,\n          'X-Permit-Sdk-Language': sdk,\n        },\n        params: {\n          user,\n          action,\n          resource,\n          context,\n        },\n      });\n      return response.data.allowedTenants.map((item) => item.tenant);\n    } catch (error) {\n      this.logger.error('Error fetching all tenants:', error);\n      throw error;\n    }\n  }\n\n  public async check(\n    user: IUser | string,\n    action: IAction,\n    resource: IResource | string,\n    context: Context = {}, // context provided specifically for this query\n    config: CheckConfig = {},\n  ): Promise<boolean> {\n    return await this.checkWithExceptions(user, action, resource, context, config).catch((err) => {\n      const shouldThrow =\n        config.throwOnError === undefined ? this.config.throwOnError : config.throwOnError;\n      if (shouldThrow) {\n        throw err;\n      } else {\n        this.logger.error(err);\n        return false;\n      }\n    });\n  }\n\n  //check\n  private async checkWithExceptions(\n    user: IUser | string,\n    action: IAction,\n    resource: IResource | string,\n    context: Context = {}, // context provided specifically for this query\n    config: CheckConfig = {},\n  ): Promise<boolean> {\n    let input: ICheckOpaInput | ICheckInput = this.buildCheckInput(user, action, resource, context);\n    const client = config?.useOpa ? this.opaClient : this.client;\n    const path = config?.useOpa ? 'root' : 'allowed';\n\n    if (config?.useOpa) {\n      input = { input: input };\n    }\n    // /root\n    const checkTimeout = config.timeout || this.config.timeout;\n\n    return await client\n      .post<PolicyDecision | OpaDecisionResult>(path, input, {\n        headers: {\n          Authorization: `Bearer ${this.config.token}`,\n        },\n        timeout: checkTimeout,\n      })\n      .then((response) => {\n        if (response.status !== 200) {\n          throw new PermitPDPStatusError(`Permit.check() got an unexpected status code: ${response.status}, please check your SDK init and make sure the PDP sidecar is configured correctly. \\n\\\n            Read more about setting up the PDP at https://docs.permit.io`);\n        }\n        const decision =\n          ('allow' in response.data ? response.data.allow : response.data.result.allow) || false;\n\n        this.logger.info(\n          `permit.check(${this.checkInputRepr((input as any).input || input)}) = ${decision}`,\n        );\n        return decision;\n      })\n      .catch((error) => {\n        const errorMessage = `Error in permit.check(${this.checkInputRepr(\n          (input as any).input || input,\n        )})`;\n\n        if (axios.isAxiosError(error)) {\n          const errorStatusCode: string = error.response?.status.toString() || '';\n          const errorDetails: string = error?.response?.data\n            ? JSON.stringify(error.response.data)\n            : error.message;\n          this.logger.error(`[${errorStatusCode}] ${errorMessage}, err: ${errorDetails}`);\n        } else {\n          this.logger.error(`${errorMessage}\\n${error}`);\n        }\n        throw new PermitConnectionError(`Permit SDK got error: \\n ${error.message} \\n\n          and cannot connect to the PDP, please check your configuration and make sure the PDP is running at ${this.config.pdp} and accepting requests. \\n\n          Read more about setting up the PDP at https://docs.permit.io`);\n      });\n  }\n\n  // TODO: remove this eventually, once we decide on finalized structure of AuthzQuery\n  private normalizeResource(resource: IResource): IResource {\n    const normalizedResource: IResource = Object.assign({}, resource);\n\n    // if tenant is empty, we might auto-set the default tenant according to config\n    if (!normalizedResource.tenant && this.config.multiTenancy.useDefaultTenantIfEmpty) {\n      normalizedResource.tenant = this.config.multiTenancy.defaultTenant;\n    }\n\n    return normalizedResource;\n  }\n\n  private static userRepr(user: IUser): string {\n    if (user.attributes || user.email) {\n      return JSON.stringify(user);\n    }\n    return user.key;\n  }\n\n  private static resourceRepr(resource: IResource): string {\n    if (resource.attributes && resource.attributes.length > 0) {\n      return JSON.stringify(resource);\n    }\n\n    let resourceRepr = '';\n    if (resource.tenant) {\n      resourceRepr += `${resource.tenant}/`;\n    }\n    resourceRepr += `${resource.type}:${resource.key ?? '*'}`;\n    return resourceRepr;\n  }\n\n  private static resourceFromString(resource: string): IResource {\n    const parts = resource.split(RESOURCE_DELIMITER);\n    if (parts.length < 1 || parts.length > 2) {\n      throw Error(`permit.check() got invalid resource string: '${resource}'`);\n    }\n    return {\n      type: parts[0],\n      key: parts.length > 1 ? parts[1] : undefined,\n    };\n  }\n\n  public getMethods(): IEnforcer {\n    return {\n      check: this.check.bind(this),\n      bulkCheck: this.bulkCheck.bind(this),\n      getUserPermissions: this.getUserPermissions.bind(this),\n      checkAllTenants: this.checkAllTenants.bind(this),\n    };\n  }\n}\n","export interface Context {\n  [id: string]: any;\n}\n\nexport interface CheckConfig {\n  useOpa?: boolean;\n  timeout?: number;\n  throwOnError?: boolean;\n}\n\nexport interface ContextTransform {\n  (context: Context): Context;\n}\n\n/**\n * Store for contexted passed as part of check() queries\n */\nexport class ContextStore {\n  private baseContext: Context = {}; // cross-query context (global context)\n  private transforms: ContextTransform[] = [];\n\n  /**\n   * add context to the base context\n   */\n  public add(context: Context): void {\n    this.baseContext = Object.assign(this.baseContext, context);\n  }\n\n  public registerTransform(transform: ContextTransform): void {\n    this.transforms.push(transform);\n  }\n\n  /**\n   * merges the global context (this.context) with the context\n   * provided for this specific query (context). the specific\n   * context overrides the base (global) context.\n   */\n  public getDerivedContext(context: Context): Context {\n    return Object.assign({}, this.baseContext, context);\n  }\n\n  public transform(initialContext: Context): Context {\n    let context = { ...initialContext };\n    for (const transform of this.transforms) {\n      context = transform(context);\n    }\n    return context;\n  }\n}\n","import { AxiosInstance, AxiosResponse, InternalAxiosRequestConfig } from 'axios';\nimport pino from 'pino';\n\nexport class AxiosLoggingInterceptor {\n  static setupInterceptor(axiosInstance: AxiosInstance, logger: pino.Logger): void {\n    // Add a request interceptor\n    axiosInstance.interceptors.request.use(\n      function (request: InternalAxiosRequestConfig) {\n        request.headers = request.headers || {}; // Ensure headers are not undefined\n        logger.debug(`Sending HTTP request: ${request?.method?.toUpperCase()} ${request?.url}`);\n        return request;\n      },\n      function (error: any) {\n        // Do something with request error\n        return Promise.reject(error);\n      },\n    );\n\n    // Add a response interceptor\n    axiosInstance.interceptors.response.use(\n      function (response: AxiosResponse<any>) {\n        logger.debug(\n          `Received HTTP response: ${response?.config?.method?.toUpperCase()} ${\n            response?.config?.url\n          }, status: ${response?.status}`,\n        );\n        return response;\n      },\n      function (error) {\n        return Promise.reject(error);\n      },\n    );\n  }\n}\n","import { Context } from '../utils/context';\nimport { Dict } from '../utils/dict';\n\nexport interface ICheckInput {\n  user: IUser;\n  action: IAction;\n  resource: IResource;\n  context?: Context;\n}\n\nexport interface ICheckOpaInput {\n  input: ICheckInput;\n}\n\nexport interface ICheckQuery {\n  user: IUser | string;\n  action: IAction | string;\n  resource: IResource | string;\n  context?: Context;\n}\n\nexport interface IGetUserPermissionsInput {\n  user: IUser | string;\n  tenants?: string[];\n  resource?: string[];\n  resource_type?: string[];\n}\n\n/**\n * Respresents a user that is attempting to do an action on a protected resource.\n * Passed as part of the input to the permit.check() function.\n */\nexport interface IUser {\n  /**\n   * The user key, which is the customer-side ID of the user.\n   */\n  key: string;\n  /**\n   * The first name of the user (optional).\n   */\n  firstName?: string;\n  /**\n   * The last name of the user (optional).\n   */\n  lastName?: string;\n  /**\n   * The email address of the user (optional).\n   */\n  email?: string;\n  /**\n   * Custom attributes associated with the user, which can be used in ABAC (Attribute-Based Access Control).\n   */\n  attributes?: Dict;\n}\n\n/**\n * Respresents an action the user is attempting to do on a protected resource.\n * Passed as part of the input to the permit.check() function.\n */\nexport type IAction = string;\n\n/**\n * Respresents a protected resource passed to the permit.check() function.\n * The permit.check() function will check if the user is authorized to access\n * the resource described by this interface, according to the specified check parameters.\n */\nexport interface IResource {\n  /**\n   * The resource type, represents a namespace of resources.\n   * For example, all `task` resources are objects under the `task` namespace.\n   */\n  type: string;\n  /**\n   * The key of the resource instance, which is the customer-side ID of the resource.\n   * Can be used by relationship-based access control policies or by attribute-based\n   * access control policies. If no key is provided (i.e: undefined), the authorization\n   * query is: Can the user perform the action on *any* resource of this type?\n   * (i.e., all resources in this resource namespace)\n   */\n  key?: string;\n  /**\n   * The tenant under which the resource is defined.\n   * The permissions service is multi-tenant by default, so a resource must be associated with a tenant.\n   */\n  tenant?: string;\n  /**\n   * Extra attributes associated with the resource.\n   * This is particularly relevant if the policy is ABAC (Attribute-Based Access Control).\n   */\n  attributes?: Dict;\n}\n\n/**\n * Represents the bulk decision made by a policy.\n */\nexport interface BulkPolicyDecision {\n  /**\n   * Specifies whether the actions are allowed or not.\n   */\n  allow: Array<PolicyDecision>;\n}\n\n/**\n * Represents the decision made by a policy.\n */\nexport interface PolicyDecision {\n  /**\n   * Specifies whether the action is allowed or not.\n   */\n  allow: boolean;\n}\n\n/**\n * Represents the result of a policy decision made by OPA (Open Policy Agent).\n */\nexport interface BulkOpaDecisionResult {\n  /**\n   * The policy decision result.\n   */\n  result: BulkPolicyDecision;\n}\n\n/**\n * Represents the result of a policy decision made by OPA (Open Policy Agent).\n */\nexport interface OpaDecisionResult {\n  /**\n   * The policy decision result.\n   */\n  result: PolicyDecision;\n}\n\nexport interface TenantDetails {\n  key: string;\n  attributes: {\n    [id: string]: any;\n  };\n}\n\nexport interface AllTenantsCheckResponse {\n  tenant: TenantDetails;\n}\n\nexport interface AllTenantsResponse {\n  allowedTenants: AllTenantsCheckResponse[];\n}\n\ninterface TenantPermissions {\n  permissions: string[];\n  tenant?: {\n    key: string;\n    attributes: {\n      [id: string]: any;\n    };\n  };\n}\n\ninterface ResourcePermissions {\n  permissions: string[];\n  resource?: {\n    type: string;\n    key: string;\n    attributes: {\n      [id: string]: any;\n    };\n  };\n}\n\nexport interface IUserPermissions {\n  [id: string]: ResourcePermissions | TenantPermissions;\n}\nexport interface GetUserPermissionsResult {\n  permissions: IUserPermissions;\n}\n\nexport interface OpaGetUserPermissionsResult {\n  result: GetUserPermissionsResult;\n}\n\nexport function isOpaGetUserPermissionsResult(obj: any): obj is OpaGetUserPermissionsResult {\n  return 'result' in obj;\n}\n"],"mappings":"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","names":[]}